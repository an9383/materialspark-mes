<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  	
<mapper namespace="mes.mappers.qm.stateMapper">

	<resultMap id="StateVo" type="mes.domain.qm.StateVo">
		<result property="workOrdNo"					column="WORK_ORD_NO"				/>	<!--  -->
		<result property="ordLotNo"						column="ORD_LOT_NO"					/>	<!--  -->
		<result property="lotNo"						column="LOT_NO"						/>	<!--  -->
		<result property="gubun"						column="GUBUN"						/>	<!--  -->
		<result property="equipCd"						column="EQUIP_CD"					/>	<!--  -->
		<result property="equipNm"						column="EQUIP_NM"					/>	<!--  -->
		<result property="goodsCd"						column="GOODS_CD"					/>	<!--  -->
		<result property="goodsNm"						column="GOODS_NM"					/>	<!--  -->
		<result property="qutyNm"						column="QUTY_NM"					/>	<!--  -->
		<result property="ordGubun"						column="ORD_GUBUN"					/>	<!--  -->
		<result property="ordDate"						column="ORD_DATE"					/>	<!--  -->
		<result property="equipCondSeq"					column="EQUIP_COND_SEQ"				/>	<!--  -->
		<result property="workStatusCd"					column="WORK_STATUS_CD"				/>	<!--  -->
		<result property="appearInspctDate"				column="APPEAR_INSPCT_DATE"			/>	<!--  -->
		<result property="wpLeftAlwnceMinus"			column="WP_LEFT_ALWNCE_MINUS"		/>	<!--  -->
		<result property="wpLeftCond"					column="WP_LEFT_COND"				/>	<!--  -->
		<result property="wpLeftAlwncePlus"				column="WP_LEFT_ALWNCE_PLUS"		/>	<!--  -->
		<result property="stepCd"						column="STEP_CD"					/>	<!--  -->
		<!-- 치수 -->
		<result property="equipCondSeq"					column="EQUIP_COND_SEQ"				/>	<!--  -->
		<result property="wpLeftCond"					column="WP_LEFT_COND"				/>
		<result property="wpLeftAlwncePlus"				column="WP_LEFT_ALWNCE_PLUS"		/>
		<result property="wpLeftAlwnceMinus"			column="WP_LEFT_ALWNCE_MINUS"		/>
		<result property="wpRightCond"					column="WP_RIGHT_COND"				/>
		<result property="wpRightAlwncePlus"			column="WP_RIGHT_ALWNCE_PLUS"		/>
		<result property="wpRightAlwnceMinus"			column="WP_RIGHT_ALWNCE_MINUS"		/>
		<result property="pitchLeftCond"				column="PITCH_LEFT_COND"			/>
		<result property="pitchLeftAlwncePlus"			column="PITCH_LEFT_ALWNCE_PLUS"		/>
		<result property="pitchLeftAlwnceMinus"			column="PITCH_LEFT_ALWNCE_MINUS"	/>
		<result property="pitchRightCond"				column="PITCH_RIGHT_COND"			/>
		<result property="pitchRightAlwncePlus"			column="PITCH_RIGHT_ALWNCE_PLUS"	/>
		<result property="pitchRightAlwnceMinus"		column="PITCH_RIGHT_ALWNCE_MINUS"	/>
		<result property="ppfWingLeftCond"				column="PPF_WING_LEFT_COND"			/>
		<result property="ppfWingLeftAlwncePlus"		column="PPF_WING_LEFT_ALWNCE_PLUS"	/>
		<result property="ppfWingLeftAlwnceMinus"		column="PPF_WING_LEFT_ALWNCE_MINUS"	/>
		<result property="ppfWingRightCond"				column="PPF_WING_RIGHT_COND"		/>
		<result property="ppfWingRightAlwncePlus"		column="PPF_WING_RIGHT_ALWNCE_PLUS"	/>
		<result property="ppfWingRightAlwnceMinus"		column="PPF_WING_RIGHT_ALWNCE_MINUS"/>
		<result property="ppfDepthLeftCond"				column="PPF_DEPTH_LEFT_COND"		/>
		<result property="ppfDepthLeftAlwncePlus"		column="PPF_DEPTH_LEFT_ALWNCE_PLUS"	/>
		<result property="ppfDepthLeftAlwnceMinus"		column="PPF_DEPTH_LEFT_ALWNCE_MINUS"/>
		<result property="ppfDepthRightCond"			column="PPF_DEPTH_RIGHT_COND"		/>
		<result property="ppfDepthRightAlwncePlus"		column="PPF_DEPTH_RIGHT_ALWNCE_PLUS"/>
		<result property="ppfDepthRightAlwnceMinus"		column="PPF_DEPTH_RIGHT_ALWNCE_MINUS"/>
		<result property="filmCond"						column="FILM_COND"					/>
		<result property="filmAlwncePlus"				column="FILM_ALWNCE_PLUS"			/>
		<result property="filmAlwnceMinus"				column="FILM_ALWNCE_MINUS"			/>
		<result property="metalDepthCond"				column="METAL_DEPTH_COND"			/>
		<result property="metalDepthAlwncePlus"			column="METAL_DEPTH_ALWNCE_PLUS"	/>
		<result property="metalDepthAlwnceMinus"		column="METAL_DEPTH_ALWNCE_MINUS"	/>
		<result property="metalThicknessCond"			column="METAL_THICKNESS_COND"		/>
		<result property="metalThicknessAlwncePlus"		column="METAL_THICKNESS_ALWNCE_PLUS"/>
		<result property="metalThicknessAlwnceMinus"	column="METAL_THICKNESS_ALWNCE_MINUS"/>
		<result property="thCenterCond"					column="TH_CENTER_COND"				/>
		<result property="thCenterAlwncePlus"			column="TH_CENTER_ALWNCE_PLUS"		/>
		<result property="thCenterAlwnceMinus"			column="TH_CENTER_ALWNCE_MINUS"		/>
		<result property="thEdgeCond"					column="TH_EDGE_COND"				/>
		<result property="thEdgeAlwncePlus"				column="TH_EDGE_ALWNCE_PLUS"		/>
		<result property="thEdgeAlwnceMinus"			column="TH_EDGE_ALWNCE_MINUS"		/>
		<result property="burrCond"						column="BURR_COND"					/>
		<result property="burrAlwncePlus"				column="BURR_ALWNCE_PLUS"			/>
		<result property="burrAlwnceMinus"				column="BURR_ALWNCE_MINUS"			/>
		<result property="regId"						column="REG_ID"						/>
		<result property="regDate"						column="REG_DATE"					/>
		<result property="updId"						column="UPD_ID"						/>
		<result property="updDate"						column="UPD_DATE"					/>
		<result property="wpLeftAlwnce"					column="WP_LEFT_ALWNCE"			/>
		<result property="wpRightAlwnce"				column="WP_RIGHT_ALWNCE"		/>
		<result property="pitchLeftAlwnce"				column="PITCH_LEFT_ALWNCE"		/>
		<result property="pitchRightAlwnce"				column="PITCH_RIGHT_ALWNCE"		/>
		<result property="ppfWingLeftAlwnce"			column="PPF_WING_LEFT_ALWNCE"	/>
		<result property="ppfWingRightAlwnce"			column="PPF_WING_RIGHT_ALWNCE"	/>
		<result property="ppfDepthLeftAlwnce"			column="PPF_DEPTH_LEFT_ALWNCE"	/>
		<result property="ppfDepthRightAlwnce"			column="PPF_DEPTH_RIGHT_ALWNCE"	/>
		<result property="filmAlwnce"					column="FILM_ALWNCE"			/>
		<result property="metalDepthAlwnce"				column="METAL_DEPTH_ALWNCE"		/>
		<result property="metalThicknessAlwnce"			column="METAL_THICKNESS_ALWNCE"	/>
		<result property="thCenterAlwnce"				column="TH_CENTER_ALWNCE"		/>
		<result property="thEdgeAlwncePlus"				column="TH_EDGE_ALWNCE_PLUS"	/>
		<result property="bulgeLeftupHeight"			column="BULGE_LEFTUP_HEIGHT"	/>
		<result property="bulgeLeftdownHeight"			column="BULGE_LEFTDOWN_HEIGHT"	/>
		<result property="bulgeRightupHeight"			column="BULGE_RIGHTUP_HEIGHT"	/>
		<result property="bulgeRightdownHeight"			column="BULGE_RIGHTDOWN_HEIGHT"	/>
		<result property="bulgeLeftupWidth"				column="BULGE_LEFTUP_WIDTH"		/>
		<result property="bulgeLeftdownWidth"			column="BULGE_LEFTDOWN_WIDTH"	/>
		<result property="bulgeRightupWidth"			column="BULGE_RIGHTUP_WIDTH"	/>
		<result property="bulgeRightdownWidth"			column="BULGE_RIGHTDOWN_WIDTH"	/>
		<result property="burrMetalAlwnce"				column="BURR_METAL_ALWNCE"		/>
		<result property="burrRcutAlwnce"				column="BURR_RCUT_ALWNCE"		/>
		<result property="burrRedgeAlwnce"				column="BURR_REDGE_ALWNCE"		/>

		<result property="thStepInput"					column="TH_STEP_INPUT"			/>
		<result property="thEdgeCnt"					column="TH_EDGE_CNT"			/>
		<result property="thEdgeResult"					column="TH_EDGE_RESULT"			/>
		<result property="gapOfLayer"					column="GAP_OF_LAYER"			/>		
		<result property="ppfDepthCenterAlwnce"		column="PPF_DEPTH_CENTER_ALWNCE"	/>
		<result property="wpCenterAlwnce"           column="WP_CENTER_ALWNCE"			/>
		<result property="wpDeviationAlwnce"        column="WP_DEVIATION_ALWNCE"		/>
		<result property="x1X2Alwnce"               column="X1_X2_ALWNCE"				/>
		<result property="thEdgeRightAlwnce"        column="TH_EDGE_RIGHT_ALWNCE"		/>
		<result property="bendingAlwnce"            column="BENDING_ALWNCE"				/>
		
		
	</resultMap>
	
	<!-- 초중종물 검사현황 목로조회 -->
	<select id="stateList" resultMap="StateVo">
		SELECT * FROM
			(
			
			
			<if test="listGubun != null and listGubun.equals('001')">				
				SELECT
					A.WORK_ORD_NO
					, '' ORD_LOT_NO					
					, '' LOT_NO
					, '000' STEP_CD
					, '' GUBUN
					, A.EQUIP_CD
					, (SELECT EQUIP_NM FROM TB_EQUIP_CODE_ADM X WHERE X.EQUIP_CD = A.EQUIP_CD) EQUIP_NM
					, A.GOODS_CD
					, (SELECT GOODS_NM FROM TB_GOODS_CODE_ADM X WHERE X.GOODS_CD = A.GOODS_CD)GOODS_NM
					, (SELECT X.QUTY_CD FROM TB_MATRL_CODE_ADM X, TB_GOODS_CODE_ADM Z WHERE X.MATRL_CD = Z.ALNICU_MATRL_CD AND A.GOODS_CD = Z.GOODS_CD)QUTY_CD
					, (SELECT BASE_CD_NM FROM TB_SYSTEM_COMMON_CODE X WHERE X.BASE_GROUP_CD='007' AND X.BASE_CD =  (SELECT X.QUTY_CD FROM TB_MATRL_CODE_ADM X, TB_GOODS_CODE_ADM Z WHERE X.MATRL_CD = Z.ALNICU_MATRL_CD AND A.GOODS_CD = Z.GOODS_CD)) QUTY_NM
					, A.ORD_GUBUN
					, A.ORD_DATE
					, A.WORK_STATUS_CD
					, A.APPEAR_INSPCT_DATE
					, ('-'+C.WP_LEFT_ALWNCE_MINUS +' ['+ C.WP_LEFT_COND + '] '+ '+'+C.WP_LEFT_ALWNCE_PLUS) WP_LEFT_ALWNCE
					, ('-'+C.WP_RIGHT_ALWNCE_MINUS +' ['+ C.WP_RIGHT_COND + '] '+ '+'+C.WP_RIGHT_ALWNCE_PLUS) WP_RIGHT_ALWNCE
					, ('-'+C.PITCH_LEFT_ALWNCE_MINUS +' ['+ C.PITCH_LEFT_COND + '] '+ '+'+C.PITCH_LEFT_ALWNCE_PLUS) PITCH_LEFT_ALWNCE
					, ('-'+C.PITCH_RIGHT_ALWNCE_MINUS +' ['+ C.PITCH_RIGHT_COND + '] '+ '+'+C.PITCH_RIGHT_ALWNCE_PLUS) PITCH_RIGHT_ALWNCE
					, ('-'+C.PPF_WING_LEFT_ALWNCE_MINUS +' ['+ C.PPF_WING_LEFT_COND + '] '+ '+'+C.PPF_WING_LEFT_ALWNCE_PLUS) PPF_WING_LEFT_ALWNCE
					, ('-'+C.PPF_WING_RIGHT_ALWNCE_MINUS +' ['+ C.PPF_WING_RIGHT_COND + '] '+ '+'+C.PPF_WING_RIGHT_ALWNCE_PLUS) PPF_WING_RIGHT_ALWNCE
					, ('-'+C.PPF_DEPTH_LEFT_ALWNCE_MINUS +' ['+ C.PPF_DEPTH_LEFT_COND + '] '+ '+'+C.PPF_DEPTH_LEFT_ALWNCE_PLUS) PPF_DEPTH_LEFT_ALWNCE
					, ('-'+C.PPF_DEPTH_RIGHT_ALWNCE_MINUS +' ['+ C.PPF_DEPTH_RIGHT_COND + '] '+ '+'+C.PPF_DEPTH_RIGHT_ALWNCE_PLUS) PPF_DEPTH_RIGHT_ALWNCE
					, ('-'+C.FILM_ALWNCE_MINUS +' ['+ C.FILM_COND + '] '+ '+'+C.FILM_ALWNCE_PLUS) FILM_ALWNCE
					, ('-'+C.METAL_DEPTH_ALWNCE_MINUS +' ['+ C.METAL_DEPTH_COND + '] '+ '+'+C.METAL_DEPTH_ALWNCE_PLUS) METAL_DEPTH_ALWNCE
					, ('-'+C.METAL_THICKNESS_ALWNCE_MINUS +' ['+ C.METAL_THICKNESS_COND + '] '+ '+'+C.METAL_THICKNESS_ALWNCE_PLUS) METAL_THICKNESS_ALWNCE
					, ('-'+C.TH_CENTER_ALWNCE_MINUS +' ['+ C.TH_CENTER_COND + '] '+ '+'+C.TH_CENTER_ALWNCE_PLUS) TH_CENTER_ALWNCE
					, ('-'+C.TH_EDGE_ALWNCE_MINUS +' ['+ C.TH_EDGE_COND + '] '+ '+'+C.TH_EDGE_ALWNCE_PLUS) TH_EDGE_ALWNCE_PLUS
					, ('-'+C.BURR_ALWNCE_MINUS +' ['+ C.BURR_COND + '] '+ '+'+C.BURR_ALWNCE_PLUS) BURR_METAL_ALWNCE
					, ('') BURR_RCUT_ALWNCE
					, ('') BURR_REDGE_ALWNCE
					, ('') AS TH_STEP_INPUT
					, ('') AS TH_EDGE_CNT
					, ('') AS TH_EDGE_RESULT
					, ('-'+ISNULL(C.GAP_OF_LAYER_MINUS, 0) +' ['+ ISNULL(C.GAP_OF_LAYER_COND, 0) + '] '+ '+'+ISNULL(C.GAP_OF_LAYER_PLUS, 0)) GAP_OF_LAYER
				FROM TB_WORK_ORDER A, TB_EQUIP_SIZE_COND_ADM C
				WHERE 1=1
				AND A.EQUIP_COND_SEQ = C.EQUIP_COND_SEQ
				AND	A.WORK_STATUS_CD IN ('S', 'C', 'A')
				AND A.ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDateTo}
				AND A.EQUIP_CD IN (${equipCd})
				<if test="goodsCd != null and goodsCd != ''">
					AND A.GOODS_CD = #{goodsCd}
				</if>
				
				UNION ALL
			</if>
			
			SELECT 
				A.WORK_ORD_NO	
				, '' ORD_LOT_NO			
				, B.LOT_NO
				, B.STEP_CD
				, '' GUBUN
				, A.EQUIP_CD
				, (SELECT EQUIP_NM FROM TB_EQUIP_CODE_ADM X WHERE X.EQUIP_CD = A.EQUIP_CD) EQUIP_NM
				, A.GOODS_CD
				, (SELECT GOODS_NM FROM TB_GOODS_CODE_ADM X WHERE X.GOODS_CD = A.GOODS_CD)GOODS_NM
				, (SELECT X.QUTY_CD FROM TB_MATRL_CODE_ADM X, TB_GOODS_CODE_ADM Z WHERE X.MATRL_CD = Z.ALNICU_MATRL_CD AND A.GOODS_CD = Z.GOODS_CD)QUTY_CD
				, (SELECT BASE_CD_NM FROM TB_SYSTEM_COMMON_CODE X WHERE X.BASE_GROUP_CD='007' AND X.BASE_CD =  (SELECT X.QUTY_CD FROM TB_MATRL_CODE_ADM X, TB_GOODS_CODE_ADM Z WHERE X.MATRL_CD = Z.ALNICU_MATRL_CD AND A.GOODS_CD = Z.GOODS_CD)) QUTY_NM
				, A.ORD_GUBUN
				, A.ORD_DATE
				, A.WORK_STATUS_CD
				, A.APPEAR_INSPCT_DATE
				
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 2), ROUND(B.WP_LEFT_ALWNCE, 2))) AS WP_LEFT_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 2), ROUND(B.WP_RIGHT_ALWNCE, 2))) AS WP_RIGHT_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 2), ROUND(B.PITCH_LEFT_ALWNCE, 2))) AS PITCH_LEFT_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 2), ROUND(B.PITCH_RIGHT_ALWNCE, 2))) AS PITCH_RIGHT_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 2), ROUND(B.PPF_WING_LEFT_ALWNCE, 2))) AS PPF_WING_LEFT_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 2), ROUND(B.PPF_WING_RIGHT_ALWNCE, 2))) AS PPF_WING_RIGHT_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 2), ROUND(B.PPF_DEPTH_LEFT_ALWNCE, 2))) AS PPF_DEPTH_LEFT_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 2), ROUND(B.PPF_DEPTH_RIGHT_ALWNCE, 2))) AS PPF_DEPTH_RIGHT_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 2), ROUND(B.FILM_ALWNCE, 2))) AS FILM_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 2), ROUND(B.METAL_DEPTH_ALWNCE, 2))) AS METAL_DEPTH_ALWNCE
				
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 3), ROUND(B.METAL_THICKNESS_ALWNCE, 3))) AS METAL_THICKNESS_ALWNCE
				
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 3), ROUND(B.TH_CENTER_ALWNCE, 3))) AS TH_CENTER_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 3), ROUND(B.TH_EDGE_ALWNCE_PLUS, 3))) AS TH_EDGE_ALWNCE_PLUS
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 2), ROUND(B.BURR_METAL_ALWNCE, 2))) AS BURR_METAL_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 2), ROUND(B.BURR_RCUT_ALWNCE, 2))) AS BURR_RCUT_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 2), ROUND(B.BURR_REDGE_ALWNCE, 2))) AS BURR_REDGE_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 3), ROUND(B.TH_STEP_INPUT, 3))) AS TH_STEP_INPUT
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 2), ROUND(B.TH_EDGE_CNT, 2))) AS TH_EDGE_CNT
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 2), ROUND(B.TH_EDGE_RESULT, 2))) AS TH_EDGE_RESULT
				
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 2), ISNULL(ROUND(B.GAP_OF_LAYER, 2),0))) AS GAP_OF_LAYER
				
			FROM TB_WORK_ORDER A, TB_AGT_SIZE_STEP B, TB_EQUIP_SIZE_COND_ADM C	/*초.중물*/
			WHERE 1=1
			AND A.WORK_ORD_NO = B.WORK_ORD_NO
			AND A.EQUIP_COND_SEQ = C.EQUIP_COND_SEQ
			AND	A.WORK_STATUS_CD IN ('S', 'C', 'A')
			AND A.ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDateTo}
			AND A.EQUIP_CD IN (${equipCd})
			<if test="goodsCd != null and goodsCd != ''">
				AND A.GOODS_CD = #{goodsCd}
			</if>
			
			UNION ALL
			
			SELECT
				A.WORK_ORD_NO	
				, B.ORD_LOT_NO			
				, B.LOT_NO
				, D.STEP_CD
				, B.GUBUN
				, A.EQUIP_CD
				, (SELECT EQUIP_NM FROM TB_EQUIP_CODE_ADM X WHERE X.EQUIP_CD = A.EQUIP_CD) EQUIP_NM
				, A.GOODS_CD
				, (SELECT GOODS_NM FROM TB_GOODS_CODE_ADM X WHERE X.GOODS_CD = A.GOODS_CD)GOODS_NM
				, (SELECT X.QUTY_CD FROM TB_MATRL_CODE_ADM X, TB_GOODS_CODE_ADM Z WHERE X.MATRL_CD = Z.ALNICU_MATRL_CD AND A.GOODS_CD = Z.GOODS_CD)QUTY_CD
				, (SELECT BASE_CD_NM FROM TB_SYSTEM_COMMON_CODE X WHERE X.BASE_GROUP_CD='007' AND X.BASE_CD =  (SELECT X.QUTY_CD FROM TB_MATRL_CODE_ADM X, TB_GOODS_CODE_ADM Z WHERE X.MATRL_CD = Z.ALNICU_MATRL_CD AND A.GOODS_CD = Z.GOODS_CD)) QUTY_NM
				, B.GUBUN
				, A.ORD_DATE
				, A.WORK_STATUS_CD
				, A.APPEAR_INSPCT_DATE
				
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 2), ROUND(D.WP_LEFT_ALWNCE, 2))) AS WP_LEFT_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 2), ROUND(D.WP_RIGHT_ALWNCE, 2))) AS WP_RIGHT_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 2), ROUND(D.PITCH_LEFT_ALWNCE, 2))) AS PITCH_LEFT_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 2), ROUND(D.PITCH_RIGHT_ALWNCE, 2))) AS PITCH_RIGHT_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 2), ROUND(D.PPF_WING_LEFT_ALWNCE, 2))) AS PPF_WING_LEFT_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 2), ROUND(D.PPF_WING_RIGHT_ALWNCE, 2))) AS PPF_WING_RIGHT_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 2), ROUND(D.PPF_DEPTH_LEFT_ALWNCE, 2))) AS PPF_DEPTH_LEFT_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 2), ROUND(D.PPF_DEPTH_RIGHT_ALWNCE, 2))) AS PPF_DEPTH_RIGHT_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 2), ROUND(D.FILM_ALWNCE, 2))) AS FILM_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 2), ROUND(D.METAL_DEPTH_ALWNCE, 2))) AS METAL_DEPTH_ALWNCE
				
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 3), ROUND(D.METAL_THICKNESS_ALWNCE, 3))) AS METAL_THICKNESS_ALWNCE
				
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 3), ROUND(D.TH_CENTER_ALWNCE, 3))) AS TH_CENTER_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 3), ROUND(D.TH_EDGE_ALWNCE_PLUS, 3))) AS TH_EDGE_ALWNCE_PLUS
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 2), ROUND(D.BURR_METAL_ALWNCE, 2))) AS BURR_METAL_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 2), ROUND(D.BURR_RCUT_ALWNCE, 2))) AS BURR_RCUT_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 2), ROUND(D.BURR_REDGE_ALWNCE, 2))) AS BURR_REDGE_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 3), ROUND(D.TH_STEP_INPUT, 3))) AS TH_STEP_INPUT
				, ('') AS TH_EDGE_CNT
				, ('') AS TH_EDGE_RESULT
				--, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 2), ROUND(D.GAP_OF_LAYER, 2))) AS GAP_OF_LAYER
				, ('') AS GAP_OF_LAYER
				
			FROM TB_WORK_ORDER A, TB_WORK_ORDER_OUTPUT_SUB B, TB_EQUIP_SIZE_COND_STEP D
			WHERE 1=1
			AND B.ORD_LOT_NO = D.ORD_LOT_NO
			AND B.WORK_ORD_NO = A.WORK_ORD_NO
			AND	B.SUB_WORK_STATUS_CD = 'A'
			AND D.STEP_CD = '003'
			AND A.ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDateTo}
			AND A.EQUIP_CD IN (${equipCd})
			<if test="goodsCd != null and goodsCd != ''">
				AND A.GOODS_CD = #{goodsCd}
			</if>
			) A
		WHERE 1=1
		AND A.ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDateTo}
		AND A.EQUIP_CD IN (${equipCd})
		<if test="goodsCd != null and goodsCd != ''">
			AND A.GOODS_CD = #{goodsCd}
		</if>
		ORDER BY WORK_ORD_NO, LOT_NO, STEP_CD, ORD_LOT_NO
	</select>
	
		<!-- 초중종물 검사현황 목로조회 -->
	<select id="stateListF3" resultMap="StateVo">
		SELECT * FROM
			(
			
			
			<if test="listGubun != null and listGubun.equals('001')">				
				SELECT
					A.WORK_ORD_NO
					, '' ORD_LOT_NO					
					, '' LOT_NO
					, '000' STEP_CD
					, '' GUBUN
					, A.EQUIP_CD
					, (SELECT EQUIP_NM FROM TB_EQUIP_CODE_ADM X WHERE X.EQUIP_CD = A.EQUIP_CD) EQUIP_NM
					, A.GOODS_CD
					, (SELECT GOODS_NM FROM TB_GOODS_CODE_ADM X WHERE X.GOODS_CD = A.GOODS_CD)GOODS_NM
					, (SELECT X.QUTY_CD FROM TB_MATRL_CODE_ADM X, TB_GOODS_CODE_ADM Z WHERE X.MATRL_CD = Z.ALNICU_MATRL_CD AND A.GOODS_CD = Z.GOODS_CD)QUTY_CD
					, (SELECT BASE_CD_NM FROM TB_SYSTEM_COMMON_CODE X WHERE X.BASE_GROUP_CD='007' AND X.BASE_CD =  (SELECT X.QUTY_CD FROM TB_MATRL_CODE_ADM X, TB_GOODS_CODE_ADM Z WHERE X.MATRL_CD = Z.ALNICU_MATRL_CD AND A.GOODS_CD = Z.GOODS_CD)) QUTY_NM
					, A.ORD_GUBUN
					, A.ORD_DATE
					, A.WORK_STATUS_CD
					, A.APPEAR_INSPCT_DATE
					<!-- , ('-'+C.WP_LEFT_ALWNCE_MINUS +' ['+ C.WP_LEFT_COND + '] '+ '+'+C.WP_LEFT_ALWNCE_PLUS) WP_LEFT_ALWNCE
					, ('-'+C.WP_RIGHT_ALWNCE_MINUS +' ['+ C.WP_RIGHT_COND + '] '+ '+'+C.WP_RIGHT_ALWNCE_PLUS) WP_RIGHT_ALWNCE
					, ('-'+C.PITCH_LEFT_ALWNCE_MINUS +' ['+ C.PITCH_LEFT_COND + '] '+ '+'+C.PITCH_LEFT_ALWNCE_PLUS) PITCH_LEFT_ALWNCE
					, ('-'+C.PITCH_RIGHT_ALWNCE_MINUS +' ['+ C.PITCH_RIGHT_COND + '] '+ '+'+C.PITCH_RIGHT_ALWNCE_PLUS) PITCH_RIGHT_ALWNCE
					, ('-'+C.PPF_WING_LEFT_ALWNCE_MINUS +' ['+ C.PPF_WING_LEFT_COND + '] '+ '+'+C.PPF_WING_LEFT_ALWNCE_PLUS) PPF_WING_LEFT_ALWNCE
					, ('-'+C.PPF_WING_RIGHT_ALWNCE_MINUS +' ['+ C.PPF_WING_RIGHT_COND + '] '+ '+'+C.PPF_WING_RIGHT_ALWNCE_PLUS) PPF_WING_RIGHT_ALWNCE
					, ('-'+C.PPF_DEPTH_LEFT_ALWNCE_MINUS +' ['+ C.PPF_DEPTH_LEFT_COND + '] '+ '+'+C.PPF_DEPTH_LEFT_ALWNCE_PLUS) PPF_DEPTH_LEFT_ALWNCE
					, ('-'+C.PPF_DEPTH_RIGHT_ALWNCE_MINUS +' ['+ C.PPF_DEPTH_RIGHT_COND + '] '+ '+'+C.PPF_DEPTH_RIGHT_ALWNCE_PLUS) PPF_DEPTH_RIGHT_ALWNCE
					, ('-'+C.FILM_ALWNCE_MINUS +' ['+ C.FILM_COND + '] '+ '+'+C.FILM_ALWNCE_PLUS) FILM_ALWNCE
					, ('-'+C.METAL_DEPTH_ALWNCE_MINUS +' ['+ C.METAL_DEPTH_COND + '] '+ '+'+C.METAL_DEPTH_ALWNCE_PLUS) METAL_DEPTH_ALWNCE
					, ('-'+C.METAL_THICKNESS_ALWNCE_MINUS +' ['+ C.METAL_THICKNESS_COND + '] '+ '+'+C.METAL_THICKNESS_ALWNCE_PLUS) METAL_THICKNESS_ALWNCE
					, ('-'+C.TH_CENTER_ALWNCE_MINUS +' ['+ C.TH_CENTER_COND + '] '+ '+'+C.TH_CENTER_ALWNCE_PLUS) TH_CENTER_ALWNCE
					, ('-'+C.TH_EDGE_ALWNCE_MINUS +' ['+ C.TH_EDGE_COND + '] '+ '+'+C.TH_EDGE_ALWNCE_PLUS) TH_EDGE_ALWNCE_PLUS
					, ('-'+C.BURR_ALWNCE_MINUS +' ['+ C.BURR_COND + '] '+ '+'+C.BURR_ALWNCE_PLUS) BURR_METAL_ALWNCE
					, ('') BURR_RCUT_ALWNCE
					, ('') BURR_REDGE_ALWNCE
					, ('') AS TH_STEP_INPUT
					, ('') AS TH_EDGE_CNT
					, ('') AS TH_EDGE_RESULT
					, ('-'+ISNULL(C.GAP_OF_LAYER_MINUS, 0) +' ['+ ISNULL(C.GAP_OF_LAYER_COND, 0) + '] '+ '+'+ISNULL(C.GAP_OF_LAYER_PLUS, 0)) GAP_OF_LAYER -->
					
					, ('-'+C.METAL_DEPTH_ALWNCE_MINUS +' ['+ C.METAL_DEPTH_COND + '] '+ '+'+C.METAL_DEPTH_ALWNCE_PLUS) METAL_DEPTH_ALWNCE
					, ('-'+C.PITCH_LEFT_ALWNCE_MINUS +' ['+ C.PITCH_LEFT_COND + '] '+ '+'+C.PITCH_LEFT_ALWNCE_PLUS) PITCH_LEFT_ALWNCE
					, ('-'+C.PPF_DEPTH_LEFT_ALWNCE_MINUS +' ['+ C.PPF_DEPTH_LEFT_COND + '] '+ '+'+C.PPF_DEPTH_LEFT_ALWNCE_PLUS) PPF_DEPTH_LEFT_ALWNCE
					, ('-'+C.PPF_DEPTH_CENTER_ALWNCE_MINUS +' ['+ C.PPF_DEPTH_CENTER_COND + '] '+ '+'+C.PPF_DEPTH_CENTER_ALWNCE_PLUS) PPF_DEPTH_CENTER_ALWNCE
					, ('-'+C.PPF_DEPTH_RIGHT_ALWNCE_MINUS +' ['+ C.PPF_DEPTH_RIGHT_COND + '] '+ '+'+C.PPF_DEPTH_RIGHT_ALWNCE_PLUS) PPF_DEPTH_RIGHT_ALWNCE
					, ('-'+C.FILM_ALWNCE_MINUS +' ['+ C.FILM_COND + '] '+ '+'+C.FILM_ALWNCE_PLUS) FILM_ALWNCE
					, ('-'+C.WP_LEFT_ALWNCE_MINUS +' ['+ C.WP_LEFT_COND + '] '+ '+'+C.WP_LEFT_ALWNCE_PLUS) WP_LEFT_ALWNCE
					, ('-'+C.WP_CENTER_ALWNCE_MINUS +' ['+ C.WP_CENTER_COND + '] '+ '+'+C.WP_CENTER_ALWNCE_PLUS) WP_CENTER_ALWNCE
					, ('-'+C.WP_RIGHT_ALWNCE_MINUS +' ['+ C.WP_RIGHT_COND + '] '+ '+'+C.WP_RIGHT_ALWNCE_PLUS) WP_RIGHT_ALWNCE
					, ('-'+C.WP_DEVIATION_ALWNCE_MINUS +' ['+ C.WP_DEVIATION_COND + '] '+ '+'+C.WP_DEVIATION_ALWNCE_PLUS) WP_DEVIATION_ALWNCE
					, ('-'+C.X1_X2_COND_MINUS +' ['+ C.X1_X2_COND + '] '+ '+'+C.X1_X2_COND_PLUS) X1_X2_ALWNCE
					, ('-'+C.PPF_WING_LEFT_ALWNCE_MINUS +' ['+ C.PPF_WING_LEFT_COND + '] '+ '+'+C.PPF_WING_LEFT_ALWNCE_PLUS) PPF_WING_LEFT_ALWNCE
					, ('-'+C.PPF_WING_RIGHT_ALWNCE_MINUS +' ['+ C.PPF_WING_RIGHT_COND + '] '+ '+'+C.PPF_WING_RIGHT_ALWNCE_PLUS) PPF_WING_RIGHT_ALWNCE
					, ('-'+C.METAL_THICKNESS_ALWNCE_MINUS +' ['+ C.METAL_THICKNESS_COND + '] '+ '+'+C.METAL_THICKNESS_ALWNCE_PLUS) METAL_THICKNESS_ALWNCE
					, ('-'+C.TH_EDGE_ALWNCE_MINUS +' ['+ C.TH_EDGE_COND + '] '+ '+'+C.TH_EDGE_ALWNCE_PLUS) TH_EDGE_ALWNCE_PLUS
					, ('-'+C.TH_CENTER_ALWNCE_MINUS +' ['+ C.TH_CENTER_COND + '] '+ '+'+C.TH_CENTER_ALWNCE_PLUS) TH_CENTER_ALWNCE
					, ('-'+C.TH_EDGE_RIGHT_ALWNCE_MINUS +' ['+ C.TH_EDGE_RIGHT_COND + '] '+ '+'+C.TH_EDGE_RIGHT_ALWNCE_PLUS) TH_EDGE_RIGHT_ALWNCE
					, ('-'+C.BURR_ALWNCE_MINUS +' ['+ C.BURR_COND + '] '+ '+'+C.BURR_ALWNCE_PLUS) BURR_METAL_ALWNCE
					, ('-'+C.GAP_OF_LAYER_MINUS +' ['+ C.GAP_OF_LAYER_COND + '] '+ '+'+C.GAP_OF_LAYER_PLUS) GAP_OF_LAYER
					, ('-'+C.BENDING_ALWNCE_MINUS +' ['+ C.BENDING_COND + '] '+ '+'+C.BENDING_ALWNCE_PLUS) BENDING_ALWNCE
					
					
				FROM TB_WORK_ORDER A
				<if test="lineGubun == null or lineGubun ==''">
					, TB_EQUIP_SIZE_COND_ADM C
				</if>
				<if test="lineGubun != null and lineGubun !='' and lineGubun == '4Line'">
					, TB_EQUIP_SIZE_COND_SIX_FLOOR_ADM C
				</if>
				
				WHERE 1=1
				AND A.EQUIP_COND_SEQ = C.EQUIP_COND_SEQ
				AND	A.WORK_STATUS_CD IN ('S', 'C', 'A')
				AND A.ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDateTo}
				AND A.EQUIP_CD IN (${equipCd})
				<if test="goodsCd != null and goodsCd != ''">
					AND A.GOODS_CD = #{goodsCd}
				</if>
				
				UNION ALL
			</if>
			
			SELECT 
				A.WORK_ORD_NO	
				, '' ORD_LOT_NO			
				, B.LOT_NO
				, B.STEP_CD
				, '' GUBUN
				, A.EQUIP_CD
				, (SELECT EQUIP_NM FROM TB_EQUIP_CODE_ADM X WHERE X.EQUIP_CD = A.EQUIP_CD) EQUIP_NM
				, A.GOODS_CD
				, (SELECT GOODS_NM FROM TB_GOODS_CODE_ADM X WHERE X.GOODS_CD = A.GOODS_CD)GOODS_NM
				, (SELECT X.QUTY_CD FROM TB_MATRL_CODE_ADM X, TB_GOODS_CODE_ADM Z WHERE X.MATRL_CD = Z.ALNICU_MATRL_CD AND A.GOODS_CD = Z.GOODS_CD)QUTY_CD
				, (SELECT BASE_CD_NM FROM TB_SYSTEM_COMMON_CODE X WHERE X.BASE_GROUP_CD='007' AND X.BASE_CD =  (SELECT X.QUTY_CD FROM TB_MATRL_CODE_ADM X, TB_GOODS_CODE_ADM Z WHERE X.MATRL_CD = Z.ALNICU_MATRL_CD AND A.GOODS_CD = Z.GOODS_CD)) QUTY_NM
				, A.ORD_GUBUN
				, A.ORD_DATE
				, A.WORK_STATUS_CD
				, A.APPEAR_INSPCT_DATE
				
				<!-- , CONVERT(VARCHAR, CONVERT(NUMERIC(18, 2), ROUND(B.WP_LEFT_ALWNCE, 2))) AS WP_LEFT_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 2), ROUND(B.WP_RIGHT_ALWNCE, 2))) AS WP_RIGHT_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 2), ROUND(B.PITCH_LEFT_ALWNCE, 2))) AS PITCH_LEFT_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 2), ROUND(B.PITCH_RIGHT_ALWNCE, 2))) AS PITCH_RIGHT_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 2), ROUND(B.PPF_WING_LEFT_ALWNCE, 2))) AS PPF_WING_LEFT_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 2), ROUND(B.PPF_WING_RIGHT_ALWNCE, 2))) AS PPF_WING_RIGHT_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 2), ROUND(B.PPF_DEPTH_LEFT_ALWNCE, 2))) AS PPF_DEPTH_LEFT_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 2), ROUND(B.PPF_DEPTH_RIGHT_ALWNCE, 2))) AS PPF_DEPTH_RIGHT_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 2), ROUND(B.FILM_ALWNCE, 2))) AS FILM_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 2), ROUND(B.METAL_DEPTH_ALWNCE, 2))) AS METAL_DEPTH_ALWNCE
				
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 3), ROUND(B.METAL_THICKNESS_ALWNCE, 3))) AS METAL_THICKNESS_ALWNCE
				
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 3), ROUND(B.TH_CENTER_ALWNCE, 3))) AS TH_CENTER_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 3), ROUND(B.TH_EDGE_ALWNCE_PLUS, 3))) AS TH_EDGE_ALWNCE_PLUS
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 2), ROUND(B.BURR_METAL_ALWNCE, 2))) AS BURR_METAL_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 2), ROUND(B.BURR_RCUT_ALWNCE, 2))) AS BURR_RCUT_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 2), ROUND(B.BURR_REDGE_ALWNCE, 2))) AS BURR_REDGE_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 2), ROUND(B.TH_STEP_INPUT, 2))) AS TH_STEP_INPUT
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 2), ROUND(B.TH_EDGE_CNT, 2))) AS TH_EDGE_CNT
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 2), ROUND(B.TH_EDGE_RESULT, 2))) AS TH_EDGE_RESULT
				
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 2), ISNULL(ROUND(B.GAP_OF_LAYER, 2),0))) AS GAP_OF_LAYER -->
				
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 3), ROUND(B.METAL_DEPTH_ALWNCE, 3))) AS METAL_DEPTH_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 3), ROUND(B.PITCH_LEFT_ALWNCE, 3))) AS PITCH_LEFT_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 3), ROUND(B.PPF_DEPTH_LEFT_ALWNCE, 3))) AS PPF_DEPTH_LEFT_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 3), ROUND(B.PPF_DEPTH_CENTER_ALWNCE, 3))) AS PPF_DEPTH_CENTER_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 3), ROUND(B.PPF_DEPTH_RIGHT_ALWNCE, 3))) AS PPF_DEPTH_RIGHT_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 3), ROUND(B.FILM_ALWNCE, 3))) AS FILM_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 3), ROUND(B.WP_LEFT_ALWNCE, 3))) AS WP_LEFT_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 3), ROUND(B.WP_CENTER_ALWNCE, 3))) AS WP_CENTER_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 3), ROUND(B.WP_RIGHT_ALWNCE, 3))) AS WP_RIGHT_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 3), ROUND(B.WP_DEVIATION_ALWNCE, 3))) AS WP_DEVIATION_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 3), ROUND(B.X1_X2_ALWNCE, 3))) AS X1_X2_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 3), ROUND(B.PPF_WING_LEFT_ALWNCE, 3))) AS PPF_WING_LEFT_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 3), ROUND(B.PPF_WING_RIGHT_ALWNCE, 3))) AS PPF_WING_RIGHT_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 3), ROUND(B.METAL_THICKNESS_ALWNCE, 3))) AS METAL_THICKNESS_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 3), ROUND(B.TH_EDGE_ALWNCE_PLUS, 3))) AS TH_EDGE_ALWNCE_PLUS
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 3), ROUND(B.TH_CENTER_ALWNCE, 3))) AS TH_CENTER_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 3), ROUND(B.TH_EDGE_RIGHT_ALWNCE, 3))) AS TH_EDGE_RIGHT_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 3), ROUND(B.BURR_METAL_ALWNCE, 3))) AS BURR_METAL_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 3), ROUND(B.GAP_OF_LAYER, 3))) AS GAP_OF_LAYER
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 3), ROUND(B.BENDING_ALWNCE, 3))) AS BENDING_ALWNCE
				
			FROM TB_WORK_ORDER A
			
			<if test="lineGubun == null or lineGubun ==''">
				, TB_AGT_SIZE_STEP B, TB_EQUIP_SIZE_COND_ADM C
			</if>
			<if test="lineGubun != null and lineGubun !='' and lineGubun == '4Line'">
				, TB_AGT_SIZE_STEP_SIX_FLOOR_TABLE B, TB_EQUIP_SIZE_COND_SIX_FLOOR_ADM C
			</if>
			
			WHERE 1=1
			AND A.WORK_ORD_NO = B.WORK_ORD_NO
			AND A.EQUIP_COND_SEQ = C.EQUIP_COND_SEQ
			AND	A.WORK_STATUS_CD IN ('S', 'C', 'A')
			AND A.ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDateTo}
			AND A.EQUIP_CD IN (${equipCd})
			<if test="goodsCd != null and goodsCd != ''">
				AND A.GOODS_CD = #{goodsCd}
			</if>
			
			UNION ALL
			
			SELECT
				A.WORK_ORD_NO	
				, B.ORD_LOT_NO			
				, B.LOT_NO
				, D.STEP_CD
				, B.GUBUN
				, A.EQUIP_CD
				, (SELECT EQUIP_NM FROM TB_EQUIP_CODE_ADM X WHERE X.EQUIP_CD = A.EQUIP_CD) EQUIP_NM
				, A.GOODS_CD
				, (SELECT GOODS_NM FROM TB_GOODS_CODE_ADM X WHERE X.GOODS_CD = A.GOODS_CD)GOODS_NM
				, (SELECT X.QUTY_CD FROM TB_MATRL_CODE_ADM X, TB_GOODS_CODE_ADM Z WHERE X.MATRL_CD = Z.ALNICU_MATRL_CD AND A.GOODS_CD = Z.GOODS_CD)QUTY_CD
				, (SELECT BASE_CD_NM FROM TB_SYSTEM_COMMON_CODE X WHERE X.BASE_GROUP_CD='007' AND X.BASE_CD =  (SELECT X.QUTY_CD FROM TB_MATRL_CODE_ADM X, TB_GOODS_CODE_ADM Z WHERE X.MATRL_CD = Z.ALNICU_MATRL_CD AND A.GOODS_CD = Z.GOODS_CD)) QUTY_NM
				, B.GUBUN
				, A.ORD_DATE
				, A.WORK_STATUS_CD
				, A.APPEAR_INSPCT_DATE
				
				<!-- , CONVERT(VARCHAR, CONVERT(NUMERIC(18, 2), ROUND(D.WP_LEFT_ALWNCE, 2))) AS WP_LEFT_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 2), ROUND(D.WP_RIGHT_ALWNCE, 2))) AS WP_RIGHT_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 2), ROUND(D.PITCH_LEFT_ALWNCE, 2))) AS PITCH_LEFT_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 2), ROUND(D.PITCH_RIGHT_ALWNCE, 2))) AS PITCH_RIGHT_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 2), ROUND(D.PPF_WING_LEFT_ALWNCE, 2))) AS PPF_WING_LEFT_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 2), ROUND(D.PPF_WING_RIGHT_ALWNCE, 2))) AS PPF_WING_RIGHT_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 2), ROUND(D.PPF_DEPTH_LEFT_ALWNCE, 2))) AS PPF_DEPTH_LEFT_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 2), ROUND(D.PPF_DEPTH_RIGHT_ALWNCE, 2))) AS PPF_DEPTH_RIGHT_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 2), ROUND(D.FILM_ALWNCE, 2))) AS FILM_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 2), ROUND(D.METAL_DEPTH_ALWNCE, 2))) AS METAL_DEPTH_ALWNCE
				
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 3), ROUND(D.METAL_THICKNESS_ALWNCE, 3))) AS METAL_THICKNESS_ALWNCE
				
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 3), ROUND(D.TH_CENTER_ALWNCE, 3))) AS TH_CENTER_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 3), ROUND(D.TH_EDGE_ALWNCE_PLUS, 3))) AS TH_EDGE_ALWNCE_PLUS
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 2), ROUND(D.BURR_METAL_ALWNCE, 2))) AS BURR_METAL_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 2), ROUND(D.BURR_RCUT_ALWNCE, 2))) AS BURR_RCUT_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 2), ROUND(D.BURR_REDGE_ALWNCE, 2))) AS BURR_REDGE_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 2), ROUND(D.TH_STEP_INPUT, 2))) AS TH_STEP_INPUT
				, ('') AS TH_EDGE_CNT
				, ('') AS TH_EDGE_RESULT
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 2), ROUND(D.GAP_OF_LAYER, 2))) AS GAP_OF_LAYER
				, ('') AS GAP_OF_LAYER -->
				
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 3), ROUND(D.METAL_DEPTH_ALWNCE, 3))) AS METAL_DEPTH_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 3), ROUND(D.PITCH_LEFT_ALWNCE, 3))) AS PITCH_LEFT_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 3), ROUND(D.PPF_DEPTH_LEFT_ALWNCE, 3))) AS PPF_DEPTH_LEFT_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 3), ROUND(D.PPF_DEPTH_CENTER_ALWNCE, 3))) AS PPF_DEPTH_CENTER_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 3), ROUND(D.PPF_DEPTH_RIGHT_ALWNCE, 3))) AS PPF_DEPTH_RIGHT_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 3), ROUND(D.FILM_ALWNCE, 3))) AS FILM_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 3), ROUND(D.WP_LEFT_ALWNCE, 3))) AS WP_LEFT_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 3), ROUND(D.WP_CENTER_ALWNCE, 3))) AS WP_CENTER_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 3), ROUND(D.WP_RIGHT_ALWNCE, 3))) AS WP_RIGHT_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 3), ROUND(D.WP_DEVIATION_ALWNCE, 3))) AS WP_DEVIATION_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 3), ROUND(D.X1_X2_ALWNCE, 3))) AS X1_X2_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 3), ROUND(D.PPF_WING_LEFT_ALWNCE, 3))) AS PPF_WING_LEFT_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 3), ROUND(D.PPF_WING_RIGHT_ALWNCE, 3))) AS PPF_WING_RIGHT_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 3), ROUND(D.METAL_THICKNESS_ALWNCE, 3))) AS METAL_THICKNESS_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 3), ROUND(D.TH_EDGE_ALWNCE_PLUS, 3))) AS TH_EDGE_ALWNCE_PLUS
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 3), ROUND(D.TH_CENTER_ALWNCE, 3))) AS TH_CENTER_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 3), ROUND(D.TH_EDGE_RIGHT_ALWNCE, 3))) AS TH_EDGE_RIGHT_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 3), ROUND(D.BURR_METAL_ALWNCE, 3))) AS BURR_METAL_ALWNCE
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 3), ROUND(D.GAP_OF_LAYER, 3))) AS GAP_OF_LAYER
				, CONVERT(VARCHAR, CONVERT(NUMERIC(18, 3), ROUND(D.BENDING_ALWNCE, 3))) AS BENDING_ALWNCE
				
			FROM TB_WORK_ORDER A, TB_WORK_ORDER_OUTPUT_SUB B, TB_EQUIP_SIZE_COND_STEP D
			WHERE 1=1
			AND B.ORD_LOT_NO = D.ORD_LOT_NO
			AND B.WORK_ORD_NO = A.WORK_ORD_NO
			AND	B.SUB_WORK_STATUS_CD = 'A'
			AND D.STEP_CD = '003'
			AND A.ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDateTo}
			AND A.EQUIP_CD IN (${equipCd})
			<if test="goodsCd != null and goodsCd != ''">
				AND A.GOODS_CD = #{goodsCd}
			</if>
			) A
		WHERE 1=1
		AND A.ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDateTo}
		AND A.EQUIP_CD IN (${equipCd})
		<if test="goodsCd != null and goodsCd != ''">
			AND A.GOODS_CD = #{goodsCd}
		</if>
		ORDER BY WORK_ORD_NO, LOT_NO, STEP_CD, ORD_LOT_NO
	</select>
	
</mapper>