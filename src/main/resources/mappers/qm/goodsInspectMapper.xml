<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  	
<mapper namespace="mes.mappers.qm.goodsInspectMapper">

	<resultMap id="WorkOrderVo" type="mes.domain.po.WorkOrderVo">
		<result property="menuAuth"					column="MENU_AUTH"				/>
		<result property="workOrdNo"				column="WORK_ORD_NO"			/>
		<result property="ordLotNo"					column="ORD_LOT_NO"				/>
		<result property="lotNo"					column="LOT_NO"					/>
		<result property="equipCondSeq"				column="EQUIP_COND_SEQ"			/>
		<result property="equipCd"					column="EQUIP_CD"				/>
		<result property="equipNm"					column="EQUIP_NM"				/>		
		<result property="goodsCd"					column="GOODS_CD"				/>
		<result property="goodsNm"					column="GOODS_NM"				/>		
		<result property="ordGubun"					column="ORD_GUBUN"				/>
		<result property="ordGubunNm"				column="ORD_GUBUN_NM"			/>		
		<result property="ordDate"					column="ORD_DATE"				/>
		<result property="workStatusCd"				column="WORK_STATUS_CD"			/>
		<result property="workStatusNm"				column="WORK_STATUS_NM"			/>		
		<result property="workTeamCd"				column="WORK_TEAM_CD"			/>
		<result property="workTeamNm"				column="WORK_TEAM_NM"			/>		
		<result property="mainWorkChargr"			column="MAIN_WORK_CHARGR"		/>
		<result property="mainWorkChargrNm"			column="MAIN_WORK_CHARGR_NM"	/>
		<result property="subWorkChargr"			column="SUB_WORK_CHARGR"		/>
		<result property="subWorkChargrNm"			column="SUB_WORK_CHARGR_NM"		/>		
		<result property="targetWeight"				column="TARGET_WEIGHT"			/>
		<result property="outputWeight1"			column="OUTPUT_WEIGHT1"			/>
		<result property="outputWeight2"			column="OUTPUT_WEIGHT2"			/>
		<result property="targetCnt"				column="TARGET_CNT"				/>
		<result property="outputCnt"				column="OUTPUT_CNT"				/>
		<result property="userOutputCnt"			column="USER_OUTPUT_CNT"		/>
		<result property="sumOutputCnt"				column="SUM_OUTPUT_CNT"			/>
		<result property="dealCorpCd"				column="DEAL_CORP_CD"			/>
		<result property="dealCorpNm"				column="DEAL_CORP_NM"			/>		
		<result property="edgeSampleCnt"			column="EDGE_SAMPLE_CNT"		/>
		<result property="edgeFaultyCnt"			column="EDGE_FAULTY_CNT"		/>
		
		<result property="workOrdSeq"				column="WORK_ORD_SEQ"			/>
		<result property="outputWeight"				column="OUTPUT_WEIGHT"			/>		
		<result property="gubun"					column="GUBUN"					/>
		<result property="workOrdDate"				column="WORK_ORD_DATE"			/>
		
		<!-- 엣지검사 시 각 불량 치수 추가 -->
		<result property="edgeRollFaultySize"		column="EDGE_ROLL_FAULTY_SIZE"	/>		
		<result property="edgeSymbolFaultySize"		column="EDGE_SYMBOL_FAULTY_SIZE"/>
		<result property="edgeBurFaultySize"		column="EDGE_BUR_FAULTY_SIZE"	/>
		
		<result property="edgeInspctCharger"		column="EDGE_INSPCT_CHARGER"	/>
		<result property="edgeInspctChargerNm"		column="EDGE_INSPCT_CHARGER_NM"	/>
		<result property="edgeOutputCnt"			column="EDGE_OUTPUT_CNT"		/>
		<result property="edgeInspctDate"			column="EDGE_INSPCT_DATE"		/>
		<result property="appearAbrfCnt"			column="APPEAR_ABRF_CNT"		/>
		<result property="appearAbrsCnt"			column="APPEAR_ABRS_CNT"		/>
		<result property="appearDmsCnt"				column="APPEAR_DMS_CNT"			/>
		<result property="appearFaultyCnt"			column="APPEAR_FAULTY_CNT"		/>
		<result property="appearOutputCnt"			column="APPEAR_OUTPUT_CNT"		/>
		<result property="appearInspctCharger"		column="APPEAR_INSPCT_CHARGER"	/>
		<result property="appearInspctChargerNm"	column="APPEAR_INSPCT_CHARGER_NM"/>
		<result property="appearInspctDate"			column="APPEAR_INSPCT_DATE"		/>
		<result property="packYn"					column="PACK_YN"				/>
		<result property="userOutputCnt"			column="USER_OUTPUT_CMT"		/>
		<result property="sealing1"					column="SEALING1"				/>
		<result property="sealing2"					column="SEALING2"				/>
		<result property="filmFaultyCheck"			column="FILM_FAULTY_CHECK"		/>
		<result property="sealingDate"				column="SEALING_DATE"			/>
		<result property="regId"					column="REG_ID"					/>
		<result property="regDate"					column="REG_DATE"				/>
		<result property="updId"					column="UPD_ID"					/>
		<result property="updDate"					column="UPD_DATE"				/>

		<!-- join시 사용 -->
		<result property="model"					column="MODEL"					/><!-- 제품 규격 -->
		<result property="qutyCd"					column="QUTY_CD"				/><!-- 재질 코드 -->
		<result property="qutyNm"					column="QUTY_NM"				/><!-- 재질 명 -->
		<result property="userNm"					column="USER_NM"				/><!-- 사원명 -->
		<result property="userNumber"				column="USER_NUMBER"			/><!-- 사원코드 -->
		<result property="faultyPercent"			column="FAULTY_PERCENT"			/><!-- 불량율% -->
		<result property="achievePercent"			column="ACHIEVE_PERCENT"		/><!-- 달성율% -->
		<result property="filmNm"					column="FILM_NM"				/><!-- Film명 -->
		<result property="chamferYnNm"				column="CHAMFER_YN_NM"			/><!-- 면취(압연) -->
		<result property="gubunNm"					column="GUBUN_NM"				/><!-- 구분(연질,경질)  -->
		<result property="equipGroup"				column="EQUIP_GROUP"			/>
		<result property="equipGroupNm"				column="EQUIP_GROUP_NM"			/>
		
		<!-- 생산현황 조회 -->
		<result property="targetAsum"				column="TARGET_ASUM"			/>
		<result property="targetBsum"				column="TARGET_BSUM"			/>
		<result property="targetCsum"				column="TARGET_CSUM"			/>
		<result property="outputAsum"				column="OUTPUT_ASUM"			/>
		<result property="outputBsum"				column="OUTPUT_BSUM"			/>
		<result property="outputCsum"				column="OUTPUT_CSUM"			/>
		<result property="percentA"					column="PERCENT_A"				/>
		<result property="percentB"					column="PERCENT_B"				/>
		<result property="percentC"					column="PERCENT_C"				/>
		<result property="totalTarget"				column="TOTAL_TARGET"			/>
		<result property="totalOutput"				column="TOTAL_OUTPUT"			/>
		<result property="totalPercent"				column="TOTAL_PERCENT"			/>
		<result property="chooseDate1"				column="CHOOSE_DATE1"			/><!-- 선택날짜1 -->
		<result property="chooseDate2"				column="CHOOSE_DATE2"			/><!-- 선택날짜 2 -->
		
		<result property="totalFaultyCnt"			column="TOTAL_FAULTY_CNT"		/><!-- 불량 수량 합계 -->
		
		<result property="workOrdDateMm"			column="WORK_ORD_DATE_MM"		/><!-- 불량 수량 합계 -->
		<result property="workOrdDateWw"			column="WORK_ORD_DATE_WW"		/><!-- 불량 수량 합계 -->
		
	</resultMap>
	
	<!-- 외관검사 등록(외관불량 TB Insert) -->
	<resultMap id="EdgeGoodsFaultyAdmVo" type="mes.domain.qm.EdgeGoodsFaultyAdmVo">
		<result property="workOrdNo"			column="WORK_ORD_NO"				/>
		<result property="ordLotNo"				column="ORD_LOT_NO"					/>
		<result property="faultyRegDate"		column="FAULTY_REG_DATE"			/>
		<result property="totalEdgeFaultyCnt"	column="TOTAL_EDGE_FAULTY_CNT"	/>
		<result property="majorCd"				column="MAJOR_CD"					/>
		<result property="minorCd"				column="MINOR_CD"					/>
		<result property="faultyCnt"			column="FAULTY_CNT"					/>
		<result property="seq"					column="SEQ"						/>
		<result property="inspctCharger"		column="INSPCT_CHARGER"				/>
		<result property="inspctChargerNm"		column="INSPCT_CHARGER_NM"				/>
		<result property="dayNightCd"			column="DAY_NIGHT_CD"				/>
		<result property="workOrdDate"			column="WORK_ORD_DATE"				/>
		<result property="regId"				column="REG_ID"						/>
		<result property="regDate"				column="REG_DATE"					/>
		<result property="updId"				column="UPD_ID"						/>
		<result property="updDate"				column="UPD_DATE"					/>

	</resultMap>
	
	<!-- 외관검사 등록(외관불량 TB Insert) -->
	<resultMap id="GoodsFaultyAdmVo" type="mes.domain.qm.GoodsFaultyAdmVo">
		<result property="pIdx"					column="P_IDX"				/>
		<result property="workOrdNo"			column="WORK_ORD_NO"		/>
		<result property="userInputInspctCnt"	column="USER_INPUT_INSPCT_CNT"/>
		<result property="ordLotNo"				column="ORD_LOT_NO"			/>
		<result property="equipCd"				column="EQUIP_CD"			/>
		<result property="equipNm"				column="EQUIP_NM"			/>
		<result property="metalMmb"				column="METAL_MMB"			/>
		<result property="metalMms"				column="METAL_MMS"			/>
		<result property="metalPms"				column="METAL_PMS"			/>
		<result property="metalFstab"			column="METAL_FSTAB"		/>
		<result property="metalPstab"			column="METAL_PSTAB"		/>
		<result property="metalAliensbst"		column="METAL_ALIENSBST"	/>
		<result property="metalBreak"			column="METAL_BREAK"		/>
		<result property="metalPolutn"			column="METAL_POLUTN"		/>
		<result property="metalBrowning"		column="METAL_BROWNING"		/>
		<result property="metalPpolutn"			column="METAL_PPOLUTN"		/>
		<result property="metalGilt"			column="METAL_GILT"			/>
		<result property="metalThickness"		column="METAL_THICKNESS"	/>
		<result property="metalEtc"				column="METAL_ETC"			/>
		<result property="filmPfs"				column="FILM_PFS"			/>
		<result property="filmBreak"			column="FILM_BREAK"			/>
		<result property="filmTornout"			column="FILM_TORNOUT"		/>
		<result property="filmSurfceBb"			column="FILM_SURFCE_BB"		/>
		<result property="filmEdgeBb"			column="FILM_EDGE_BB"		/>
		<result property="filmTeflon"			column="FILM_TEFLON"		/>
		<result property="filmAliensbst"		column="FILM_ALIENSBST"		/>
		<result property="filmPolutn"			column="FILM_POLUTN"		/>
		<result property="filmAgglomt"			column="FILM_AGGLOMT"		/>
		<result property="filmOverlap"			column="FILM_OVERLAP"		/>
		<result property="filmUnjinjeop"		column="FILM_UNJINJEOP"		/>
		<result property="filmUnattch"			column="FILM_UNATTCH"		/>
		<result property="filmMf"				column="FILM_MF"			/>
		<result property="filmWing"				column="FILM_WING"			/>
		<result property="filmEtc"				column="FILM_ETC"			/>
		<result property="etcSize"				column="ETC_SIZE"			/>
		<result property="etcCutting"			column="ETC_CUTTING"		/>
		<result property="etcFilmPress"			column="ETC_FILM_PRESS"		/>
		<result property="etcFilmDepth"			column="ETC_FILM_DEPTH"		/>
		<result property="etcLayer"				column="ETC_LAYER"			/>
		<result property="etcEtc"				column="ETC_ETC"			/>
		<result property="etcWashboard"			column="ETC_WASHBOARD"		/>
		<result property="etcWhitetape"			column="ETC_WHITETAPE"		/>
		<result property="etcPattem"			column="ETC_PATTEM"			/>
		<result property="etcStabbed"			column="ETC_STABBED"		/>
		<result property="etcHaze"				column="ETC_HAZE"			/>
		<result property="etcSurface"			column="ETC_SURFACE"		/>
		<result property="etcSwelling"			column="ETC_SWELLING"		/>
		<result property="etcFeeding"			column="ETC_FEEDING"		/>
		<result property="etcFilm"				column="ETC_FILM"			/>
		<result property="etcSlash"				column="ETC_SLASH"			/>
		<result property="etcJinjeop"			column="ETC_JINJEOP"		/>
		<result property="etcCrack"				column="ETC_CRACK"			/>
		<result property="etcCrease"			column="ETC_CREASE"			/>
		<result property="totalAppearFaultyCnt"	column="TOTAL_APPEAR_FAULTY_CNT"	/>
		
		<result property="inspctCharger"		column="INSPCT_CHARGER"		/>
		<result property="inspctChargerNm"		column="INSPCT_CHARGER_NM"	/>
		<result property="faultyRegDate"		column="FAULTY_REG_DATE"	/>
		<result property="regId"				column="REG_ID"				/>
		<result property="regDate"				column="REG_DATE"			/>
		<result property="updId"				column="UPD_ID"				/>
		<result property="updDate"				column="UPD_DATE"			/>
		
		<result property="appearInspctDate"		column="APPEAR_INSPCT_DATE"	/>
		<result property="goodsCd"				column="GOODS_CD"			/>
		<result property="goodsNm"				column="GOODS_NM"			/>
		<result property="outputCnt"			column="OUTPUT_CNT"			/>
		<result property="appearOutputCnt"		column="APPEAR_OUTPUT_CNT"	/>
		<result property="faultSum"				column="FAULT_SUM"			/>
		<result property="faultPercent"			column="FAULT_PERCENT"		/>		
		<result property="edgeFaultyCnt"		column="EDGE_FAULTY_CNT"	/>
		<result property="chooseDateFrom"		column="CHOOSE_DATE_FROM"	/>		
		<result property="chooseDate"			column="CHOOSE_DATE"		/>
		
		<result property="totalOutputCnt"		column="TOTAL_OUTPUT_CNT"	/>
		<result property="totalEdgeFaultyCnt"	column="TOTAL_EDGE_FAULTY_CNT"/>
		<result property="edgeFaultyPercent"	column="EDGE_FAULTY_PERCENT"/>
		<result property="sumSurfaceFaulty"		column="SUM_SURFACE_FAULTY"	/>
		<result property="surfaceFaultyPercent"	column="SURFACE_FAULTY_PERCENT"/>
		<result property="sumMetal"				column="SUM_METAL"			/>
		<result property="metalPercent"			column="METAL_PERCENT"		/>
		<result property="sumFillm"				column="SUM_FILM"			/>
		<result property="filmPercent"			column="FILM_PERCENT"		/>
		<result property="sumEtc"				column="SUM_ETC"			/>
		<result property="etcPercent"			column="ETC_PERCENT"		/>
		
		<result property="majorCd"       		column="MAJOR_CD"			/>
		<result property="minorCd"       		column="MINOR_CD"			/>		
		<result property="faultyCnt"     		column="FAULTY_CNT"			/>
		<result property="seq"           		column="SEQ"				/>
		<result property="inspctChargr"  		column="INSPCT_CHARGR"		/>
		<result property="inspctChargrNm"		column="INSPCT_CHARGR_NM"	/>
		<result property="dayNightCd"    		column="DAY_NIGHT_CD"		/>
		<result property="dayNightNm"    		column="DAY_NIGHT_NM"		/>
		<result property="workOrdDate"   		column="WORK_ORD_DATE"		/>
		
		<result property="quarter1"   			column="QUARTER1"			/>
		<result property="quarter2"   			column="QUARTER2"			/>
		<result property="quarter3"   			column="QUARTER3"			/>
		<result property="month1"   			column="MONTH1"				/>
		<result property="month2"   			column="MONTH2"				/>
		<result property="month3"   			column="MONTH3"				/>
		<result property="week1"   				column="WEEK1"				/>
		<result property="week2"   				column="WEEK2"				/>
		<result property="week3"   				column="WEEK3"				/>
		<result property="day1"   				column="DAY1"				/>
		<result property="day2"   				column="DAY2"				/>
		<result property="day3"   				column="DAY3"				/>
		<result property="day4"   				column="DAY4"				/>
		<result property="day5"   				column="DAY5"				/>
		<result property="day6"   				column="DAY6"				/>
		<result property="day7"   				column="DAY7"				/>
		<result property="day8"   				column="DAY8"				/>
		<result property="day9"   				column="DAY9"				/>
		<result property="day10"   				column="DAY10"				/>
		<result property="day11"   				column="DAY11"				/>
		<result property="day12"   				column="DAY12"				/>
		<result property="day13"   				column="DAY13"				/>
		<result property="day14"   				column="DAY14"				/>
		<result property="headerGubun"			column="HEADER_GUBUN"		/>
		<result property="headerType"			column="HEADER_TYPE"		/>
		<result property="headerDate"			column="HEADER_DATE"		/>
		<result property="headerMonth"			column="HEADER_MONTH"		/>
		<result property="headerDay"			column="HEADER_DAY"			/>
		<result property="headerIsoWeek"		column="HEADER_ISO_WEEK"	/>
		<result property="headerQuarter"		column="HEADER_QUARTER"		/>
		<result property="headerDayOfWeek"		column="HEADER_DAY_OF_WEEK"	/>
		<result property="model"				column="MODEL"				/>
		<result property="qutyCd"				column="QUTY_CD"			/>
		<result property="qutyNm"				column="QUTY_NM"			/>
		<result property="itemNm"				column="ITEM_NM"			/>
		<result property="no"					column="NO"					/>
		<result property="goodsCd"				column="GOODS_CD"			/>
		<result property="visionInspCnt"		column="VISION_INSP_CNT"	/>
		<result property="filmFaultyCnt"		column="FILM_FAULTY_CNT"	/>
		<result property="matrlFaultyCnt"		column="MATRL_FAULTY_CNT"	/>
		<result property="reInspCnt"			column="RE_INSP_CNT"		/>
		<result property="matrlInitial"			column="MATRL_INITIAL"		/>
		<result property="workOrdDateYyyy"		column="WORK_ORD_DATE_YYYY"	/>
		
		<result property="note1"				column="NOTE1"				/>
		<result property="note2"				column="NOTE2"				/>
	</resultMap>
	
	<!-- 작업지시 생산수량 -->
	<resultMap id="WorkOrdOutputSubVo" type="mes.domain.po.WorkOrdOutputSubVo">
		<result property="workOrdNo"			column="WORK_ORD_NO"			/>
		<result property="workOrdSeq"			column="WORK_ORD_SEQ"			/>
		<result property="workOrdLotNo"			column="WORK_ORD_LOT_NO"		/>
		<result property="ordLotNo"				column="ORD_LOT_NO"				/>
		<result property="lotNo"				column="LOT_NO"					/>
		<result property="equipCondSeq"			column="EQUIP_COND_SEQ"			/>
		<result property="subWorkStatusCd"		column="SUB_WORK_STATUS_CD"		/>
		<result property="subWorkStatusNm"		column="SUB_WORK_STATUS_NM"		/>
		<result property="outputWeight"			column="OUTPUT_WEIGHT"			/>
		<result property="outputCnt"			column="OUTPUT_CNT"				/>
		<result property="visionEdgeWeight"		column="VISION_EDGE_WEIGHT"		/>
		<result property="visionEdgeCnt"		column="VISION_EDGE_CNT"		/>
		<result property="sumOutputWeight"		column="SUM_OUTPUT_WEIGHT"		/>
		<result property="sumOutputCnt"			column="SUM_OUTPUT_CNT"			/>
		<result property="sumVisionEdgeWeight"	column="SUM_VISION_EDGE_WEIGHT"	/>
		<result property="sumVisionEdgeCnt"		column="SUM_VISION_EDGE_CNT"	/>
		<result property="totalWeight"			column="TOTAL_WEIGHT"			/>
		<result property="totalCnt"				column="TOTAL_CNT"				/>
		<result property="userInputInspctCnt"	column="USER_INPUT_INSPCT_CNT"	/>
		<result property="workOrdLotNoTotalCnt"	column="WORK_ORD_LOT_NO_TOTAL_CNT"	/>
		<result property="gubun"				column="GUBUN"					/>
		<result property="gubunNm"				column="GUBUN_NM"				/>
		<result property="workOrdDate"			column="WORK_ORD_DATE"			/>
		<result property="mainWorkChargr"		column="MAIN_WORK_CHARGR"		/>
		<result property="mainWorkChargrNm"		column="MAIN_WORK_CHARGR_NM"	/>
		<result property="edgeOutputCnt"		column="EDGE_OUTPUT_CNT"		/>
		<result property="edgeFaultyCnt"		column="EDGE_FAULTY_CNT"		/>
		<result property="edgeSampleCnt"		column="EDGE_SAMPLE_CNT"		/>
		<result property="edgeRollFaultySize"	column="EDGE_ROLL_FAULTY_SIZE"	/>
		<result property="edgeSymbolFaultySize"	column="EDGE_SYMBOL_FAULTY_SIZE"/>
		<result property="edgeBurFaultySize"	column="EDGE_BUR_FAULTY_SIZE"	/>
		<result property="edgeInspctCharger"	column="EDGE_INSPCT_CHARGER"	/>
		<result property="edgeInspctChargerNm"	column="EDGE_INSPCT_CHARGER_NM"	/>
		<result property="edgeInspctDate"		column="EDGE_INSPCT_DATE"		/>
		<result property="appearOutputCnt"		column="APPEAR_OUTPUT_CNT"		/>
		<result property="appearFaultyCnt"		column="APPEAR_FAULTY_CNT"		/>
		<result property="appearInspctCharger"	column="APPEAR_INSPCT_CHARGER"	/>
		<result property="appearInspctChargerNm" column="APPEAR_INSPCT_CHARGER_NM"/>
		<result property="appearInspctDate"		column="APPEAR_INSPCT_DATE"		/>
		<result property="totalFaultyCnt"		column="TOTAL_FAULTY_CNT"		/>
		<result property="userOutputCnt"		column="USER_OUTPUT_CNT"		/>
		<result property="appearAbrfCnt"		column="APPEAR_ABRF_CNT"		/>
		<result property="appearAbrsCnt"		column="APPEAR_ABRS_CNT"		/>
		<result property="appearDmsCnt"			column="APPEAR_DMS_CNT"			/>
		<result property="packYn"				column="PACK_YN"				/>
		<result property="packNumber"			column="PACK_NUMBER"			/>
		<result property="packOrdLotNoList"		column="PACK_ORD_LOT_NO_LIST"	/>
		<result property="packTotalCnt"			column="PACK_TOTAL_CNT"			/>
		<result property="regId"				column="REG_ID"					/>
		<result property="regDate"				column="REG_DATE"				/>
		<result property="updId"				column="UPD_ID"					/>
		<result property="updDate"				column="UPD_DATE"				/>
		<result property="goodsCd"				column="GOODS_CD"				/>
		<result property="goodsNm"				column="GOODS_NM"				/>
		<result property="qutyCd"				column="QUTY_CD"				/>
		<result property="qutyNm"				column="QUTY_NM"				/>
		<result property="packUnitCd"			column="PACK_UNIT_CD"			/>
		<result property="packUnitNm"			column="PACK_UNIT_NM"			/>
		<result property="equipCd"				column="EQUIP_CD"				/>
		<result property="equipNm"				column="EQUIP_NM"				/>
		<result property="model"				column="MODEL"					/>
		<result property="faultyPercent"		column="FAULTY_PERCENT"			/>
	</resultMap>
	
	
	<!-- ______________________________________________________________엣지검사 시작______________________________________________________________ -->
	<!-- 엣지검사 완료목록--> <!-- 불량률= 불량수량/샘플링수량*100 -->
	<select id="workOrderOutputSubList" resultMap="WorkOrdOutputSubVo">
		<![CDATA[
			SELECT
				A.WORK_ORD_NO
				, A.ORD_LOT_NO
				, B.EQUIP_CD
				, D.EQUIP_NM
				, B.GOODS_CD
				, C.GOODS_NM
				, B.EQUIP_COND_SEQ
				, A.GUBUN
				, (SELECT BASE_CD_NM FROM TB_SYSTEM_COMMON_CODE B WHERE B.BASE_GROUP_CD = '028' AND B.BASE_CD = A.GUBUN) GUBUN_NM
				, A.OUTPUT_WEIGHT
				, A.OUTPUT_CNT
				, A.VISION_EDGE_WEIGHT
				, A.VISION_EDGE_CNT
				, CONVERT(FLOAT, A.OUTPUT_WEIGHT) + CONVERT(FLOAT, A.VISION_EDGE_WEIGHT) TOTAL_WEIGHT
				, A.OUTPUT_CNT  + A.VISION_EDGE_CNT TOTAL_CNT
				, A.USER_INPUT_INSPCT_CNT
				, A.WORK_ORD_DATE
				, A.SUB_WORK_STATUS_CD
				, A.MAIN_WORK_CHARGR
				, (SELECT USER_NM FROM TB_USER D WHERE D.USER_NUMBER = A.MAIN_WORK_CHARGR) MAIN_WORK_CHARGR_NM
				, A.OUTPUT_CNT
				, A.EDGE_OUTPUT_CNT
				, A.EDGE_FAULTY_CNT
				, A.EDGE_SAMPLE_CNT
				, A.EDGE_ROLL_FAULTY_SIZE
				, A.EDGE_SYMBOL_FAULTY_SIZE
				, A.EDGE_BUR_FAULTY_SIZE
				, A.EDGE_INSPCT_CHARGER
				, (SELECT USER_NM FROM TB_USER D WHERE D.USER_NUMBER = A.EDGE_INSPCT_CHARGER) EDGE_INSPCT_CHARGER_NM
				, A.EDGE_INSPCT_DATE
				, A.APPEAR_OUTPUT_CNT
				, A.APPEAR_FAULTY_CNT
				, A.APPEAR_INSPCT_CHARGER
				, (SELECT USER_NM FROM TB_USER D WHERE D.USER_NUMBER = A.APPEAR_INSPCT_CHARGER) APPEAR_INSPCT_CHARGER_NM
				, A.APPEAR_INSPCT_DATE
				, A.USER_OUTPUT_CNT
				, A.APPEAR_ABRF_CNT
				, A.APPEAR_ABRS_CNT
				, A.APPEAR_DMS_CNT
				, A.PACK_YN
				, A.REG_ID
				, A.REG_DATE
				, A.UPD_ID
				, A.UPD_DATE
				, C.MODEL				
				, CASE  WHEN  ( A.EDGE_FAULTY_CNT = 0 OR A.EDGE_SAMPLE_CNT = 0 ) THEN 0 ELSE (ROUND(100. * A.EDGE_FAULTY_CNT / A.EDGE_SAMPLE_CNT, 2)) END  AS FAULTY_PERCENT
			FROM
				TB_WORK_ORDER_OUTPUT_SUB A,
				TB_WORK_ORDER B,
				TB_GOODS_CODE_ADM C,
				TB_EQUIP_CODE_ADM D,
				TB_MATRL_CODE_ADM E
			WHERE A.WORK_ORD_NO = B.WORK_ORD_NO
			AND B.GOODS_CD = C.GOODS_CD
			AND B.EQUIP_CD = D.EQUIP_CD
			AND C.ALNICU_MATRL_CD = E.MATRL_CD
			AND A.EDGE_INSPCT_DATE = #{edgeInspctDate}
			AND	(A.SUB_WORK_STATUS_CD = 'E'	OR	A.SUB_WORK_STATUS_CD = 'A')
		]]>
	</select>
	
	<!-- 생산실적 상세조회 --> 
	<select id="readWorkOrderOutputSub" resultMap="WorkOrdOutputSubVo">
		<![CDATA[
			SELECT
				A.WORK_ORD_NO
				, A.ORD_LOT_NO
				, A.LOT_NO
				, B.EQUIP_CD
				, D.EQUIP_NM
				, B.GOODS_CD
				, C.GOODS_NM
				, B.EQUIP_COND_SEQ
				, A.GUBUN
				, (SELECT BASE_CD_NM FROM TB_SYSTEM_COMMON_CODE B WHERE B.BASE_GROUP_CD = '028' AND B.BASE_CD = A.GUBUN) GUBUN_NM
				, A.WORK_ORD_DATE
				, A.SUB_WORK_STATUS_CD
				, A.MAIN_WORK_CHARGR
				, (SELECT USER_NM FROM TB_USER D WHERE D.USER_NUMBER = A.MAIN_WORK_CHARGR) MAIN_WORK_CHARGR_NM
				, A.OUTPUT_WEIGHT
				, A.OUTPUT_CNT
				, A.VISION_EDGE_WEIGHT
				, A.VISION_EDGE_CNT
				, CONVERT(FLOAT, A.OUTPUT_WEIGHT) + CONVERT(FLOAT, A.VISION_EDGE_WEIGHT) TOTAL_WEIGHT
				, A.OUTPUT_CNT  + A.VISION_EDGE_CNT TOTAL_CNT
				, A.OUTPUT_CNT
				, A.USER_INPUT_INSPCT_CNT
				, A.EDGE_OUTPUT_CNT
				, A.EDGE_FAULTY_CNT
				, A.EDGE_SAMPLE_CNT
				, A.EDGE_ROLL_FAULTY_SIZE
				, A.EDGE_SYMBOL_FAULTY_SIZE
				, A.EDGE_BUR_FAULTY_SIZE
				, A.EDGE_INSPCT_CHARGER
				, (SELECT USER_NM FROM TB_USER D WHERE D.USER_NUMBER = A.EDGE_INSPCT_CHARGER) EDGE_INSPCT_CHARGER_NM
				, A.EDGE_INSPCT_DATE
				, A.APPEAR_OUTPUT_CNT
				, A.APPEAR_FAULTY_CNT
				, A.APPEAR_INSPCT_CHARGER
				, (SELECT USER_NM FROM TB_USER D WHERE D.USER_NUMBER = A.APPEAR_INSPCT_CHARGER) APPEAR_INSPCT_CHARGER_NM
				, A.APPEAR_INSPCT_DATE
				, A.USER_OUTPUT_CNT
				, A.APPEAR_ABRF_CNT
				, A.APPEAR_ABRS_CNT
				, A.APPEAR_DMS_CNT
				, A.PACK_YN
				, A.REG_ID
				, A.REG_DATE
				, A.UPD_ID
				, A.UPD_DATE
				, C.MODEL
				, E.QUTY_CD
				, C.VISION_INSP_CNT
				, (SELECT BASE_CD_NM FROM TB_SYSTEM_COMMON_CODE B WHERE B.BASE_GROUP_CD = '007' AND B.BASE_CD = E.QUTY_CD) QUTY_NM
			FROM
				TB_WORK_ORDER_OUTPUT_SUB A,
				TB_WORK_ORDER B,
				TB_GOODS_CODE_ADM C,
				TB_EQUIP_CODE_ADM D,
				TB_MATRL_CODE_ADM E
			WHERE A.WORK_ORD_NO = B.WORK_ORD_NO
			AND B.GOODS_CD = C.GOODS_CD
			AND B.EQUIP_CD = D.EQUIP_CD
			AND C.ALNICU_MATRL_CD = E.MATRL_CD
			AND A.ORD_LOT_NO = #{ordLotNo}
		]]>
	</select>
	
	<!-- 바코드 스캔 작업지시 조회 --> 
	<select id="scanWorkOrdOutputSubOrdLotNo" resultMap="WorkOrdOutputSubVo">
		<![CDATA[
			SELECT
				A.WORK_ORD_NO
				, A.WORK_ORD_LOT_NO
				, B.EQUIP_CD
				, B.GOODS_CD
				, C.GOODS_NM
				, B.EQUIP_COND_SEQ
				, A.WORK_ORD_SEQ
				, A.ORD_LOT_NO
				, A.LOT_NO
				, A.SUB_WORK_STATUS_CD
				, (SELECT BASE_CD_NM FROM TB_SYSTEM_COMMON_CODE D WHERE D.BASE_GROUP_CD='034' AND D.BASE_CD = A.SUB_WORK_STATUS_CD) SUB_WORK_STATUS_NM
				, A.OUTPUT_WEIGHT
				, A.OUTPUT_CNT
				, A.VISION_EDGE_WEIGHT
				, A.VISION_EDGE_CNT
				, CONVERT(FLOAT, A.OUTPUT_WEIGHT) + CONVERT(FLOAT, A.VISION_EDGE_WEIGHT) TOTAL_WEIGHT
				, A.OUTPUT_CNT + A.VISION_EDGE_CNT TOTAL_CNT
				, A.USER_INPUT_INSPCT_CNT
				, A.GUBUN
				, A.WORK_ORD_DATE
				, A.MAIN_WORK_CHARGR
				, (SELECT USER_NM FROM TB_USER D WHERE D.USER_NUMBER = A.MAIN_WORK_CHARGR) MAIN_WORK_CHARGR_NM
				, A.EDGE_OUTPUT_CNT
				, A.EDGE_FAULTY_CNT
				, A.EDGE_SAMPLE_CNT
				, A.EDGE_ROLL_FAULTY_SIZE
				, A.EDGE_SYMBOL_FAULTY_SIZE
				, A.EDGE_BUR_FAULTY_SIZE
				, A.EDGE_INSPCT_CHARGER
				, (SELECT USER_NM FROM TB_USER D WHERE D.USER_NUMBER = A.EDGE_INSPCT_CHARGER) EDGE_INSPCT_CHARGER_NM
				, A.EDGE_INSPCT_DATE
				, A.APPEAR_OUTPUT_CNT
				, A.APPEAR_FAULTY_CNT
				, A.APPEAR_INSPCT_CHARGER
				, (SELECT USER_NM FROM TB_USER D WHERE D.USER_NUMBER = A.APPEAR_INSPCT_CHARGER) APPEAR_INSPCT_CHARGER_NM
				, A.APPEAR_INSPCT_DATE
				, (A.EDGE_FAULTY_CNT + A.APPEAR_FAULTY_CNT) TOTAL_FAULTY_CNT
				, A.USER_OUTPUT_CNT
				, A.APPEAR_ABRF_CNT
				, A.APPEAR_ABRS_CNT
				, A.APPEAR_DMS_CNT
				, A.PACK_YN
				, A.REG_ID
				, A.REG_DATE
				, A.UPD_ID
				, A.UPD_DATE
				, D.QUTY_CD
				, (SELECT BASE_CD_NM FROM TB_SYSTEM_COMMON_CODE F WHERE F.BASE_GROUP_CD='007' AND F.BASE_CD = D.QUTY_CD) QUTY_NM
				, C.PACK_UNIT_CD
				, (SELECT BASE_CD_NM FROM TB_SYSTEM_COMMON_CODE F WHERE F.BASE_GROUP_CD='031' AND F.BASE_CD = C.PACK_UNIT_CD) PACK_UNIT_NM
				, (SELECT SUM(A.OUTPUT_CNT + A.VISION_EDGE_CNT)
					FROM TB_WORK_ORDER_OUTPUT_SUB A
					, (SELECT WORK_ORD_LOT_NO FROM TB_WORK_ORDER_OUTPUT_SUB
					WHERE ORD_LOT_NO = #{ordLotNo}) B
					WHERE A.WORK_ORD_LOT_NO = B.WORK_ORD_LOT_NO) AS WORK_ORD_LOT_NO_TOTAL_CNT
			FROM
				TB_WORK_ORDER_OUTPUT_SUB A
				, TB_WORK_ORDER B
				, TB_GOODS_CODE_ADM C
				, TB_MATRL_CODE_ADM D
			WHERE 1=1
			AND A.WORK_ORD_NO = B.WORK_ORD_NO
			AND B.GOODS_CD = C.GOODS_CD
			AND C.ALNICU_MATRL_CD = D.MATRL_CD
			AND	A.ORD_LOT_NO = #{ordLotNo}
		]]>
	</select>
	
	<!-- scanWorkOrdLotNo _사용안할때 날짜별 전체 조회--> 
	<select id="dateLookupAllWorkOrdLotNoList" resultMap="WorkOrdOutputSubVo">
			SELECT
				A.WORK_ORD_NO
				, A.WORK_ORD_LOT_NO
				, C.GOODS_CD
				, C.GOODS_NM
				, A.LOT_NO
				, A.SUB_WORK_STATUS_CD
				, SUM(USER_INPUT_INSPCT_CNT) TOTAL_CNT
				, SUM(ISNULL(A.EDGE_FAULTY_CNT, 0) + ISNULL(A.APPEAR_FAULTY_CNT, 0)) TOTAL_FAULTY_CNT
				, A.USER_OUTPUT_CNT
				, A.PACK_NUMBER
				, C.PACK_UNIT_CD
				, (SELECT BASE_CD_NM FROM TB_SYSTEM_COMMON_CODE F WHERE F.BASE_GROUP_CD='031' AND F.BASE_CD = C.PACK_UNIT_CD) PACK_UNIT_NM
				, (SELECT ORD_LOT_NO + '/' AS [text()] FROM TB_WORK_ORDER_OUTPUT_SUB WHERE SUB_WORK_STATUS_CD = 'A'
					AND (PACK_YN = 'N' OR PACK_YN IS NULL)
					AND WORK_ORD_LOT_NO = A.WORK_ORD_LOT_NO
					FOR XML PATH ('')) PACK_ORD_LOT_NO_LIST
			FROM
				TB_WORK_ORDER_OUTPUT_SUB A
				, TB_WORK_ORDER B
				, TB_GOODS_CODE_ADM C
				, TB_MATRL_CODE_ADM D
			WHERE 1=1
			AND A.WORK_ORD_NO		= B.WORK_ORD_NO
			AND B.GOODS_CD			= C.GOODS_CD
			AND C.ALNICU_MATRL_CD	= D.MATRL_CD
			AND SUB_WORK_STATUS_CD	= 'A'
			AND (A.PACK_YN = 'N' OR A.PACK_YN IS NULL)
			AND A.WORK_ORD_DATE = #{workOrdDate}

			GROUP BY 
				A.WORK_ORD_NO
				, A.WORK_ORD_LOT_NO
				, C.GOODS_CD
				, C.GOODS_NM
				, A.LOT_NO
				, A.SUB_WORK_STATUS_CD
				, A.USER_OUTPUT_CNT
				, PACK_NUMBER
				, C.PACK_UNIT_CD
	</select>
	
	<!-- 제품 포장시 생산LotNo 스캔--> 
	<select id="scanWorkOrdLotNo" resultMap="WorkOrdOutputSubVo">
			SELECT
				A.WORK_ORD_NO
				, A.WORK_ORD_LOT_NO
				, C.GOODS_CD
				, C.GOODS_NM
				, A.LOT_NO
				, A.SUB_WORK_STATUS_CD
				<!-- , SUM(A.OUTPUT_CNT + A.VISION_EDGE_CNT) TOTAL_CNT -->
				, SUM(USER_INPUT_INSPCT_CNT) TOTAL_CNT
				, SUM(ISNULL(A.EDGE_FAULTY_CNT, 0) + ISNULL(A.APPEAR_FAULTY_CNT, 0)) TOTAL_FAULTY_CNT
				, A.USER_OUTPUT_CNT
				, A.PACK_NUMBER
				, C.PACK_UNIT_CD
				, (SELECT BASE_CD_NM FROM TB_SYSTEM_COMMON_CODE F WHERE F.BASE_GROUP_CD='031' AND F.BASE_CD = C.PACK_UNIT_CD) PACK_UNIT_NM
				, (SELECT ORD_LOT_NO + '/' AS [text()] FROM TB_WORK_ORDER_OUTPUT_SUB
					WHERE SUB_WORK_STATUS_CD = 'A'
					AND (PACK_YN = 'N' OR PACK_YN IS NULL)
					AND WORK_ORD_LOT_NO = #{workOrdLotNo}
				<if test="workOrdNo != null and workOrdNo != ''">
					AND WORK_ORD_NO = #{workOrdNo}
				</if>
					FOR XML PATH ('')) PACK_ORD_LOT_NO_LIST
			FROM
				TB_WORK_ORDER_OUTPUT_SUB A
				, TB_WORK_ORDER B
				, TB_GOODS_CODE_ADM C
				, TB_MATRL_CODE_ADM D
			WHERE 1=1
			AND A.WORK_ORD_NO = B.WORK_ORD_NO
			AND B.GOODS_CD = C.GOODS_CD
			AND C.ALNICU_MATRL_CD = D.MATRL_CD
			AND SUB_WORK_STATUS_CD = 'A'
			AND (A.PACK_YN = 'N' OR A.PACK_YN IS NULL)
			AND A.WORK_ORD_LOT_NO = #{workOrdLotNo}
		<if test="workOrdNo != null and workOrdNo != ''">
			AND A.WORK_ORD_NO = #{workOrdNo}
		</if>
			GROUP BY A.WORK_ORD_NO, A.WORK_ORD_LOT_NO, C.GOODS_CD, C.GOODS_NM, A.LOT_NO, A.SUB_WORK_STATUS_CD, A.USER_OUTPUT_CNT, PACK_NUMBER,C.PACK_UNIT_CD
	</select>
	
	<!-- 엣지검사 등록(작업지시 Update) -->
	<update id="edgeCheckInsert" parameterType="mes.domain.po.WorkOrderVo">
			UPDATE	
				TB_WORK_ORDER_OUTPUT_SUB		 
			SET
				USER_INPUT_INSPCT_CNT = #{userInputInspctCnt}
				, EDGE_SAMPLE_CNT = #{edgeSampleCnt}
				, EDGE_FAULTY_CNT = #{edgeFaultyCnt}
				, EDGE_OUTPUT_CNT = #{edgeOutputCnt}
				, EDGE_ROLL_FAULTY_SIZE = #{edgeRollFaultySize}
				, EDGE_SYMBOL_FAULTY_SIZE = #{edgeSymbolFaultySize}
				, EDGE_BUR_FAULTY_SIZE = #{edgeBurFaultySize}
				, EDGE_INSPCT_CHARGER = #{edgeInspctCharger}
				, EDGE_INSPCT_DATE = #{edgeInspctDate}
				, SUB_WORK_STATUS_CD = #{subWorkStatusCd}
			<if test="appearOutputCnt != null and appearOutputCnt != ''">
				, APPEAR_OUTPUT_CNT = #{appearOutputCnt}
			</if>
				, UPD_ID =  #{updId}
				, UPD_DATE = getDate()
			WHERE
				ORD_LOT_NO = #{ordLotNo}
	</update>
	
	<!-- 엣지검사 수정(작업지시 Update) -->
	<update id="edgeCheckUpdate" parameterType="mes.domain.po.WorkOrderVo">
			UPDATE	
				TB_WORK_ORDER_OUTPUT_SUB	 
			SET
				USER_INPUT_INSPCT_CNT = #{userInputInspctCnt}
				, EDGE_SAMPLE_CNT = #{edgeSampleCnt}
				, EDGE_FAULTY_CNT = #{edgeFaultyCnt}
				, EDGE_ROLL_FAULTY_SIZE = #{edgeRollFaultySize}
				, EDGE_SYMBOL_FAULTY_SIZE = #{edgeSymbolFaultySize}
				, EDGE_BUR_FAULTY_SIZE = #{edgeBurFaultySize}
				, EDGE_INSPCT_CHARGER = #{edgeInspctCharger}
				, EDGE_OUTPUT_CNT = #{edgeOutputCnt}
				, EDGE_INSPCT_DATE = #{edgeInspctDate}
			<if test="appearOutputCnt != null and appearOutputCnt != ''">
				, APPEAR_OUTPUT_CNT = #{appearOutputCnt}
			</if>
		
			WHERE
				ORD_LOT_NO = #{ordLotNo}
	</update>
	
	<!-- 엣지검사 상세조회 (엣지불량 TB Read) 코드화 -->
	<select id="readEdgeGoodsFaultyAdmCode" resultMap="EdgeGoodsFaultyAdmVo">
		SELECT
			WORK_ORD_NO
			, ORD_LOT_NO
			, FAULTY_REG_DATE
			, MAJOR_CD
			, MINOR_CD
			, FAULTY_CNT
			, ( SELECT
					SUM(FAULTY_CNT)
				FROM TB_EDGE_GOODS_FAULTY_ADM_CODE
				WHERE 1=1
				<if test="ordLotNo != null and ordLotNo != ''">
					AND ORD_LOT_NO = #{ordLotNo}
				</if>
				<if test="dayNightCd != null and dayNightCd != ''">
					AND DAY_NIGHT_CD = #{dayNightCd}
				</if>
				<if test="inspctCharger != null and inspctCharger != ''">
					AND INSPCT_CHARGER = #{inspctCharger}
				</if>
				<if test="workOrdDate != null and workOrdDate != ''">
					AND WORK_ORD_DATE = #{workOrdDate}
				</if>
			) AS TOTAL_EDGE_FAULTY_CNT
			<!-- , ( SELECT SUM(FAULTY_CNT) FROM TB_EDGE_GOODS_FAULTY_ADM_CODE WHERE ORD_LOT_NO = #{ordLotNo} ) AS TOTAL_EDGE_FAULTY_CNT -->
			, SEQ
			, INSPCT_CHARGER
			, DAY_NIGHT_CD
			, WORK_ORD_DATE
			, REG_ID
			, REG_DATE
			, UPD_ID
			, UPD_DATE
		FROM
			TB_EDGE_GOODS_FAULTY_ADM_CODE
		WHERE 1=1
		<if test="ordLotNo != null and ordLotNo != ''">
			AND ORD_LOT_NO = #{ordLotNo}
		</if>
		<if test="dayNightCd != null and dayNightCd != ''">
			AND DAY_NIGHT_CD = #{dayNightCd}
		</if>
		<if test="inspctCharger != null and inspctCharger != ''">
			AND INSPCT_CHARGER = #{inspctCharger}
		</if>
		<if test="workOrdDate != null and workOrdDate != ''">
			AND WORK_ORD_DATE = #{workOrdDate}
		</if>
	</select>
	
	<!-- (트레이)엣지불량 상세조회 --> 
	<select id="readTrayEdgeGoodsFaultyAdmCode" resultMap="GoodsFaultyAdmVo">
		SELECT
			AA.WORK_ORD_NO
			, SUM(AA.OUTPUT_CNT) OUTPUT_CNT
			, BB.P_IDX
			, BB.ORD_LOT_NO
			, BB.FAULTY_REG_DATE
			, BB.MAJOR_CD
			, BB.MINOR_CD
			, BB.FAULTY_CNT
			, BB.SEQ
			, BB.INSPCT_CHARGER
			, BB.DAY_NIGHT_CD
			, BB.WORK_ORD_DATE
			, BB.REG_ID
			, BB.REG_DATE
			, BB.UPD_ID
			, BB.UPD_DATE
			<!-- , ( SUM(AA.OUTPUT_CNT) - ( SELECT ISNULL(SUM(FAULTY_CNT), 0) FROM TB_EDGE_GOODS_FAULTY_ADM_CODE X WHERE X.WORK_ORD_NO = AA.WORK_ORD_NO) ) AS EDGE_FAULTY_CNT -->
			, ( SELECT USER_NM FROM TB_USER X WHERE X.USER_NUMBER = BB.INSPCT_CHARGER ) AS INSPCT_CHARGER_NM
		FROM
		(
			SELECT
				WORK_ORD_NO
				, 0 AS OUTPUT_CNT
				, DAY_NIGHT_CD
			FROM TB_EDGE_GOODS_FAULTY_ADM_CODE
			WHERE WORK_ORD_NO = #{workOrdNo}
			AND DAY_NIGHT_CD = #{dayNightCd}
			
			UNION ALL
		
			SELECT
				WORK_ORD_NO
				, ISNULL(SUM(OUTPUT_CNT), 0) AS OUTPUT_CNT
				, GUBUN AS DAY_NIGHT_CD
			FROM TB_WORK_ORDER_OUTPUT_SUB
			WHERE WORK_ORD_NO = #{workOrdNo}
			AND GUBUN = #{dayNightCd}
			GROUP BY WORK_ORD_NO, GUBUN
		) AS AA
		
		LEFT OUTER JOIN
			TB_EDGE_GOODS_FAULTY_ADM_CODE AS BB
		ON AA.WORK_ORD_NO = BB.WORK_ORD_NO
		AND AA.DAY_NIGHT_CD = BB.DAY_NIGHT_CD
		
		WHERE 1=1
		<if test="seq != null and seq != ''">
			AND SEQ = #{seq}
		</if>
		GROUP BY
			AA.WORK_ORD_NO
			, BB.P_IDX
			, BB.ORD_LOT_NO
			, BB.FAULTY_REG_DATE
			, BB.MAJOR_CD
			, BB.MINOR_CD
			, BB.FAULTY_CNT
			, BB.SEQ
			, BB.INSPCT_CHARGER
			, BB.DAY_NIGHT_CD
			, BB.WORK_ORD_DATE
			, BB.REG_ID
			, BB.REG_DATE
			, BB.UPD_ID
			, BB.UPD_DATE
	</select>
	
	<!-- 엣지검사 등록(엣지불량 TB Insert) 코드화 -->
	<insert id="edgeCheckInsertCode" parameterType="mes.domain.qm.EdgeGoodsFaultyAdmVo">
		<![CDATA[
			INSERT INTO TB_EDGE_GOODS_FAULTY_ADM_CODE (
				WORK_ORD_NO
				, ORD_LOT_NO
				, FAULTY_REG_DATE
				, MAJOR_CD
				, MINOR_CD
				, FAULTY_CNT
				, INSPCT_CHARGER
				, DAY_NIGHT_CD
				, WORK_ORD_DATE
				, REG_ID
				, REG_DATE
			)
			VALUES (
				#{workOrdNo}
				, #{ordLotNo}
				, #{faultyRegDate}
				, #{majorCd}
				, #{minorCd}
				, #{faultyCnt}
				, #{inspctCharger}
				, #{dayNightCd}
				, #{workOrdDate} 
				, #{regId}
				, getdate()
			)
		]]>
	</insert>
	
	<!-- 엣지검사 수정(엣지불량 TB Update) 코드화(사용 X : 수정할 때 소분류 항목 추가시 delete-insert 하는 방식으로 변경 -->
	<!-- <update id="edgeCheckUpdateCode" parameterType="mes.domain.qm.EdgeGoodsFaultyAdmVo">

			UPDATE	TB_EDGE_GOODS_FAULTY_ADM_CODE 
			SET	
				FAULTY_REG_DATE = #{faultyRegDate}	
				, FAULTY_CNT 	= #{faultyCnt}						
 				, UPD_ID 		= #{updId}
				, UPD_DATE 		= getDate()
			WHERE
				WORK_ORD_NO 	= #{workOrdNo}
				<if test="ordLotNo != null and ordLotNo != ''">
				AND ORD_LOT_NO  = #{ordLotNo}
				</if>
				AND MAJOR_CD	= #{majorCd}
				AND MINOR_CD 	= #{minorCd}
		
	</update> -->
	
	<!-- 엣지검사 삭제 코드화 -->
	<delete id="edgeCheckDeleteCode" parameterType="mes.domain.qm.EdgeGoodsFaultyAdmVo">
		DELETE FROM	TB_EDGE_GOODS_FAULTY_ADM_CODE 		
		WHERE WORK_ORD_NO = #{workOrdNo}
		<if test="ordLotNo != null and ordLotNo != ''">
			AND ORD_LOT_NO = #{ordLotNo}
		</if>	
		<if test="dayNightCd != null and dayNightCd != ''">
			AND DAY_NIGHT_CD = #{dayNightCd}
		</if>
	</delete>
	
	
		<!-- 외관검사 불량 리스트 조회 시퀀스화 --> 
	<select id="readEdgeGoodsFaultyAdmCodeList" resultMap="EdgeGoodsFaultyAdmVo">
		SELECT
			WORK_ORD_NO
			, ORD_LOT_NO
			, FAULTY_REG_DATE		
			, SUM(FAULTY_CNT) TOTAL_EDGE_FAULTY_CNT
			, INSPCT_CHARGER
			, (SELECT X.USER_NM FROM TB_USER X WHERE X.USER_NUMBER = A.INSPCT_CHARGER) INSPCT_CHARGER_NM
			, DAY_NIGHT_CD
			, WORK_ORD_DATE
			, SEQ
		FROM
			TB_EDGE_GOODS_FAULTY_ADM_CODE A
		WHERE 1=1
			AND WORK_ORD_NO = #{workOrdNo}
			<if test="ordLotNo != null and ordLotNo != ''">
				AND ORD_LOT_NO = #{ordLotNo}
			</if>
			<if test="seq != null and seq != ''">
				AND SEQ = #{seq}
			</if>

		GROUP BY WORK_ORD_NO
			, ORD_LOT_NO
			, FAULTY_REG_DATE
			, INSPCT_CHARGER
			, DAY_NIGHT_CD
			, WORK_ORD_DATE
			, SEQ
	</select>
	
		<!-- 외관검사 불량 시퀀스 조회 --> 
	<select id="selectEdgeGoodsFaultyAdmCodeSeq" resultMap="EdgeGoodsFaultyAdmVo">
		SELECT
			CONVERT(INT,ISNULL(MAX(SEQ),0)+1) SEQ
		FROM
			TB_EDGE_GOODS_FAULTY_ADM_CODE
		WHERE 1=1
			AND WORK_ORD_NO = #{workOrdNo}
			AND ORD_LOT_NO = #{ordLotNo}

	</select>
	
	
	<!-- 외관검사 등록(외관불량 TB Insert) 코드화 및 시퀀스화-->
	<insert id="edgeCheckInsertCodeSeq" parameterType="mes.domain.qm.EdgeGoodsFaultyAdmVo">
		<![CDATA[
			INSERT INTO TB_EDGE_GOODS_FAULTY_ADM_CODE (
				WORK_ORD_NO
				, ORD_LOT_NO
				, FAULTY_REG_DATE
				, MAJOR_CD
				, MINOR_CD
				, FAULTY_CNT
				, INSPCT_CHARGER
				, DAY_NIGHT_CD
				, WORK_ORD_DATE
				, SEQ
				, REG_ID
				, REG_DATE
			)
			VALUES (
				#{workOrdNo}
				, #{ordLotNo}
				, #{faultyRegDate}
				, #{majorCd}
				, #{minorCd}
				, #{faultyCnt}
				, #{inspctCharger}
				, #{dayNightCd}
				, #{workOrdDate}
				, #{seq} 
				, #{regId}
				, getdate()
			)
		]]>
	</insert>
	
	
	<!-- 외관검사 삭제 시퀀스화 -->
	<delete id="edgeCheckDeleteSeq" parameterType="mes.domain.qm.EdgeGoodsFaultyAdmVo">
		DELETE FROM	TB_EDGE_GOODS_FAULTY_ADM_CODE		
		WHERE WORK_ORD_NO = #{workOrdNo}
		<if test="ordLotNo != null and ordLotNo != ''">
			AND ORD_LOT_NO = #{ordLotNo}
		</if>
		<if test="dayNightCd != null and dayNightCd != ''">
			AND DAY_NIGHT_CD = #{dayNightCd}
		</if>
		<if test="seq != null and seq != ''">
			AND SEQ = #{seq}
		</if>
	</delete>
	
	<!-- ______________________________________________________________엣지검사 끝______________________________________________________________ -->
	
	
	
	
	<!-- ______________________________________________________________외관검사 시작______________________________________________________________ -->
	<!-- 날짜로 외관검사 등록한 작업지시List 조회 -->
	<select id="goodsFaultyAdmDataList" resultMap="WorkOrderVo">
		<![CDATA[
			SELECT
				A.WORK_ORD_NO
				, A.ORD_LOT_NO
				, A.LOT_NO
				, B.EQUIP_CD
				, B.GOODS_CD
				, C.GOODS_NM
				, A.GUBUN
				, B.ORD_DATE
				, A.MAIN_WORK_CHARGR
				, A.OUTPUT_CNT
				, A.EDGE_SAMPLE_CNT
				, A.EDGE_FAULTY_CNT
				, A.EDGE_OUTPUT_CNT
				, A.EDGE_INSPCT_CHARGER
				, (SELECT USER_NM FROM TB_USER D WHERE D.USER_NUMBER = A.EDGE_INSPCT_CHARGER) EDGE_INSPCT_CHARGER_NM
				, A.EDGE_INSPCT_DATE
				, A.APPEAR_ABRF_CNT
				, A.APPEAR_ABRS_CNT
				, A.APPEAR_DMS_CNT
				, A.APPEAR_FAULTY_CNT
				, A.APPEAR_OUTPUT_CNT
				, A.APPEAR_INSPCT_CHARGER
				, (SELECT USER_NM FROM TB_USER D WHERE D.USER_NUMBER = A.APPEAR_INSPCT_CHARGER) APPEAR_INSPCT_CHARGER_NM
				, A.APPEAR_INSPCT_DATE
				, A.PACK_YN
				, A.REG_ID
				, A.REG_DATE
				, A.UPD_ID
				, A.UPD_DATE
				, C.MODEL
				, ROUND(100. * A.APPEAR_FAULTY_CNT / A.EDGE_OUTPUT_CNT, 2) FAULTY_PERCENT
			FROM
				TB_WORK_ORDER_OUTPUT_SUB A
				, TB_WORK_ORDER B
				, TB_GOODS_CODE_ADM C
			WHERE A.WORK_ORD_NO = B.WORK_ORD_NO
			AND B.GOODS_CD = C.GOODS_CD
			AND A.APPEAR_INSPCT_DATE = #{appearInspctDate}
			AND	A.SUB_WORK_STATUS_CD = 'A'
		]]>
	</select>
	
	<!-- 외관검사 등록(외관불량 TB Insert) -->
	<insert id="appearCheckInsert" parameterType="mes.domain.qm.GoodsFaultyAdmVo">
		<![CDATA[
			INSERT INTO TB_GOODS_FAULTY_ADM	(
				WORK_ORD_NO
				, METAL_MMB
				, METAL_MMS
				, METAL_PMS
				, METAL_FSTAB
				, METAL_PSTAB
				, METAL_ALIENSBST
				, METAL_BREAK
				, METAL_POLUTN
				, METAL_BROWNING
				, METAL_PPOLUTN
				, METAL_GILT
				, METAL_THICKNESS
				, METAL_ETC
				, FILM_PFS
				, FILM_BREAK
				, FILM_TORNOUT
				, FILM_SURFCE_BB
				, FILM_EDGE_BB
				, FILM_TEFLON
				, FILM_ALIENSBST
				, FILM_POLUTN
				, FILM_AGGLOMT
				, FILM_OVERLAP
				, FILM_UNJINJEOP
				, FILM_UNATTCH
				, FILM_WING
				, FILM_MF
				, FILM_ETC
				, ETC_SIZE
				, ETC_CUTTING
				, ETC_FILM_PRESS
				, ETC_FILM_DEPTH
				, ETC_LAYER
				, ETC_ETC
				, ETC_WASHBOARD
				, ETC_WHITETAPE
				, ETC_PATTEM
				, ETC_STABBED
				, ETC_HAZE
				, ETC_SURFACE
				, ETC_SWELLING
				, ETC_FEEDING
				, ETC_FILM
				, ETC_SLASH
				, ETC_JINJEOP
				, ETC_CRACK
				, ETC_CREASE
				, FAULTY_REG_DATE
				, REG_ID
				, REG_DATE
			)
			VALUES(
				#{workOrdNo}
				, #{metalMmb}
				, #{metalMms}
				, #{metalPms}
				, #{metalFstab}
				, #{metalPstab}
				, #{metalAliensbst}
				, #{metalBreak}
				, #{metalPolutn}
				, #{metalBrowning}
				, #{metalPpolutn}
				, #{metalGilt}
				, #{metalThickness}
				, #{metalEtc}
				, #{filmPfs}
				, #{filmBreak}
				, #{filmTornout}
				, #{filmSurfceBb}
				, #{filmEdgeBb}
				, #{filmTeflon}
				, #{filmAliensbst}
				, #{filmPolutn}
				, #{filmAgglomt}
				, #{filmOverlap}
				, #{filmUnjinjeop}
				, #{filmUnattch}
				, #{filmMf}
				, #{filmWing}
				, #{filmEtc}
				, #{etcSize}
				, #{etcCutting}
				, #{etcFilmPress}
				, #{etcFilmDepth}
				, #{etcLayer}
				, #{etcEtc}
				, #{etcWashboard}
				, #{etcWhitetape}
				, #{etcPattem}
				, #{etcStabbed}
				, #{etcHaze}
				, #{etcSurface}
				, #{etcSwelling}
				, #{etcFeeding}
				, #{etcFilm}
				, #{etcSlash}
				, #{etcJinjeop}
				, #{etcCrack}
				, #{etcCrease}
				, CONVERT(CHAR(8), getDate(), 112)
				, #{regId}
				, getdate()
			)
		]]>
	</insert>
	
		<!-- 외관검사 등록(외관불량 TB Insert) 코드화 -->
	<insert id="appearCheckInsertCode" parameterType="mes.domain.qm.GoodsFaultyAdmVo">
		<![CDATA[
			INSERT INTO TB_GOODS_FAULTY_ADM_CODE (
				WORK_ORD_NO
				, ORD_LOT_NO
				, FAULTY_REG_DATE
				, MAJOR_CD
				, MINOR_CD
				, FAULTY_CNT
				, INSPCT_CHARGER
				, DAY_NIGHT_CD
				, WORK_ORD_DATE
				, REG_ID
				, REG_DATE
			)
			VALUES (
				#{workOrdNo}
				, #{ordLotNo}
				, #{faultyRegDate}
				, #{majorCd}
				, #{minorCd}
				, #{faultyCnt}
				, #{inspctChargr}
				, #{dayNightCd}
				, #{workOrdDate} 
				, #{regId}
				, getdate()
			)
		]]>
	</insert>
	
	<!-- 외관검사 수정 코드화-->
	<update id="appearCheckUpdateCode" parameterType="mes.domain.qm.GoodsFaultyAdmVo">
		<![CDATA[
			UPDATE	TB_GOODS_FAULTY_ADM_CODE 
			SET	
				FAULTY_REG_DATE = #{faultyRegDate}	
				,FAULTY_CNT = #{faultyCnt}						
 				, UPD_ID = #{updId}
				, UPD_DATE = getDate()
			WHERE
				WORK_ORD_NO = #{workOrdNo}
				AND MAJOR_CD = #{majorCd}
				AND MINOR_CD = #{minorCd}
		]]>
	</update>
	
	<!-- 외관검사 삭제 코드화 -->
	<delete id="appearCheckDeleteCode" parameterType="mes.domain.qm.GoodsFaultyAdmVo">
		DELETE FROM	TB_GOODS_FAULTY_ADM_CODE 		
		WHERE WORK_ORD_NO = #{workOrdNo}
		<if test="ordLotNo != null and ordLotNo != ''">
			AND ORD_LOT_NO = #{ordLotNo}
		</if>
		<if test="dayNightCd != null and dayNightCd != ''">
			AND DAY_NIGHT_CD = #{dayNightCd}
		</if>
	</delete>
	
	
	
	
	
	
	
	<!-- 생산팀 비전불량수량 상세조회 -->
	<select id="readVisionFaultCodeList_F2" resultMap="GoodsFaultyAdmVo">
		SELECT
			WORK_ORD_NO
			, ORD_LOT_NO
			, FAULTY_REG_DATE
			, MAJOR_CD
			, MINOR_CD
			, FAULTY_CNT
			, SEQ
			, INSPCT_CHARGER
			, DAY_NIGHT_CD
			, WORK_ORD_DATE
			, REG_ID
			, REG_DATE
			, UPD_ID
			, UPD_DATE
		FROM TB_VISION_FAULTY_ADM_CODE
		WHERE WORK_ORD_NO = #{workOrdNo}
		AND SEQ = #{seq}
	</select>
	
	<!-- 외관검사 삭제 코드화 -->
	<insert id="visionFaultyAdmCodeInsert_F2" parameterType="mes.domain.qm.GoodsFaultyAdmVo">
		<![CDATA[
			INSERT INTO TB_VISION_FAULTY_ADM_CODE (
				WORK_ORD_NO
				, ORD_LOT_NO
				, FAULTY_REG_DATE
				, MAJOR_CD
				, MINOR_CD
				, FAULTY_CNT
				, SEQ
				, INSPCT_CHARGER
				, DAY_NIGHT_CD
				, WORK_ORD_DATE
				, REG_ID
				, REG_DATE
			) 
			VALUES(
				#{workOrdNo}
				, #{ordLotNo}
				, #{faultyRegDate}
				, #{majorCd}
				, #{minorCd}
				, #{faultyCnt}
				, #{seq}
				, #{inspctChargr}
				, #{dayNightCd}
				, #{workOrdDate}
				, #{regId}
				, getDate()
			)
		]]>
	</insert>
	
	<!-- 외관검사 삭제 코드화 -->
	<delete id="visionFaultyAdmCodeDelete_F2" parameterType="mes.domain.qm.GoodsFaultyAdmVo">
		<![CDATA[
			DELETE FROM	TB_VISION_FAULTY_ADM_CODE
			WHERE WORK_ORD_NO = #{workOrdNo}
			AND SEQ = #{seq}
		]]>
	</delete>
	
	
	
	
	<!-- 생산전표 미포장으로 변환시의 Seq채번 -->
	<select id="packNumberSeq" resultType="int">
			SELECT ISNULL(SUBSTRING(MAX(PACK_NUMBER), 10, 5) + 1, 1) MAX_PACK_NUMBER FROM TB_WORK_ORDER_OUTPUT_SUB
			WHERE PACK_YN = 'Y'
			AND PACK_NUMBER LIKE #{today} + '-%'
	</select>
	
	<!-- 미포장 변환 젼표번호 채번 후 해당 생산전표번호들 포장여부와 같이 Update -->
	<update id="updateOrdLotNoPackNumber" parameterType="mes.domain.po.WorkOrdOutputSubVo">
		UPDATE TB_WORK_ORDER_OUTPUT_SUB
		SET USER_OUTPUT_CNT = #{userOutputCnt}
			<!-- 
			, APPEAR_ABRF_CNT = #{appearAbrfCnt}
			, APPEAR_ABRS_CNT = #{appearAbrsCnt}
			, APPEAR_DMS_CNT = #{appearDmsCnt}
			-->
			, PACK_YN = 'Y'
			, PACK_NUMBER = #{packNumber}
			, PACK_ORD_LOT_NO_LIST = #{packOrdLotNoList}
			, PACK_TOTAL_CNT = #{packTotalCnt}
			, UPD_ID = #{updId}
			, UPD_DATE = getdate()
		WHERE WORK_ORD_NO = #{workOrdNo}
		AND WORK_ORD_LOT_NO = #{workOrdLotNo}
		AND ORD_LOT_NO IN (${ordLotNo})
	</update>
	
	<!-- 외관검사 수정 -->
	<update id="appearCheckUpdate" parameterType="mes.domain.qm.GoodsFaultyAdmVo">
		<![CDATA[
			UPDATE	TB_GOODS_FAULTY_ADM 
			SET
				METAL_MMB = #{metalMmb}
				, METAL_MMS = #{metalMms}
				, METAL_PMS = #{metalPms}
				, METAL_FSTAB = #{metalFstab}
				, METAL_PSTAB = #{metalPstab}
				, METAL_ALIENSBST = #{metalAliensbst}
				, METAL_BREAK = #{metalBreak}
				, METAL_POLUTN = #{metalPolutn}
				, METAL_BROWNING = #{metalBrowning}
				, METAL_PPOLUTN = #{metalPpolutn}
				, METAL_GILT = #{metalGilt}
				, METAL_THICKNESS = #{metalThickness}
				, METAL_ETC = #{metalEtc}
				, FILM_PFS = #{filmPfs}
				, FILM_BREAK = #{filmBreak}
				, FILM_TORNOUT = #{filmTornout}
				, FILM_SURFCE_BB = #{filmSurfceBb}
				, FILM_EDGE_BB = #{filmEdgeBb}
				, FILM_TEFLON = #{filmTeflon}
				, FILM_ALIENSBST = #{filmAliensbst}
				, FILM_POLUTN = #{filmPolutn}
				, FILM_AGGLOMT = #{filmAgglomt}
				, FILM_OVERLAP = #{filmOverlap}
				, FILM_UNJINJEOP = #{filmUnjinjeop}
				, FILM_UNATTCH = #{filmUnattch}
				, FILM_MF = #{filmMf}
				, FILM_WING = #{filmWing}
				, FILM_ETC = #{filmEtc}
				, ETC_SIZE = #{etcSize}
				, ETC_CUTTING = #{etcCutting}
				, ETC_FILM_PRESS = #{etcFilmPress}
				, ETC_FILM_DEPTH = #{etcFilmDepth}
				, ETC_LAYER = #{etcLayer}
				, ETC_ETC = #{etcEtc}
				, ETC_WASHBOARD = #{etcWashboard}
				, ETC_WHITETAPE = #{etcWhitetape}
				, ETC_PATTEM = #{etcPattem}
				, ETC_STABBED = #{etcStabbed}
				, ETC_HAZE = #{etcHaze}
				, ETC_SURFACE = #{etcSurface}
				, ETC_SWELLING = #{etcSwelling}
				, ETC_FEEDING = #{etcFeeding}
				, ETC_FILM = #{etcFilm}
				, ETC_SLASH = #{etcSlash}
				, ETC_JINJEOP = #{etcJinjeop}
				, ETC_CRACK = #{etcCrack}
				, ETC_CREASE = #{etcCrease}
 				, UPD_ID = #{updId}
				, UPD_DATE = getDate()
			WHERE
				WORK_ORD_NO = #{workOrdNo}
		]]>
	</update>
	
	<!-- 외관검사 등록시(작업지시 Update) -->
	<update id="appearWorkOrderSubInsert" parameterType="mes.domain.po.WorkOrdOutputSubVo">
		<![CDATA[
			UPDATE
				TB_WORK_ORDER_OUTPUT_SUB
			SET
				APPEAR_ABRF_CNT = #{appearAbrfCnt}
				, APPEAR_ABRS_CNT = #{appearAbrsCnt}
				, APPEAR_DMS_CNT = #{appearDmsCnt}
				, APPEAR_FAULTY_CNT = #{appearFaultyCnt}
				, APPEAR_OUTPUT_CNT = #{appearOutputCnt}
				, APPEAR_INSPCT_CHARGER = #{appearInspctCharger}
				, APPEAR_INSPCT_DATE = #{appearInspctDate}
				, SUB_WORK_STATUS_CD = 'A'
			WHERE WORK_ORD_NO = #{workOrdNo}
			AND ORD_LOT_NO = #{ordLotNo}
		]]>
	</update>
	
	<!-- 외관불량 상세조회 --> 
	<select id="readGoodsFaultyAdm" resultMap="GoodsFaultyAdmVo">
		<![CDATA[
			SELECT
				WORK_ORD_NO
				, METAL_MMB
				, METAL_MMS
				, METAL_PMS
				, METAL_FSTAB
				, METAL_PSTAB
				, METAL_ALIENSBST
				, METAL_BREAK
				, METAL_POLUTN
				, METAL_BROWNING
				, METAL_PPOLUTN
				, METAL_GILT
				, METAL_THICKNESS
				, METAL_ETC
				, FILM_PFS
				, FILM_BREAK
				, FILM_TORNOUT
				, FILM_SURFCE_BB
				, FILM_EDGE_BB
				, FILM_TEFLON
				, FILM_ALIENSBST
				, FILM_POLUTN
				, FILM_AGGLOMT
				, FILM_OVERLAP
				, FILM_UNJINJEOP
				, FILM_UNATTCH
				, FILM_MF
				, FILM_WING
				, FILM_ETC
				, ETC_SIZE
				, ETC_CUTTING
				, ETC_FILM_PRESS
				, ETC_FILM_DEPTH
				, ETC_LAYER
				, ETC_ETC
				, ETC_WASHBOARD
				, ETC_WHITETAPE
				, ETC_PATTEM
				, ETC_STABBED
				, ETC_HAZE
				, ETC_SURFACE
				, ETC_SWELLING
				, ETC_FEEDING
				, ETC_FILM
				, ETC_SLASH
				, ETC_JINJEOP
				, ETC_CRACK
				, ETC_CREASE
				, FAULTY_REG_DATE
				, REG_ID
				, REG_DATE
				, UPD_ID
				, UPD_DATE
			FROM
				TB_GOODS_FAULTY_ADM
			WHERE
				WORK_ORD_NO = #{workOrdNo}
		]]>
	</select>
	
	<!-- 외관불량 상세조회 --> 
	<select id="readGoodsFaultyAdmCode" resultMap="GoodsFaultyAdmVo">
		SELECT
			WORK_ORD_NO
			, ORD_LOT_NO
			, FAULTY_REG_DATE
			, MAJOR_CD
			, MINOR_CD
			, FAULTY_CNT
			, ( SELECT
					SUM(FAULTY_CNT)
				FROM TB_GOODS_FAULTY_ADM_CODE
				WHERE 1=1
				<if test="ordLotNo != null and ordLotNo != ''">
					AND ORD_LOT_NO = #{ordLotNo}
				</if>
				<if test="dayNightCd != null and dayNightCd != ''">
					AND DAY_NIGHT_CD = #{dayNightCd}
				</if>
				<if test="inspctCharger != null and inspctCharger != ''">
					AND INSPCT_CHARGER = #{inspctCharger}
				</if>
				<if test="workOrdDate != null and workOrdDate != ''">
					AND WORK_ORD_DATE = #{workOrdDate}
				</if>
			) AS TOTAL_APPEAR_FAULTY_CNT
			 
			<!-- , ( SELECT SUM(FAULTY_CNT) FROM TB_GOODS_FAULTY_ADM_CODE WHERE ORD_LOT_NO = #{ordLotNo} ) AS TOTAL_APPEAR_FAULTY_CNT -->
			, SEQ
			, INSPCT_CHARGER
			, DAY_NIGHT_CD
			, WORK_ORD_DATE
			, REG_ID
			, REG_DATE
			, UPD_ID
			, UPD_DATE
		FROM
			TB_GOODS_FAULTY_ADM_CODE
		WHERE 1=1
		<if test="ordLotNo != null and ordLotNo != ''">
			AND ORD_LOT_NO = #{ordLotNo}
		</if>
		<if test="dayNightCd != null and dayNightCd != ''">
			AND DAY_NIGHT_CD = #{dayNightCd}
		</if>
		<if test="inspctCharger != null and inspctCharger != ''">
			AND INSPCT_CHARGER = #{inspctCharger}
		</if>
		<if test="workOrdDate != null and workOrdDate != ''">
			AND WORK_ORD_DATE = #{workOrdDate}
		</if>
		<if test="seq != null and seq != ''">
			AND SEQ = #{seq}
		</if>
	</select>
	
	<!-- (트레이)외관불량 상세조회 --> 
	<select id="readTrayGoodsFaultyAdmCode" resultMap="GoodsFaultyAdmVo">
		SELECT
			AA.WORK_ORD_NO
			, SUM(USER_INPUT_INSPCT_CNT ) AS USER_INPUT_INSPCT_CNT
			, SUM(AA.OUTPUT_CNT) AS APPEAR_OUTPUT_CNT
			, BB.P_IDX
			, BB.ORD_LOT_NO
			, BB.FAULTY_REG_DATE
			, BB.MAJOR_CD
			, BB.MINOR_CD
			, BB.FAULTY_CNT
			, BB.SEQ
			, BB.INSPCT_CHARGER
			, BB.DAY_NIGHT_CD
			, BB.WORK_ORD_DATE
			<if test="factoryCode != null and factoryCode.equals('003')">
			, ISNULL(BB.VISION_INSP_CNT,0) VISION_INSP_CNT
			</if>
			, BB.REG_ID
			, BB.REG_DATE
			, BB.UPD_ID
			, BB.UPD_DATE
			<!-- , ( SUM(AA.OUTPUT_CNT) - ( SELECT ISNULL(SUM(FAULTY_CNT), 0) FROM TB_GOODS_FAULTY_ADM_CODE X WHERE X.WORK_ORD_NO = AA.WORK_ORD_NO) ) AS APPEAR_OUTPUT_CNT -->
			, ( SELECT USER_NM FROM TB_USER X WHERE X.USER_NUMBER = BB.INSPCT_CHARGER ) AS INSPCT_CHARGER_NM
			, BB.NOTE1
			, BB.NOTE2
		FROM
		(
			SELECT
				WORK_ORD_NO
				, 0 AS USER_INPUT_INSPCT_CNT
				, 0 AS OUTPUT_CNT
				, DAY_NIGHT_CD
			FROM TB_GOODS_FAULTY_ADM_CODE
			WHERE WORK_ORD_NO = #{workOrdNo}
			AND DAY_NIGHT_CD = #{dayNightCd}			
		
			UNION ALL
		
			SELECT
				WORK_ORD_NO
				, SUM(USER_INPUT_INSPCT_CNT) AS USER_INPUT_INSPCT_CNT
				, ISNULL(SUM(OUTPUT_CNT), 0) AS OUTPUT_CNT
				, GUBUN AS DAY_NIGHT_CD
			FROM TB_WORK_ORDER_OUTPUT_SUB
			WHERE WORK_ORD_NO = #{workOrdNo}
			AND GUBUN = #{dayNightCd}
			
			GROUP BY WORK_ORD_NO, GUBUN
		) AS AA
		
		LEFT OUTER JOIN
			TB_GOODS_FAULTY_ADM_CODE AS BB
		ON AA.WORK_ORD_NO = BB.WORK_ORD_NO
		AND AA.DAY_NIGHT_CD = BB.DAY_NIGHT_CD
		AND AA.DAY_NIGHT_CD = BB.DAY_NIGHT_CD
		
		WHERE 1=1
		<if test="seq != null and seq != ''">
				AND SEQ = #{seq}
		</if>
		GROUP BY
			AA.WORK_ORD_NO
			, BB.P_IDX
			, BB.ORD_LOT_NO
			, BB.FAULTY_REG_DATE
			, BB.MAJOR_CD
			, BB.MINOR_CD
			, BB.FAULTY_CNT
			, BB.SEQ
			, BB.INSPCT_CHARGER
			, BB.DAY_NIGHT_CD
			, BB.WORK_ORD_DATE
			<if test="factoryCode != null and factoryCode.equals('003')">
			, BB.VISION_INSP_CNT
			</if>
			, BB.REG_ID
			, BB.REG_DATE
			, BB.UPD_ID
			, BB.UPD_DATE
			, BB.NOTE1
			, BB.NOTE2
	</select>
	
	
	<!-- 외관검사 불량 리스트 조회 시퀀스화 --> 
	<select id="readGoodsFaultyAdmCodeList" resultMap="GoodsFaultyAdmVo">
		SELECT
			WORK_ORD_NO
			, ORD_LOT_NO
			, FAULTY_REG_DATE		
			, SUM(FAULTY_CNT) TOTAL_APPEAR_FAULTY_CNT
			, INSPCT_CHARGER
			, (SELECT X.USER_NM FROM TB_USER X WHERE X.USER_NUMBER = A.INSPCT_CHARGER) INSPCT_CHARGER_NM
			, DAY_NIGHT_CD
			, WORK_ORD_DATE
			, SEQ
		FROM
			TB_GOODS_FAULTY_ADM_CODE A
		WHERE 1=1
			AND WORK_ORD_NO = #{workOrdNo}
			<if test="ordLotNo != null and ordLotNo != ''">
				AND ORD_LOT_NO = #{ordLotNo}
			</if>
			<if test="seq != null and seq != ''">
				AND SEQ = #{seq}
			</if>

		GROUP BY WORK_ORD_NO
			, ORD_LOT_NO
			, FAULTY_REG_DATE
			, INSPCT_CHARGER
			, DAY_NIGHT_CD
			, WORK_ORD_DATE
			, SEQ
	</select>
	
		<!-- 외관검사 불량 시퀀스 조회 --> 
	<select id="selectGoodsFaultyAdmCodeSeq" resultMap="GoodsFaultyAdmVo">
		SELECT
			CONVERT(INT,ISNULL(MAX(SEQ),0)+1) SEQ
		FROM
			TB_GOODS_FAULTY_ADM_CODE
		WHERE 1=1
			AND WORK_ORD_NO = #{workOrdNo}
			AND ORD_LOT_NO = #{ordLotNo}

	</select>
	
	
	<!-- 외관검사 등록(외관불량 TB Insert) 코드화 및 시퀀스화-->
	<insert id="appearCheckInsertCodeSeq" parameterType="mes.domain.qm.GoodsFaultyAdmVo">
		<![CDATA[
			INSERT INTO TB_GOODS_FAULTY_ADM_CODE (
				WORK_ORD_NO
				, ORD_LOT_NO
				, FAULTY_REG_DATE
				, MAJOR_CD
				, MINOR_CD
				, FAULTY_CNT
				, INSPCT_CHARGER
				, DAY_NIGHT_CD
				, WORK_ORD_DATE
				, SEQ
				, NOTE1
				, NOTE2
			]]>
				<if test="factoryCode != null and factoryCode.equals('003')">
				 ,VISION_INSP_CNT
				</if>
			<![CDATA[
				, REG_ID
				, REG_DATE
			)
			VALUES (
				#{workOrdNo}
				, #{ordLotNo}
				, #{faultyRegDate}
				, #{majorCd}
				, #{minorCd}
				, #{faultyCnt}
				, #{inspctChargr}
				, #{dayNightCd}
				, #{workOrdDate}
				, #{seq}
				, #{note1}
				, #{note2}
			]]>
				<if test="factoryCode != null and factoryCode.equals('003')">
				 , #{visionInspCnt}
				</if>
			<![CDATA[
				, #{regId}
				, getdate()
			)
			]]>
	</insert>
	
	
	<!-- 외관검사 삭제 시퀀스화 -->
	<delete id="appearCheckDeleteSeq" parameterType="mes.domain.qm.GoodsFaultyAdmVo">
		DELETE FROM	TB_GOODS_FAULTY_ADM_CODE 		
		WHERE WORK_ORD_NO = #{workOrdNo}
		<if test="ordLotNo != null and ordLotNo != ''">
			AND ORD_LOT_NO = #{ordLotNo}
		</if>
		<if test="dayNightCd != null and dayNightCd != ''">
			AND DAY_NIGHT_CD = #{dayNightCd}
		</if>
		<if test="seq != null and seq != ''">
			AND SEQ = #{seq}
		</if>
	</delete>
	
	
	<!-- ______________________________________________________________외관검사 끝______________________________________________________________ -->
	
	
	
	
	
	
	
	
	
	
	<!-- ______________________________________________________________생산실적 관리 시작______________________________________________________________ -->
	<select id="readActualOutputDataList" resultMap="WorkOrderVo">
		<![CDATA[
			SELECT
				AA.ORD_DATE
				, AA.ORD_GUBUN
				, (SELECT BASE_CD_NM FROM TB_SYSTEM_COMMON_CODE K WHERE K.BASE_GROUP_CD='028' AND K.BASE_CD = AA.ORD_GUBUN) ORD_GUBUN_NM
				, AA.EQUIP_CD
				, AA.EQUIP_NM
				, AA.TARGET_CNT
				, BB.GOODS_CD
				, BB.GOODS_NM
				, BB.WORK_ORD_NO
				, BB.SUM_OUTPUT_CNT
				, BB.MODEL
				, BB.FILM_NM
				, BB.DEAL_CORP_NM
				, BB.GUBUN_CD
				, (SELECT BASE_CD_NM FROM TB_SYSTEM_COMMON_CODE K WHERE K.BASE_GROUP_CD='019' AND K.BASE_CD = BB.GUBUN_CD) GUBUN_NM
				, BB.CHAMFER_YN_CD
				, (SELECT BASE_CD_NM FROM TB_SYSTEM_COMMON_CODE K WHERE K.BASE_GROUP_CD='020' AND K.BASE_CD = BB.CHAMFER_YN_CD) CHAMFER_YN_NM
				, BB.QUTY_CD
				, (SELECT BASE_CD_NM FROM TB_SYSTEM_COMMON_CODE K WHERE K.BASE_GROUP_CD='007' AND K.BASE_CD = BB.QUTY_CD) QUTY_NM
			FROM
			
			(SELECT
				A.EQUIP_CD
				, A.EQUIP_NM
				, B.ORD_DATE
				, B.ORD_GUBUN
				, TARGET_CNT
			FROM TB_EQUIP_CODE_ADM A LEFT OUTER JOIN
				(SELECT EQUIP_CD, EQUIP_NM, 'D' ORD_GUBUN, CAPA/2 TARGET_CNT, #{ordDate} AS ORD_DATE FROM TB_EQUIP_CODE_ADM
				UNION
				SELECT EQUIP_CD, EQUIP_NM, 'N' ORD_GUBUN, CAPA/2 TARGET_CNT, #{ordDate} AS ORD_DATE FROM TB_EQUIP_CODE_ADM
			) B ON A.EQUIP_CD = B.EQUIP_CD) AA LEFT OUTER JOIN
				(SELECT
					A.EQUIP_CD
					, B.GUBUN
					, MIN(A.WORK_ORD_NO) WORK_ORD_NO
					, SUM(B.OUTPUT_CNT + B.VISION_EDGE_CNT) SUM_OUTPUT_CNT
					, (SELECT DEAL_CORP_NM FROM TB_DEAL_CORP_ADM WHERE DEAL_CORP_CD = MAX(A.DEAL_CORP_CD)) DEAL_CORP_NM
					, MAX(A.GOODS_CD) GOODS_CD
					, MAX(C.GOODS_NM) GOODS_NM
					, MAX(C.MODEL) MODEL
					, MAX(E.QUTY_CD) QUTY_CD
					, MAX(E.CHAMFER_YN_CD) CHAMFER_YN_CD
					, MAX(E.GUBUN_CD) GUBUN_CD
					, MAX(F.MATRL_NM) FILM_NM
					FROM TB_WORK_ORDER A, TB_WORK_ORDER_OUTPUT_SUB B, TB_GOODS_CODE_ADM C, TB_USER D, TB_MATRL_CODE_ADM E, TB_MATRL_CODE_ADM F
					WHERE A.WORK_ORD_NO = B.WORK_ORD_NO
					AND A.GOODS_CD = C.GOODS_CD
					AND C.ALNICU_MATRL_CD = E.MATRL_CD
					AND C.FILM_MATRL_CD = F.MATRL_CD
					AND B.WORK_ORD_DATE = #{ordDate}
					GROUP BY  A.EQUIP_CD, B.GUBUN, A.GOODS_CD
				) BB ON AA.EQUIP_CD = BB.EQUIP_CD AND AA.ORD_GUBUN = BB.GUBUN
			]]>
		<if test="ordGubun != null and ordGubun != ''">
			WHERE AA.ORD_GUBUN = #{ordGubun}
		</if>
			ORDER BY AA.ORD_GUBUN, AA.EQUIP_NM
	</select>
	
	<!-- 설비연동(eisc0010) 생산실적 상태(통계) -->
	<select id="actualOutputDataList_eisc0010" resultMap="WorkOrderVo">
			SELECT
				A.WORK_ORD_NO
				, A.ORD_LOT_NO
				, A.EQUIP_CD
				, A.GOODS_CD
				, B.GOODS_NM
				, A.WORK_STATUS_CD
				, (SELECT BASE_CD_NM FROM TB_SYSTEM_COMMON_CODE D WHERE D.BASE_GROUP_CD='034' AND D.BASE_CD = A.WORK_STATUS_CD) WORK_STATUS_NM
				, A.TARGET_WEIGHT
				, A.OUTPUT_CNT
				, B.MODEL
				, C.QUTY_CD	
				, (SELECT BASE_CD_NM FROM TB_SYSTEM_COMMON_CODE D WHERE D.BASE_GROUP_CD='007' AND D.BASE_CD = C.QUTY_CD) QUTY_NM
				, (A.EDGE_FAULTY_CNT + A.APPEAR_FAULTY_CNT) TOTAL_FAULTY_CNT
			FROM
				TB_WORK_ORDER A
				, TB_GOODS_CODE_ADM B
				, TB_MATRL_CODE_ADM C				
			WHERE 1=1
				AND A.GOODS_CD = B.GOODS_CD
				AND B.ALNICU_MATRL_CD = C.MATRL_CD
				AND ORD_DATE = #{ordDate}
				AND A.EQUIP_CD = #{equipCd}
			<if test="ordGubun != null and ordGubun != ''"> 
				AND A.ORD_GUBUN = #{ordGubun}
			</if>
	</select>
	
	
	
	<select id="readTotalActualOutputDataList" resultMap="WorkOrderVo">
		<![CDATA[
			SELECT
				B.EQUIP_CD,
				D.EQUIP_NM,
				B.DEAL_CORP_CD,
				G.DEAL_CORP_NM,
				B.GOODS_CD,
				E.GOODS_NM,
				F.QUTY_CD,
				(SELECT BASE_CD_NM FROM TB_SYSTEM_COMMON_CODE B WHERE B.BASE_GROUP_CD='007' AND B.BASE_CD = F.QUTY_CD) QUTY_NM,
				E.MODEL,
				B.TARGET_ASUM,
				B.TARGET_BSUM,
				B.TARGET_CSUM,
				B.OUTPUT_ASUM,
				B.OUTPUT_BSUM,
				B.OUTPUT_CSUM,
				B.PERCENT_A,
				B.PERCENT_B,
				B.PERCENT_C,
				B.TOTAL_TARGET,
				B.TOTAL_OUTPUT,
				B.TOTAL_PERCENT
			FROM ( 
				SELECT					
					A.EQUIP_CD,
					A.DEAL_CORP_CD,
					A.GOODS_CD,
					SUM(CASE WHEN WORK_TEAM_CD = 'A' THEN TARGET_CNT END) TARGET_ASUM ,
					SUM(CASE WHEN WORK_TEAM_CD = 'B' THEN TARGET_CNT END) TARGET_BSUM ,
					SUM(CASE WHEN WORK_TEAM_CD = 'C' THEN TARGET_CNT END) TARGET_CSUM ,
					SUM(CASE WHEN WORK_TEAM_CD = 'A' THEN APPEAR_OUTPUT_CNT END) OUTPUT_ASUM ,
					SUM(CASE WHEN WORK_TEAM_CD = 'B' THEN APPEAR_OUTPUT_CNT END) OUTPUT_BSUM ,
					SUM(CASE WHEN WORK_TEAM_CD = 'C' THEN APPEAR_OUTPUT_CNT END) OUTPUT_CSUM
					, LEFT(100. * SUM(CASE WHEN WORK_TEAM_CD = 'A' THEN APPEAR_OUTPUT_CNT END) / SUM(CASE WHEN WORK_TEAM_CD = 'A' THEN A.TARGET_CNT END), 5) AS PERCENT_A
					, LEFT(100. * SUM(CASE WHEN WORK_TEAM_CD = 'B' THEN APPEAR_OUTPUT_CNT END) / SUM(CASE WHEN WORK_TEAM_CD = 'B' THEN A.TARGET_CNT END), 5) AS PERCENT_B
					, LEFT(100. * SUM(CASE WHEN WORK_TEAM_CD = 'C' THEN APPEAR_OUTPUT_CNT END) / SUM(CASE WHEN WORK_TEAM_CD = 'C' THEN A.TARGET_CNT END), 5) AS PERCENT_C
					, SUM(A.TARGET_CNT) TOTAL_TARGET
					, SUM(APPEAR_OUTPUT_CNT) TOTAL_OUTPUT
					, APPEAR_OUTPUT_CNT
					, A.TARGET_CNT
					, CASE WHEN A.TARGET_CNT = 0 THEN 0 ELSE CONVERT(FLOAT, (LEFT(100. * SUM(APPEAR_OUTPUT_CNT) / SUM(A.TARGET_CNT), 5))) END AS TOTAL_PERCENT
				FROM
					TB_WORK_ORDER A,
					TB_WORK_ORDER_OUTPUT_SUB X
				WHERE 1=1
					AND X.WORK_ORD_NO = A.WORK_ORD_NO
					AND X.WORK_ORD_DATE BETWEEN #{chooseDate1} AND #{chooseDate2}
					AND APPEAR_OUTPUT_CNT IS NOT NULL
					AND A.TARGET_CNT IS NOT NULL
					GROUP BY EQUIP_CD, DEAL_CORP_CD, GOODS_CD , APPEAR_OUTPUT_CNT, A.TARGET_CNT
				) B,
				TB_EQUIP_CODE_ADM D,
				TB_GOODS_CODE_ADM E,
				TB_MATRL_CODE_ADM F,
				TB_DEAL_CORP_ADM G				
		
			WHERE B.EQUIP_CD = D.EQUIP_CD
				AND B.GOODS_CD = E.GOODS_CD
				AND E.ALNICU_MATRL_CD = F.MATRL_CD
				AND B.DEAL_CORP_CD = G.DEAL_CORP_CD				
			
			]]>
			<if test="equipGroup != null and equipGroup != ''"> 
				AND D.EQUIP_GROUP = #{equipGroup}
			</if>
			<if test="qutyCd != null and qutyCd != ''"> 
				AND F.QUTY_CD = #{qutyCd}
			</if>
			
	</select>

	
	<!-- ______________________________________________________________생산실적 관리 끝______________________________________________________________ -->
	
	
	
	
	<!-- ______________________________________________________________품질관리/뷸량집계현황(기간) 통계 조회______________________________________________________________ -->
	<!-- 날짜로 엣지검사 등록한 작업지시List 조회-->
	<select id="faultyWeekTotalList" resultType="HashMap" parameterType="mes.domain.qm.GoodsFaultyAdmVo" >
		<![CDATA[
			SELECT
				C.APPEAR_INSPCT_DATE
				, C.USER_INPUT_INSPCT_CNT
				, C.APPEAR_OUTPUT_CNT
				, C.FAULT_SUM
				, C.FAULT_PERCENT
				, C.EDGE_FAULTY_CNT
				, D.*
			FROM
				(	
					SELECT
						A.APPEAR_INSPCT_DATE
						--, SUM(ISNULL(A.OUTPUT_CNT, 0)) + SUM(ISNULL(A.VISION_EDGE_CNT, 0)) OUTPUT_CNT
						--, SUM(ISNULL(A.APPEAR_OUTPUT_CNT, 0)) + SUM(ISNULL(A.APPEAR_FAULTY_CNT, 0)) + SUM(ISNULL(A.EDGE_FAULTY_CNT, 0)) OUTPUT_CNT
						, SUM(ISNULL(USER_INPUT_INSPCT_CNT, 0)) USER_INPUT_INSPCT_CNT
						, SUM(ISNULL(A.APPEAR_OUTPUT_CNT, 0)) APPEAR_OUTPUT_CNT
						, SUM(ISNULL(A.APPEAR_FAULTY_CNT, 0)) + SUM(ISNULL(A.EDGE_FAULTY_CNT, 0)) FAULT_SUM
						, CONVERT(NUMERIC(5,2), (CONVERT(FLOAT,(SUM(ISNULL(A.APPEAR_FAULTY_CNT, 0)) + SUM(ISNULL(A.EDGE_FAULTY_CNT, 0)))	) / CONVERT(FLOAT, SUM(ISNULL(A.APPEAR_OUTPUT_CNT, 0)) + SUM(ISNULL(A.APPEAR_FAULTY_CNT, 0)) + SUM(ISNULL(A.EDGE_FAULTY_CNT, 0)))) * 100) AS FAULT_PERCENT
						, SUM(ISNULL(A.EDGE_FAULTY_CNT, 0)) AS EDGE_FAULTY_CNT
					FROM TB_WORK_ORDER_OUTPUT_SUB A, (SELECT DISTINCT WORK_ORD_NO, ORD_LOT_NO, FAULTY_REG_DATE FROM TB_GOODS_FAULTY_ADM_CODE
													WHERE FAULTY_REG_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
													GROUP BY WORK_ORD_NO, ORD_LOT_NO, FAULTY_REG_DATE) B
					WHERE A.SUB_WORK_STATUS_CD = 'A'
					AND A.WORK_ORD_NO = B.WORK_ORD_NO
					AND A.ORD_LOT_NO = B.ORD_LOT_NO
					AND A.APPEAR_INSPCT_DATE = B.FAULTY_REG_DATE
					AND A.APPEAR_INSPCT_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
					GROUP BY A.APPEAR_INSPCT_DATE

				) C,
				(SELECT *
				FROM (
					SELECT 
						FAULTY_REG_DATE
						, MINOR_CD
						, SUM(FAULTY_CNT) FAULTY_CNT
					FROM TB_GOODS_FAULTY_ADM_CODE B
					WHERE B.FAULTY_REG_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
					GROUP BY WORK_ORD_NO, ORD_LOT_NO, MINOR_CD, B.FAULTY_REG_DATE
					) as t
				PIVOT(SUM(FAULTY_CNT) for MINOR_CD IN (${codeList})) as PVT ) D
			WHERE C.APPEAR_INSPCT_DATE = D.FAULTY_REG_DATE
			ORDER BY C.APPEAR_INSPCT_DATE
		]]>
	</select>
	
	<!-- 날짜로 엣지검사 등록한 작업지시List 조회-->
	<select id="faultyWeekTotalListFa2" resultType="HashMap" parameterType="mes.domain.qm.GoodsFaultyAdmVo" >
		
	<!-- 			SELECT
				C.APPEAR_INSPCT_DATE
				, C.USER_INPUT_INSPCT_CNT
				, C.APPEAR_OUTPUT_CNT
				, C.FAULT_SUM
				, C.FAULT_PERCENT
				, C.EDGE_FAULTY_CNT
				, D.*
			FROM
				(						
					SELECT
						Z.APPEAR_INSPCT_DATE
						, SUM(ISNULL(USER_INPUT_INSPCT_CNT, 0)) USER_INPUT_INSPCT_CNT
						, SUM(ISNULL(Z.APPEAR_OUTPUT_CNT, 0)) APPEAR_OUTPUT_CNT
						, SUM(ISNULL(Z.FAULT_SUM, 0)) FAULT_SUM
						, SUM(ISNULL(Z.EDGE_FAULTY_CNT, 0)) EDGE_FAULT_SUM
						, CONVERT(NUMERIC(5,2), (CONVERT(FLOAT,( SUM(ISNULL(Z.FAULT_SUM, 0)))	) / CONVERT(FLOAT, SUM(ISNULL(Z.USER_INPUT_INSPCT_CNT, 0)))) * 100) AS FAULT_PERCENT
						, SUM(ISNULL(Z.EDGE_FAULTY_CNT, 0)) AS EDGE_FAULTY_CNT
					FROM
						(	
							SELECT A.APPEAR_INSPCT_DATE
						
							, SUM(ISNULL(USER_INPUT_INSPCT_CNT, 0)) USER_INPUT_INSPCT_CNT
							, SUM(ISNULL(A.APPEAR_OUTPUT_CNT, 0)) APPEAR_OUTPUT_CNT
							, SUM(ISNULL(A.APPEAR_FAULTY_CNT, 0)) + SUM(ISNULL(A.EDGE_FAULTY_CNT, 0)) FAULT_SUM
							, CONVERT(NUMERIC(5,2), (CONVERT(FLOAT,(SUM(ISNULL(A.APPEAR_FAULTY_CNT, 0)) + SUM(ISNULL(A.EDGE_FAULTY_CNT, 0)))	) / CONVERT(FLOAT, SUM(ISNULL(A.APPEAR_OUTPUT_CNT, 0)) + SUM(ISNULL(A.APPEAR_FAULTY_CNT, 0)) + SUM(ISNULL(A.EDGE_FAULTY_CNT, 0)))) * 100) AS FAULT_PERCENT
							, SUM(ISNULL(A.EDGE_FAULTY_CNT, 0)) AS EDGE_FAULTY_CNT
						
							FROM TB_WORK_ORDER_OUTPUT_SUB A, (SELECT DISTINCT WORK_ORD_NO, ORD_LOT_NO, FAULTY_REG_DATE , CAST('' as INT)  EDGE_FAULTY_CNT
																FROM TB_GOODS_FAULTY_ADM_CODE 
																WHERE FAULTY_REG_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}) B
							WHERE A.SUB_WORK_STATUS_CD = 'A'
							AND A.WORK_ORD_NO = B.WORK_ORD_NO
							AND A.ORD_LOT_NO = B.ORD_LOT_NO
							AND (A.APPEAR_INSPCT_DATE = B.FAULTY_REG_DATE AND A.APPEAR_INSPCT_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}) 
	
							GROUP BY A.APPEAR_INSPCT_DATE 

					UNION 

					SELECT
						A.EDGE_INSPCT_DATE
						
						, SUM(ISNULL(USER_INPUT_INSPCT_CNT, 0)) USER_INPUT_INSPCT_CNT
						, SUM(ISNULL(A.APPEAR_OUTPUT_CNT, 0)) APPEAR_OUTPUT_CNT
						, SUM(ISNULL(A.APPEAR_FAULTY_CNT, 0)) + SUM(ISNULL(A.EDGE_FAULTY_CNT, 0)) EDGE_FAULT_SUM
						, CONVERT(NUMERIC(5,2), (CONVERT(FLOAT,(SUM(ISNULL(A.APPEAR_FAULTY_CNT, 0)) + SUM(ISNULL(A.EDGE_FAULTY_CNT, 0)))	) / CONVERT(FLOAT, SUM(ISNULL(A.APPEAR_OUTPUT_CNT, 0)) + SUM(ISNULL(A.APPEAR_FAULTY_CNT, 0)) + SUM(ISNULL(A.EDGE_FAULTY_CNT, 0)))) * 100) AS FAULT_PERCENT
						, SUM(ISNULL(A.EDGE_FAULTY_CNT, 0)) AS EDGE_FAULTY_CNT
						
					FROM TB_WORK_ORDER_OUTPUT_SUB A, (
													SELECT WORK_ORD_NO, ORD_LOT_NO, FAULTY_REG_DATE
													FROM TB_EDGE_GOODS_FAULTY_ADM_CODE
													WHERE FAULTY_REG_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
													GROUP BY WORK_ORD_NO, ORD_LOT_NO, FAULTY_REG_DATE
													 ) B
					WHERE A.SUB_WORK_STATUS_CD = 'E'
					AND A.WORK_ORD_NO = B.WORK_ORD_NO
					AND A.ORD_LOT_NO = B.ORD_LOT_NO
					AND (A.EDGE_INSPCT_DATE = B.FAULTY_REG_DATE AND A.EDGE_INSPCT_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}) 

					GROUP BY A.EDGE_INSPCT_DATE


					) AS Z
					WHERE 1=1
					GROUP BY Z.APPEAR_INSPCT_DATE

				) C,
				(SELECT *
				FROM (
					SELECT 
						FAULTY_REG_DATE
						, MINOR_CD
						, SUM(FAULTY_CNT) FAULTY_CNT
					FROM TB_GOODS_FAULTY_ADM_CODE B
					WHERE B.FAULTY_REG_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
					GROUP BY WORK_ORD_NO, ORD_LOT_NO, MINOR_CD, B.FAULTY_REG_DATE
					) as t
				PIVOT(SUM(FAULTY_CNT) for MINOR_CD IN (${codeList})) as PVT ) D
			WHERE C.APPEAR_INSPCT_DATE = D.FAULTY_REG_DATE
			ORDER BY C.APPEAR_INSPCT_DATE -->
			
	
			
			<!-- SELECT * FROM 
			
				(
			   SELECT
					 APPEAR_INSPCT_DATE
					, ISNULL( SUM(APPEAR_FAULTY_CNT), 0 ) APPEAR_FAULTY_CNT 
					, ISNULL( SUM(FAULTY_CNT), 0 ) EDGE_FAULTY_CNT
					, ISNULL( SUM(APPEAR_FAULTY_CNT), 0 ) +  ISNULL( SUM(FAULTY_CNT), 0 ) FAULT_SUM
					, ISNULL( SUM(APPEAR_OUTPUT_CNT), 0 ) APPEAR_OUTPUT_CNT
					, ISNULL( SUM(APPEAR_FAULTY_CNT), 0 ) +  ISNULL( SUM(FAULTY_CNT), 0 ) +  ISNULL( SUM(APPEAR_OUTPUT_CNT), 0 ) USER_INPUT_INSPCT_CNT
					, ( ISNULL( Sum(APPEAR_FAULTY_CNT), 0 ) + ISNULL( SUM(FAULTY_CNT), 0 ) ) / (  ISNULL( SUM(APPEAR_FAULTY_CNT), 0 ) + ISNULL( SUM(FAULTY_CNT), 0 ) + ISNULL( SUM(APPEAR_OUTPUT_CNT), 0 ) ) * 100 FAULT_PERCENT
			   FROM 
					   ( SELECT WORK_ORD_NO,
							   APPEAR_INSPCT_DATE,
							   ISNULL(SUM(APPEAR_FAULTY_CNT),0) APPEAR_FAULTY_CNT,
							   ISNULL(SUM(APPEAR_OUTPUT_CNT),0) APPEAR_OUTPUT_CNT,
							   ISNULL(SUM(USER_INPUT_INSPCT_CNT),0) USER_INPUT_INSPCT_CNT,
							  	 (SELECT SUM(OUTPUT_CNT) FROM TB_WORK_ORDER_OUTPUT_SUB X 
							WHERE X.WORK_ORD_NO = A.WORK_ORD_NO GROUP BY WORK_ORD_NO) AS APPEAR_OUTPUT_CNT,
							  ((SELECT SUM(OUTPUT_CNT) FROM TB_WORK_ORDER_OUTPUT_SUB X 
								WHERE X.WORK_ORD_NO = A.WORK_ORD_NO GROUP BY WORK_ORD_NO) + ISNULL(SUM(A.APPEAR_FAULTY_CNT),0)) AS USER_INPUT_INSPCT_CNT,								
							   GUBUN
						FROM TB_WORK_ORDER_OUTPUT_SUB A
						WHERE APPEAR_INSPCT_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
						GROUP BY WORK_ORD_NO, APPEAR_INSPCT_DATE, GUBUN
						) A 
			
						LEFT OUTER JOIN 
			
					   ( SELECT WORK_ORD_NO,
							   FAULTY_REG_DATE,
							   ISNULL(SUM(FAULTY_CNT),0) FAULTY_CNT,
							   DAY_NIGHT_CD
						FROM TB_EDGE_GOODS_FAULTY_ADM_CODE 
						WHERE FAULTY_REG_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
						GROUP BY WORK_ORD_NO, FAULTY_REG_DATE, DAY_NIGHT_CD ) B
			
						ON A.WORK_ORD_NO = B.WORK_ORD_NO
						AND A.APPEAR_INSPCT_DATE = B.FAULTY_REG_DATE
						AND ( A.GUBUN = B.DAY_NIGHT_CD  OR  B.DAY_NIGHT_CD IS NULL )
						
						GROUP BY A.APPEAR_INSPCT_DATE
						
				) AA

				LEFT OUTER JOIN 
	
				(SELECT *
					FROM (
						SELECT 
							FAULTY_REG_DATE
							, MINOR_CD
							, ISNULL(SUM(FAULTY_CNT),0) FAULTY_CNT
						FROM TB_GOODS_FAULTY_ADM_CODE B
						WHERE B.FAULTY_REG_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
						GROUP BY WORK_ORD_NO, ORD_LOT_NO, MINOR_CD, B.FAULTY_REG_DATE
						) AS t
					PIVOT(SUM(FAULTY_CNT) FOR MINOR_CD IN (${codeList})) AS PVT ) D
	
				ON AA.APPEAR_INSPCT_DATE = D.FAULTY_REG_DATE
				WHERE AA.APPEAR_INSPCT_DATE = D.FAULTY_REG_DATE
				ORDER BY AA.APPEAR_INSPCT_DATE -->
				
		<![CDATA[
				SELECT * FROM 
			
				(
			   SELECT
					 A.WORK_ORD_DATE 
					, ISNULL( SUM(CC.FAULTY_CNT), 0 ) APPEAR_FAULTY_CNT 
					, ISNULL( SUM(B.FAULTY_CNT), 0 ) EDGE_FAULTY_CNT
					, ISNULL( SUM(C.FAULTY_CNT), 0 ) RE_INSP_CNT
					, ISNULL( SUM(CC.FAULTY_CNT), 0 ) +  ISNULL( SUM(B.FAULTY_CNT), 0 ) + ISNULL( SUM(C.FAULTY_CNT), 0 ) FAULT_SUM
					, ISNULL( SUM(APPEAR_OUTPUT_CNT), 0 ) APPEAR_OUTPUT_CNT
					, ISNULL( SUM(CC.FAULTY_CNT), 0 ) +  ISNULL( SUM(B.FAULTY_CNT), 0 ) +  ISNULL( SUM(APPEAR_OUTPUT_CNT), 0 )  + ISNULL( SUM(C.FAULTY_CNT), 0 ) USER_INPUT_INSPCT_CNT
					, ( ISNULL( Sum(CC.FAULTY_CNT), 0 ) + ISNULL( SUM(B.FAULTY_CNT), 0 ) + ISNULL( SUM(C.FAULTY_CNT), 0 ) ) / (  ISNULL( SUM(CC.FAULTY_CNT), 0 ) + ISNULL( SUM(B.FAULTY_CNT), 0 ) + ISNULL( SUM(APPEAR_OUTPUT_CNT), 0 ) ) * 100 FAULT_PERCENT
			   FROM 
					   ( SELECT 
							   WORK_ORD_DATE,							  				 
							   (SUM(OUTPUT_CNT) ) AS APPEAR_OUTPUT_CNT			
							  
						FROM TB_WORK_ORDER_OUTPUT_SUB A
						WHERE WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
						GROUP BY  WORK_ORD_DATE
						) A 

						LEFT OUTER JOIN 
						(SELECT
								X.WORK_ORD_DATE
								, SUM(ISNULL(FAULTY_CNT,0)) FAULTY_CNT						
				
							FROM TB_GOODS_FAULTY_ADM_CODE Z, (SELECT DISTINCT WORK_ORD_NO, MAX(WORK_ORD_DATE) WORK_ORD_DATE FROM TB_WORK_ORDER_OUTPUT_SUB X WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate} GROUP BY WORK_ORD_NO) X
							WHERE 1=1 
							AND X.WORK_ORD_NO = Z.WORK_ORD_NO	
		
			
							GROUP BY X.WORK_ORD_DATE) CC
						ON CC.WORK_ORD_DATE = A.WORK_ORD_DATE
			
						LEFT OUTER JOIN 
			
					   ( SELECT X.WORK_ORD_DATE,							  
							   ISNULL(SUM(FAULTY_CNT),0) FAULTY_CNT
							   
						FROM TB_EDGE_GOODS_FAULTY_ADM_CODE Z , (SELECT DISTINCT WORK_ORD_NO, MAX(WORK_ORD_DATE) WORK_ORD_DATE FROM TB_WORK_ORDER_OUTPUT_SUB X WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate} GROUP BY WORK_ORD_NO) X
						WHERE X.WORK_ORD_NO = Z.WORK_ORD_NO	
						GROUP BY X.WORK_ORD_DATE ) B
			
						ON A.WORK_ORD_DATE = B.WORK_ORD_DATE	
						
						LEFT OUTER JOIN
						(SELECT 
							X.WORK_ORD_DATE							
							, ISNULL(SUM(A.FAULTY_CNT),0) FAULTY_CNT				
						FROM TB_SHIP_INSPECT_ADM B, TB_SHIP_INSPECT_DTL A, (SELECT DISTINCT WORK_ORD_NO, MAX(WORK_ORD_DATE) WORK_ORD_DATE FROM TB_WORK_ORDER_OUTPUT_SUB X WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate} GROUP BY WORK_ORD_NO) X
						WHERE B.WORK_ORD_NO = X.WORK_ORD_NO
						AND A.SHIP_INSP_IDX = B.IDX
						AND RE_INSP_STATUS = '002'
						GROUP BY X.WORK_ORD_DATE) C
						ON A.WORK_ORD_DATE = C.WORK_ORD_DATE					
						
						GROUP BY A.WORK_ORD_DATE
						
				) AA

				LEFT OUTER JOIN 
	
				(SELECT *
					FROM (
						SELECT 
							X.WORK_ORD_DATE
							, MINOR_CD
							, ISNULL(SUM(FAULTY_CNT),0) FAULTY_CNT
						FROM TB_GOODS_FAULTY_ADM_CODE B , (SELECT DISTINCT WORK_ORD_NO, MAX(WORK_ORD_DATE) WORK_ORD_DATE FROM TB_WORK_ORDER_OUTPUT_SUB X WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate} GROUP BY WORK_ORD_NO) X
						WHERE B.WORK_ORD_NO = X.WORK_ORD_NO
						GROUP BY X.WORK_ORD_DATE,MINOR_CD
						
						UNION ALL

						SELECT 
							X.WORK_ORD_DATE
							, '200' AS MINOR_CD 
							, ISNULL(SUM(FAULTY_CNT),0) FAULTY_CNT
						FROM TB_EDGE_GOODS_FAULTY_ADM_CODE B , (SELECT DISTINCT WORK_ORD_NO, MAX(WORK_ORD_DATE) WORK_ORD_DATE FROM TB_WORK_ORDER_OUTPUT_SUB X WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate} GROUP BY WORK_ORD_NO) X
						WHERE B.WORK_ORD_NO = X.WORK_ORD_NO
						AND MINOR_CD < '009'
						GROUP BY X.WORK_ORD_DATE
						
						UNION ALL

						SELECT 
							X.WORK_ORD_DATE
							, A.MINOR_CD
							, ISNULL(SUM(A.FAULTY_CNT),0) FAULTY_CNT				
						FROM TB_SHIP_INSPECT_ADM B, TB_SHIP_INSPECT_DTL A, (SELECT DISTINCT WORK_ORD_NO, MAX(WORK_ORD_DATE) WORK_ORD_DATE FROM TB_WORK_ORDER_OUTPUT_SUB X WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate} GROUP BY WORK_ORD_NO) X
						WHERE B.WORK_ORD_NO = X.WORK_ORD_NO
						AND A.SHIP_INSP_IDX = B.IDX
						AND RE_INSP_STATUS = '002'
						GROUP BY X.WORK_ORD_DATE,MINOR_CD
						
						
						) AS t
					PIVOT(SUM(FAULTY_CNT) FOR MINOR_CD IN (
				${codeList}
					)) AS PVT ) D
	
				ON AA.WORK_ORD_DATE = D.WORK_ORD_DATE
				
				ORDER BY AA.WORK_ORD_DATE

		]]>
	</select>
	<select id="faultyWeekTotalSumListFa2" resultType="HashMap" parameterType="mes.domain.qm.GoodsFaultyAdmVo" >
		SELECT * FROM 
		(
			SELECT
				A.WORK_ORD_DATE 
				, ISNULL( SUM(C.FAULTY_CNT), 0 ) RE_INSP_CNT
				, ISNULL( SUM(CC.FAULTY_CNT), 0 ) +  ISNULL( SUM(B.FAULTY_CNT), 0 ) +  ISNULL( SUM(APPEAR_OUTPUT_CNT), 0 ) USER_INPUT_INSPCT_CNT
				, ISNULL( SUM(APPEAR_OUTPUT_CNT), 0 ) APPEAR_OUTPUT_CNT
				, ISNULL( SUM(CC.FAULTY_CNT), 0 ) +  ISNULL( SUM(B.FAULTY_CNT), 0 ) + ISNULL( SUM(C.FAULTY_CNT), 0 ) FAULT_SUM
				, ISNULL( SUM(CC.FAULTY_CNT), 0 ) APPEAR_FAULTY_CNT 
				, ISNULL( SUM(CC.MATRL_FAULTY_CNT), 0 ) MATRL_FAULTY_CNT
				, ISNULL( SUM(CC.FILM_FAULTY_CNT), 0 ) FILM_FAULTY_CNT
				, ISNULL( SUM(B.FAULTY_CNT), 0 ) EDGE_FAULTY_CNT
				, ( ISNULL( Sum(CC.FAULTY_CNT), 0 ) + ISNULL( SUM(B.FAULTY_CNT), 0 ) + ISNULL( SUM(C.FAULTY_CNT), 0 ) ) / (  ISNULL( SUM(CC.FAULTY_CNT), 0 ) + ISNULL( SUM(B.FAULTY_CNT), 0 ) + ISNULL( SUM(APPEAR_OUTPUT_CNT), 0 ) ) * 100 FAULT_PERCENT
			FROM 
			( 
				SELECT 
					WORK_ORD_DATE,							  				 
					(SUM(OUTPUT_CNT) ) AS APPEAR_OUTPUT_CNT			
				FROM TB_WORK_ORDER_OUTPUT_SUB A
				WHERE WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
				GROUP BY  WORK_ORD_DATE
			) A LEFT OUTER JOIN 
			(
				SELECT
					X.WORK_ORD_DATE
					, SUM(ISNULL(FAULTY_CNT,0)) FAULTY_CNT		
					, SUM(IIF(Z.MAJOR_CD = '001' OR Z.MAJOR_CD = '004',ISNULL(FAULTY_CNT,0), 0)) MATRL_FAULTY_CNT	
					, SUM(IIF(Z.MAJOR_CD = '002' OR Z.MAJOR_CD = '005',ISNULL(FAULTY_CNT,0), 0)) FILM_FAULTY_CNT	
				FROM TB_GOODS_FAULTY_ADM_CODE Z, 
					(
						SELECT DISTINCT 
							WORK_ORD_NO, 
							MAX(WORK_ORD_DATE) WORK_ORD_DATE 
						FROM TB_WORK_ORDER_OUTPUT_SUB X 
						WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate} 
						GROUP BY WORK_ORD_NO
					) X
				WHERE 1=1 
					AND X.WORK_ORD_NO = Z.WORK_ORD_NO	
				GROUP BY X.WORK_ORD_DATE
			) CC
			ON CC.WORK_ORD_DATE = A.WORK_ORD_DATE LEFT OUTER JOIN 
			( 
				SELECT 
					X.WORK_ORD_DATE							  
					, ISNULL(SUM(FAULTY_CNT),0) FAULTY_CNT			
					, SUM(IIF(Z.MAJOR_CD = '001' OR Z.MAJOR_CD = '004',ISNULL(FAULTY_CNT,0), 0)) MATRL_FAULTY_CNT	
					, SUM(IIF(Z.MAJOR_CD = '002' OR Z.MAJOR_CD = '005',ISNULL(FAULTY_CNT,0), 0)) FILM_FAULTY_CNT		   
				FROM 
					TB_EDGE_GOODS_FAULTY_ADM_CODE Z, 
					(
						SELECT DISTINCT 
							WORK_ORD_NO, 
							MAX(WORK_ORD_DATE) WORK_ORD_DATE 
						FROM TB_WORK_ORDER_OUTPUT_SUB X 
						WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate} 
						GROUP BY WORK_ORD_NO
					) X
				WHERE X.WORK_ORD_NO = Z.WORK_ORD_NO	
				GROUP BY X.WORK_ORD_DATE 
			) B
			ON A.WORK_ORD_DATE = B.WORK_ORD_DATE LEFT OUTER JOIN
			(
				SELECT 
					X.WORK_ORD_DATE							
					, ISNULL(SUM(A.FAULTY_CNT),0) FAULTY_CNT				
				FROM TB_SHIP_INSPECT_ADM B, TB_SHIP_INSPECT_DTL A, (SELECT DISTINCT WORK_ORD_NO, MAX(WORK_ORD_DATE) WORK_ORD_DATE FROM TB_WORK_ORDER_OUTPUT_SUB X WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate} GROUP BY WORK_ORD_NO) X
				WHERE B.WORK_ORD_NO = X.WORK_ORD_NO
					AND A.SHIP_INSP_IDX = B.IDX
					AND RE_INSP_STATUS = '002'
				GROUP BY X.WORK_ORD_DATE
			) C
			ON A.WORK_ORD_DATE = C.WORK_ORD_DATE					
			GROUP BY A.WORK_ORD_DATE	
		) AA LEFT OUTER JOIN 
		(
			SELECT
			*
		FROM
		(
		
			SELECT
				WORK_ORD_DATE
				, CHANGE_MINOR_CD AS MINOR_CD
				, SUM(FAULTY_CNT) AS FAULTY_CNT
			FROM (
				SELECT 							
					WORK_ORD_DATE
					, (SELECT MIN(BASE_CD) FROM TB_SYSTEM_COMMON_CODE X WHERE  X.BASE_GROUP_CD = '068' AND X.BASE_CD_NM =  MINOR_NM AND X.ETC1 = AA.CHANGE_MAJOR_CD) AS CHANGE_MINOR_CD
					, AA.MINOR_NM
					, AA.CHANGE_MAJOR_CD
					, AA.MINOR_CD
					,AA.MAJOR_CD
					, FAULTY_CNT
				FROM
				(
					SELECT		
						X.WORK_ORD_DATE
						, MINOR_CD
						, (SELECT BASE_CD_NM FROM TB_SYSTEM_COMMON_CODE X WHERE  X.BASE_GROUP_CD = '068' AND X.BASE_CD = MINOR_CD) AS MINOR_NM
						, MAJOR_CD
						, ( CASE
							WHEN MAJOR_CD = '001' THEN '001'
							WHEN MAJOR_CD = '002' THEN '002'
							WHEN MAJOR_CD = '004' THEN '001'
							WHEN MAJOR_CD = '005' THEN '002'
							END
						) AS CHANGE_MAJOR_CD
						, SUM(FAULTY_CNT) AS FAULTY_CNT
				FROM TB_GOODS_FAULTY_ADM_CODE Z,  
				(SELECT DISTINCT WORK_ORD_NO, MAX(WORK_ORD_DATE) WORK_ORD_DATE FROM TB_WORK_ORDER_OUTPUT_SUB X WHERE 1=1 AND X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate} GROUP BY WORK_ORD_NO) X
					WHERE 1=1								
					AND X.WORK_ORD_NO = Z.WORK_ORD_NO	             
					GROUP BY
						X.WORK_ORD_DATE, MINOR_CD, MAJOR_CD
				) AA
		
			) BB
			GROUP BY WORK_ORD_DATE,  CHANGE_MINOR_CD
		
			UNION ALL
		
			SELECT 
				X.WORK_ORD_DATE
				, '200' AS MINOR_CD
				, ISNULL(SUM(FAULTY_CNT),0) FAULTY_CNT
			FROM 
				TB_EDGE_GOODS_FAULTY_ADM_CODE B , 
				(
					SELECT DISTINCT 
						WORK_ORD_NO, 
						MAX(WORK_ORD_DATE) WORK_ORD_DATE 
					FROM TB_WORK_ORDER_OUTPUT_SUB X WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate} GROUP BY WORK_ORD_NO
				) X,
				TB_SYSTEM_COMMON_CODE Y
			WHERE B.WORK_ORD_NO = X.WORK_ORD_NO
				AND B.MINOR_CD = Y.BASE_CD
				AND Y.BASE_GROUP_CD = '088'
			GROUP BY X.WORK_ORD_DATE, Y.BASE_CD_NM
			
			UNION ALL

			SELECT 
				X.WORK_ORD_DATE
				, A.MINOR_CD
				, ISNULL(SUM(A.FAULTY_CNT),0) FAULTY_CNT				
			FROM TB_SHIP_INSPECT_ADM B, TB_SHIP_INSPECT_DTL A, (SELECT DISTINCT WORK_ORD_NO, MAX(WORK_ORD_DATE) WORK_ORD_DATE FROM TB_WORK_ORDER_OUTPUT_SUB X WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate} GROUP BY WORK_ORD_NO) X
			WHERE B.WORK_ORD_NO = X.WORK_ORD_NO
				AND A.SHIP_INSP_IDX = B.IDX
				AND RE_INSP_STATUS = '002'
			GROUP BY X.WORK_ORD_DATE,MINOR_CD,MAJOR_CD
		) AS t
		PIVOT(SUM(FAULTY_CNT) FOR MINOR_CD IN (
			${codeList}
		)) AS PVT ) D
			
		ON AA.WORK_ORD_DATE = D.WORK_ORD_DATE
						
		ORDER BY AA.WORK_ORD_DATE
	</select>
	
	<!--(최종검사집계) 날짜로 설비별/주야별/제품별 리스트 조회-->
	<select id="faultyEquipGoodsTotalListFa" resultType="HashMap" parameterType="mes.domain.qm.GoodsFaultyAdmVo" >

<!-- 		SELECT
            *
         FROM (
         
            SELECT
               B.EQUIP_CD
               , SUM(B.APPEAR_OUTPUT_CNT) AS APPEAR_OUTPUT_CNT
               , SUM(B.EDGE_FAULTY_CNT) AS EDGE_FAULTY_CNT
               , SUM(B.FAULT_PERCENT) AS FAULT_PERCENT
               , SUM(B.FAULT_SUM) AS FAULT_SUM
               , SUM(B.USER_INPUT_INSPCT_CNT) AS USER_INPUT_INSPCT_CNT
               , GOODS_CD
               , (SELECT GOODS_NM FROM TB_GOODS_CODE_ADM X WHERE X.GOODS_CD = B.GOODS_CD) GOODS_NM 
               , GUBUN
   
            FROM (
   
               SELECT
                  AA.EQUIP_CD
                  , AA.APPEAR_INSPCT_DATE
                  , SUM(AA.E_FAULTY_CNT) AS EDGE_FAULTY_CNT
                  , SUM(AA.APPEAR_FAULTY_CNT) + SUM(E_FAULTY_CNT) AS FAULT_SUM
                  , SUM(AA.APPEAR_OUTPUT_CNT) AS APPEAR_OUTPUT_CNT
                  , SUM(AA.APPEAR_FAULTY_CNT) + SUM(E_FAULTY_CNT) + SUM(APPEAR_OUTPUT_CNT) AS USER_INPUT_INSPCT_CNT
                  , CONVERT(NUMERIC(5,2), (CONVERT(FLOAT, (SUM(AA.APPEAR_FAULTY_CNT) + SUM(E_FAULTY_CNT)), 0 )) / CONVERT(FLOAT, (SUM(AA.APPEAR_FAULTY_CNT) + SUM(E_FAULTY_CNT) + SUM(APPEAR_OUTPUT_CNT)), 0) * 100) AS FAULT_PERCENT
                  , AA.GUBUN
                  , AA.GOODS_CD
               
               FROM
               (
                  SELECT
                     A.EQUIP_CD
                     , A.WORK_ORD_NO
                     , A.APPEAR_INSPCT_DATE
                     , ISNULL(A.APPEAR_FAULTY_CNT,0) AS APPEAR_FAULTY_CNT
                     , ISNULL(A.APPEAR_OUTPUT_CNT,0) AS APPEAR_OUTPUT_CNT
                     , ISNULL(A.USER_INPUT_INSPCT_CNT,0) AS USER_INPUT_INSPCT_CNT
                     , ISNULL(B.E_FAULTY_CNT,0) AS E_FAULTY_CNT
                     , GUBUN
                     , A.GOODS_CD
                  FROM 
                  (
                     SELECT
                        B.EQUIP_CD
                        , A.WORK_ORD_NO
                        , A.APPEAR_INSPCT_DATE
                        , GUBUN
                        , SUM(A.APPEAR_FAULTY_CNT) APPEAR_FAULTY_CNT
                        , SUM(A.APPEAR_OUTPUT_CNT) APPEAR_OUTPUT_CNT
                        , SUM(A.USER_INPUT_INSPCT_CNT) USER_INPUT_INSPCT_CNT
                        , B.GOODS_CD
                     FROM TB_WORK_ORDER_OUTPUT_SUB A, TB_WORK_ORDER B
                     WHERE A.APPEAR_INSPCT_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
                     AND A.WORK_ORD_NO = B.WORK_ORD_NO
                     GROUP BY A.WORK_ORD_NO, A.APPEAR_INSPCT_DATE, B.EQUIP_CD, GUBUN, B.GOODS_CD
                  ) A 
                  LEFT OUTER JOIN 
                  (
                     SELECT
                        B.EQUIP_CD
                        , A.WORK_ORD_NO
                        , A.FAULTY_REG_DATE
                        , DAY_NIGHT_CD
                        , SUM(A.FAULTY_CNT) E_FAULTY_CNT
                        , B.GOODS_CD
                     FROM TB_EDGE_GOODS_FAULTY_ADM_CODE A, TB_WORK_ORDER B
                     WHERE A.FAULTY_REG_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
                     AND A.WORK_ORD_NO = B.WORK_ORD_NO
                     GROUP BY A.WORK_ORD_NO, A.FAULTY_REG_DATE, B.EQUIP_CD, DAY_NIGHT_CD, B.GOODS_CD
                  ) B
                  ON A.EQUIP_CD = B.EQUIP_CD
                  AND A.WORK_ORD_NO = B.WORK_ORD_NO
                  AND A.APPEAR_INSPCT_DATE = B.FAULTY_REG_DATE
                  AND A.GOODS_CD = B.GOODS_CD
                  AND ( A.GUBUN = B.DAY_NIGHT_CD  OR  B.DAY_NIGHT_CD IS NULL )
                  
               ) AA
               GROUP BY APPEAR_INSPCT_DATE, AA.EQUIP_CD, AA.GUBUN, AA.GOODS_CD
            ) AS B
            GROUP BY
               B.EQUIP_CD, GUBUN , GOODS_CD
         ) AS AA
         
         LEFT OUTER JOIN
         
         (
            SELECT
               *
            FROM
            (
               SELECT
                  C.EQUIP_CD
                  , H.EQUIP_NM
                  ,C.GOODS_CD
                  ,C.ORD_GUBUN
                  , MINOR_CD
                  , ISNULL(SUM(FAULTY_CNT),0) FAULTY_CNT
               FROM   TB_GOODS_FAULTY_ADM_CODE B, TB_WORK_ORDER_OUTPUT_SUB A, TB_WORK_ORDER C, TB_EQUIP_CODE_ADM H
               WHERE   B.FAULTY_REG_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
               AND      B.ORD_LOT_NO =  A.ORD_LOT_NO
               AND      A.WORK_ORD_NO = C.WORK_ORD_NO
               AND      C.EQUIP_CD = H.EQUIP_CD
               GROUP BY C.EQUIP_CD, H.EQUIP_NM, MINOR_CD,C.GOODS_CD,C.ORD_GUBUN
            ) AS t
            PIVOT(SUM(FAULTY_CNT) FOR MINOR_CD IN (
              ${codeList}
            )) AS PVT
         ) BB
         ON AA.EQUIP_CD = BB.EQUIP_CD
         AND AA.GOODS_CD = BB.GOODS_CD
         AND AA.GUBUN = BB.ORD_GUBUN
         
         ORDER BY GUBUN,BB.EQUIP_NM -->
         
         <!-- 
			SELECT
            *
         FROM (
        	 SELECT
        	   B.EQUIP_CD
               , ISNULL( SUM(B.APPEAR_OUTPUT_CNT), 0 ) AS APPEAR_OUTPUT_CNT
               , ISNULL( SUM(B.EDGE_FAULTY_CNT), 0 ) AS EDGE_FAULTY_CNT
               , ISNULL( SUM(B.FAULT_SUM), 0 ) / ISNULL( SUM(B.USER_INPUT_INSPCT_CNT), 0 ) * 100 AS FAULT_PERCENT
               , ISNULL( SUM(B.FAULT_SUM), 0 ) AS FAULT_SUM
               , ISNULL( SUM(B.USER_INPUT_INSPCT_CNT), 0 ) AS USER_INPUT_INSPCT_CNT
               , GOODS_CD
               , (SELECT GOODS_NM FROM TB_GOODS_CODE_ADM X WHERE X.GOODS_CD = B.GOODS_CD) GOODS_NM 
               , GUBUN
			   , ISNULL( SUM(FAULTY_CNT), 0 ) FAULTY_CNT
   
            FROM (
   
               SELECT
                   AA.EQUIP_CD
                  , AA.APPEAR_INSPCT_DATE
                  , SUM(AA.E_FAULTY_CNT) AS EDGE_FAULTY_CNT
                  , SUM(AA.APPEAR_FAULTY_CNT) + SUM(E_FAULTY_CNT) + SUM(AA.FAULTY_CNT) AS FAULT_SUM
                  , SUM(AA.APPEAR_OUTPUT_CNT) AS APPEAR_OUTPUT_CNT
                  , SUM(AA.APPEAR_FAULTY_CNT) + SUM(E_FAULTY_CNT) + SUM(APPEAR_OUTPUT_CNT) + SUM(AA.FAULTY_CNT) AS USER_INPUT_INSPCT_CNT
                  , AA.GUBUN
                  , AA.GOODS_CD
				  , SUM(AA.FAULTY_CNT) FAULTY_CNT
                
               FROM
               (
                  SELECT
                     A.EQUIP_CD
                     , A.WORK_ORD_NO
                     , A.APPEAR_INSPCT_DATE
                     , ISNULL(A.APPEAR_FAULTY_CNT,0) AS APPEAR_FAULTY_CNT
                     , ISNULL(A.APPEAR_OUTPUT_CNT,0) AS APPEAR_OUTPUT_CNT
                     , ISNULL(A.USER_INPUT_INSPCT_CNT,0) AS USER_INPUT_INSPCT_CNT
                     , ISNULL(B.E_FAULTY_CNT,0) AS E_FAULTY_CNT
					 , ISNULL(C.FAULTY_CNT,0) AS FAULTY_CNT
                     , GUBUN
                     , A.GOODS_CD
                  FROM 
                  (
                     SELECT
                        B.EQUIP_CD
                        , A.WORK_ORD_NO
                        , A.APPEAR_INSPCT_DATE
                        , GUBUN
                        , SUM(A.APPEAR_FAULTY_CNT) APPEAR_FAULTY_CNT
                        
                       , SUM(A.APPEAR_OUTPUT_CNT) APPEAR_OUTPUT_CNT
                        , SUM(A.USER_INPUT_INSPCT_CNT) USER_INPUT_INSPCT_CNT
                         ,(SELECT SUM(OUTPUT_CNT) FROM TB_WORK_ORDER_OUTPUT_SUB X 
							WHERE X.WORK_ORD_NO = A.WORK_ORD_NO GROUP BY WORK_ORD_NO) AS APPEAR_OUTPUT_CNT
						 ,((SELECT SUM(OUTPUT_CNT) FROM TB_WORK_ORDER_OUTPUT_SUB X 
							WHERE X.WORK_ORD_NO = A.WORK_ORD_NO GROUP BY WORK_ORD_NO) + ISNULL(SUM(A.APPEAR_FAULTY_CNT),0)) AS USER_INPUT_INSPCT_CNT
                        , B.GOODS_CD
                     FROM TB_WORK_ORDER_OUTPUT_SUB A, TB_WORK_ORDER B
                     WHERE A.APPEAR_INSPCT_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
                     AND A.WORK_ORD_NO = B.WORK_ORD_NO
                     GROUP BY A.WORK_ORD_NO, A.APPEAR_INSPCT_DATE, B.EQUIP_CD, GUBUN, B.GOODS_CD
                  ) A 
                  LEFT OUTER JOIN 
                  (
                     SELECT
                        B.EQUIP_CD
                        , A.WORK_ORD_NO
                        , A.FAULTY_REG_DATE
                        , DAY_NIGHT_CD
                        , SUM(A.FAULTY_CNT) E_FAULTY_CNT
                        , B.GOODS_CD
                     FROM TB_EDGE_GOODS_FAULTY_ADM_CODE A, TB_WORK_ORDER B
                     WHERE A.FAULTY_REG_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
                     AND A.WORK_ORD_NO = B.WORK_ORD_NO
                     GROUP BY A.WORK_ORD_NO, A.FAULTY_REG_DATE, B.EQUIP_CD, DAY_NIGHT_CD, B.GOODS_CD
                  ) B
                  ON A.EQUIP_CD = B.EQUIP_CD
                  AND A.WORK_ORD_NO = B.WORK_ORD_NO
                  AND A.APPEAR_INSPCT_DATE = B.FAULTY_REG_DATE
                  AND A.GOODS_CD = B.GOODS_CD
                  AND ( A.GUBUN = B.DAY_NIGHT_CD  OR  B.DAY_NIGHT_CD IS NULL )
				  
				  LEFT OUTER JOIN

				 (
                     SELECT
                        A.WORK_ORD_NO
                        , A.INSP_DATE
                        , DAY_NIGHT_CD
                        , SUM(A.FAULTY_CNT) FAULTY_CNT
                  
                     FROM TB_SHIP_INSPECT_ADM A
                     WHERE A.INSP_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
                     AND RE_INSP_STATUS = '002'
                     GROUP BY A.WORK_ORD_NO, A.INSP_DATE, DAY_NIGHT_CD
                  ) C
                   ON  C.WORK_ORD_NO = A.WORK_ORD_NO
                  AND C.INSP_DATE = A.APPEAR_INSPCT_DATE                 
                  AND C.DAY_NIGHT_CD = A.GUBUN
               ) AA
               GROUP BY APPEAR_INSPCT_DATE, AA.EQUIP_CD, AA.GUBUN, AA.GOODS_CD
            ) AS B
            GROUP BY
               B.EQUIP_CD, GUBUN , GOODS_CD
         ) AS AA
         
         LEFT OUTER JOIN
         
         (
            SELECT
               *
            FROM
            (
               SELECT
                  C.EQUIP_CD
                  , H.EQUIP_NM
                  ,C.GOODS_CD
                  ,B.DAY_NIGHT_CD
                  , MINOR_CD
                  , FAULTY_CNT
               FROM   TB_GOODS_FAULTY_ADM_CODE B, TB_WORK_ORDER_OUTPUT_SUB A, TB_WORK_ORDER C, TB_EQUIP_CODE_ADM H
               WHERE   B.FAULTY_REG_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
               AND      B.ORD_LOT_NO =  A.ORD_LOT_NO
               AND      A.WORK_ORD_NO = C.WORK_ORD_NO
               AND      C.EQUIP_CD = H.EQUIP_CD
               AND		A.GUBUN = B.DAY_NIGHT_CD	
               GROUP BY C.EQUIP_CD, H.EQUIP_NM, MINOR_CD,C.GOODS_CD,B.DAY_NIGHT_CD,FAULTY_CNT
            ) AS t
            PIVOT(SUM(FAULTY_CNT) FOR MINOR_CD IN (
			${codeList}

            )) AS PVT
         ) BB
         ON AA.EQUIP_CD = BB.EQUIP_CD
         AND AA.GOODS_CD = BB.GOODS_CD
         AND AA.GUBUN = BB.DAY_NIGHT_CD
         
         ORDER BY GUBUN,BB.EQUIP_NM -->
		<![CDATA[	
			
		SELECT
            *
         FROM (
        	 SELECT
        	   B.EQUIP_CD
     
			   ,(SELECT EQUIP_NM FROM TB_EQUIP_CODE_ADM  WHERE EQUIP_CD = B.EQUIP_CD) EQUIP_NM
               , ISNULL( SUM(B.APPEAR_OUTPUT_CNT), 0 ) AS APPEAR_OUTPUT_CNT
               , ISNULL( SUM(B.EDGE_FAULTY_CNT), 0 ) AS EDGE_FAULTY_CNT
               , ISNULL( SUM(B.FAULT_SUM), 0 ) / ISNULL( SUM(B.USER_INPUT_INSPCT_CNT), 0 ) * 100 AS FAULT_PERCENT
               , ISNULL( SUM(B.FAULT_SUM), 0 ) AS FAULT_SUM
               , ISNULL( SUM(B.USER_INPUT_INSPCT_CNT), 0 ) AS USER_INPUT_INSPCT_CNT
               , GOODS_CD
               , (SELECT GOODS_NM FROM TB_GOODS_CODE_ADM X WHERE X.GOODS_CD = B.GOODS_CD) GOODS_NM 
               , GUBUN
			   , ISNULL( SUM(FAULTY_CNT), 0 ) FAULTY_CNT
   
            FROM (
   
               SELECT
                   AA.EQUIP_CD
                  , AA.GUBUN
                  , AA.GOODS_CD
                  , SUM(AA.E_FAULTY_CNT) AS EDGE_FAULTY_CNT
                  , SUM(AA.APPEAR_FAULTY_CNT) + SUM(E_FAULTY_CNT) + SUM(AA.FAULTY_CNT) AS FAULT_SUM
                  , SUM(AA.APPEAR_OUTPUT_CNT) AS APPEAR_OUTPUT_CNT
                  , SUM(AA.APPEAR_FAULTY_CNT) + SUM(E_FAULTY_CNT) + SUM(APPEAR_OUTPUT_CNT) + SUM(AA.FAULTY_CNT) AS USER_INPUT_INSPCT_CNT                  
				  , SUM(AA.FAULTY_CNT) FAULTY_CNT
                
               FROM
               (
                  SELECT
                     A.EQUIP_CD
                     , A.WORK_ORD_NO                     
                     , ISNULL(CC.FAULTY_CNT,0) AS APPEAR_FAULTY_CNT
                     , ISNULL(A.APPEAR_OUTPUT_CNT,0) AS APPEAR_OUTPUT_CNT
                     , ISNULL(CC.FAULTY_CNT,0) + ISNULL(A.APPEAR_OUTPUT_CNT,0) AS USER_INPUT_INSPCT_CNT
                     , ISNULL(B.E_FAULTY_CNT,0) AS E_FAULTY_CNT
					 , ISNULL(C.FAULTY_CNT,0) AS FAULTY_CNT
                     , A.GUBUN
                     , A.GOODS_CD
                  FROM 
                  (
                     SELECT
                        B.EQUIP_CD
                        , A.WORK_ORD_NO                      
                        , GUBUN                       
                        , SUM(A.OUTPUT_CNT) AS APPEAR_OUTPUT_CNT						 
                        , B.GOODS_CD
                     FROM  (SELECT DISTINCT SUM(OUTPUT_CNT) OUTPUT_CNT,WORK_ORD_NO,GUBUN FROM TB_WORK_ORDER_OUTPUT_SUB X WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate} GROUP BY WORK_ORD_NO,GUBUN) A, TB_WORK_ORDER B
                     WHERE A.WORK_ORD_NO = B.WORK_ORD_NO
                     GROUP BY A.WORK_ORD_NO, B.EQUIP_CD, GUBUN, B.GOODS_CD
                  ) A 
				  LEFT OUTER JOIN
				(SELECT
						X.WORK_ORD_NO
						, SUM(ISNULL(FAULTY_CNT,0)) FAULTY_CNT						
						,GUBUN
					FROM TB_GOODS_FAULTY_ADM_CODE Z, (SELECT DISTINCT WORK_ORD_NO,GUBUN FROM TB_WORK_ORDER_OUTPUT_SUB X WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}) X
					WHERE 1=1 
					AND X.WORK_ORD_NO = Z.WORK_ORD_NO				
				
					GROUP BY X.WORK_ORD_NO,GUBUN) CC
				ON CC.WORK_ORD_NO = A.WORK_ORD_NO
				AND CC.GUBUN = A.GUBUN
			

                  LEFT OUTER JOIN 
                  (
                     SELECT                      
                         X.WORK_ORD_NO
                        , SUM(A.FAULTY_CNT) E_FAULTY_CNT
                       ,GUBUN
                     FROM TB_EDGE_GOODS_FAULTY_ADM_CODE A, (SELECT DISTINCT WORK_ORD_NO,GUBUN FROM TB_WORK_ORDER_OUTPUT_SUB X WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}) X
                     WHERE A.WORK_ORD_NO = X.WORK_ORD_NO
					
                     GROUP BY X.WORK_ORD_NO,GUBUN
                  ) B
                  ON A.WORK_ORD_NO = B.WORK_ORD_NO                
				 AND B.GUBUN = A.GUBUN
				  LEFT OUTER JOIN

				 (
                     SELECT
                        X.WORK_ORD_NO                        
                        , SUM(A.FAULTY_CNT) FAULTY_CNT
						,GUBUN
                     FROM TB_SHIP_INSPECT_ADM A, (SELECT DISTINCT WORK_ORD_NO,GUBUN FROM TB_WORK_ORDER_OUTPUT_SUB X WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}) X
                     WHERE A.WORK_ORD_NO = X.WORK_ORD_NO
                     AND RE_INSP_STATUS = '002'
					
                     GROUP BY X.WORK_ORD_NO,GUBUN
                  ) C
                   ON  C.WORK_ORD_NO = A.WORK_ORD_NO    
				   AND A.GUBUN = C.GUBUN
				   
               ) AA
               GROUP BY AA.EQUIP_CD, AA.GUBUN, AA.GOODS_CD
            ) AS B
            GROUP BY
               B.EQUIP_CD, GUBUN , GOODS_CD
         ) AS AA
         
         LEFT OUTER JOIN
         
         (
            SELECT
               *
            FROM
            (

						SELECT 
							
							 MINOR_CD
							, ISNULL(SUM(FAULTY_CNT),0) FAULTY_CNT
							,GOODS_CD						
							,EQUIP_CD							
							,GUBUN
						FROM TB_GOODS_FAULTY_ADM_CODE B,  TB_WORK_ORDER E, (SELECT WORK_ORD_NO,GUBUN FROM TB_WORK_ORDER_OUTPUT_SUB X WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate} GROUP BY WORK_ORD_NO,GUBUN) X
						WHERE B.WORK_ORD_NO = X.WORK_ORD_NO					
						AND E.WORK_ORD_NO = X.WORK_ORD_NO
					
						GROUP BY MINOR_CD,GOODS_CD,EQUIP_CD,GUBUN

						UNION ALL

						SELECT 
							
							 '200' MINOR_CD
							, ISNULL(SUM(FAULTY_CNT),0) FAULTY_CNT
							,GOODS_CD							
							,EQUIP_CD							
							,GUBUN
						FROM TB_EDGE_GOODS_FAULTY_ADM_CODE B,  TB_WORK_ORDER E, (SELECT WORK_ORD_NO,GUBUN FROM TB_WORK_ORDER_OUTPUT_SUB X WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate} GROUP BY WORK_ORD_NO,GUBUN) X
						WHERE B.WORK_ORD_NO = X.WORK_ORD_NO					
						AND E.WORK_ORD_NO = X.WORK_ORD_NO
						
						AND MINOR_CD < '009'
						GROUP BY GOODS_CD,EQUIP_CD,GUBUN

						UNION ALL

						SELECT 
							
							 A.MINOR_CD
							, ISNULL(SUM(A.FAULTY_CNT),0) FAULTY_CNT
							,GOODS_CD							
							,EQUIP_CD							
							,GUBUN
						FROM TB_SHIP_INSPECT_ADM B, TB_SHIP_INSPECT_DTL A,  TB_WORK_ORDER E, (SELECT WORK_ORD_NO,GUBUN FROM TB_WORK_ORDER_OUTPUT_SUB X WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate} GROUP BY WORK_ORD_NO,GUBUN) X
						WHERE B.WORK_ORD_NO = X.WORK_ORD_NO					
						AND E.WORK_ORD_NO = X.WORK_ORD_NO
						AND A.SHIP_INSP_IDX = B.IDX
				
						AND RE_INSP_STATUS = '002'
						GROUP BY A.MINOR_CD,GOODS_CD,EQUIP_CD,GUBUN
              
            ) AS t
            PIVOT(SUM(FAULTY_CNT) FOR MINOR_CD IN (
			${codeList}

            )) AS PVT
         ) BB
         ON AA.EQUIP_CD = BB.EQUIP_CD
         AND AA.GOODS_CD = BB.GOODS_CD
         AND AA.GUBUN = BB.GUBUN
      


		]]>
			



	</select>
	
	<!--생산검사집계(통합) - 설비별(주야/제품) 리스트 조회-->
	<select id="faultyEquipGoodsTotalSumListFa" resultType="HashMap" parameterType="mes.domain.qm.GoodsFaultyAdmVo" >
	<![CDATA[
		SELECT * FROM 
		(
			SELECT
				A.EQUIP_CD
				, (SELECT EQUIP_NM FROM TB_EQUIP_CODE_ADM X WHERE X.EQUIP_CD = A.EQUIP_CD) EQUIP_NM
				, A.GOODS_CD
				, (SELECT GOODS_NM FROM TB_GOODS_CODE_ADM X WHERE X.GOODS_CD = A.GOODS_CD) GOODS_NM
				, A.ORD_GUBUN AS GUBUN
				, SUM(A.USER_INPUT_INSPCT_CNT) USER_INPUT_INSPCT_CNT
				, SUM(A.APPEAR_OUTPUT_CNT) APPEAR_OUTPUT_CNT
				, SUM(A.FAULT_SUM) FAULT_SUM
				, SUM(A.APPEAR_FAULTY_CNT) APPEAR_FAULTY_CNT
				, SUM(A.MATRL_FAULTY_CNT) MATRL_FAULTY_CNT
				, SUM(A.FILM_FAULTY_CNT) FILM_FAULTY_CNT
				, SUM(A.EDGE_FAULTY_CNT) EDGE_FAULTY_CNT
				, ( ISNULL( SUM(A.FAULT_SUM), 0 ) /  SUM(A.USER_INPUT_INSPCT_CNT)) * 100 FAULT_PERCENT
				, SUM(A.FAULTY_CNT) AS FAULTY_CNT
			FROM 
			(
				SELECT
					A.EQUIP_CD
					, (SELECT EQUIP_NM FROM TB_EQUIP_CODE_ADM X WHERE X.EQUIP_CD = A.EQUIP_CD) EQUIP_NM
					, A.GOODS_CD
					, (SELECT GOODS_NM FROM TB_GOODS_CODE_ADM X WHERE X.GOODS_CD = A.GOODS_CD) GOODS_NM
					, ORD_GUBUN
					, ISNULL( SUM(CC.FAULTY_CNT), 0 ) + ISNULL( SUM(B.FAULTY_CNT), 0 ) + ISNULL( SUM(APPEAR_OUTPUT_CNT), 0 ) USER_INPUT_INSPCT_CNT
					, ISNULL( SUM(APPEAR_OUTPUT_CNT), 0 ) APPEAR_OUTPUT_CNT
					, ISNULL( SUM(CC.FAULTY_CNT), 0 ) + ISNULL( SUM(B.FAULTY_CNT), 0 ) + ISNULL(C.FAULTY_CNT,0) FAULT_SUM
					, ISNULL( SUM(CC.FAULTY_CNT), 0 ) APPEAR_FAULTY_CNT 
					, ISNULL( SUM(CC.MATRL_FAULTY_CNT), 0 ) MATRL_FAULTY_CNT
					, ISNULL( SUM(CC.FILM_FAULTY_CNT), 0 ) FILM_FAULTY_CNT
					, ISNULL( SUM(B.FAULTY_CNT), 0 ) EDGE_FAULTY_CNT
					, ( ISNULL( Sum(CC.FAULTY_CNT), 0 ) + ISNULL( SUM(B.FAULTY_CNT), 0 ) ) / (  ISNULL( SUM(CC.FAULTY_CNT), 0 ) + ISNULL( SUM(B.FAULTY_CNT), 0 ) + ISNULL( SUM(APPEAR_OUTPUT_CNT), 0 ) ) * 100 FAULT_PERCENT
					, ISNULL(C.FAULTY_CNT,0) AS FAULTY_CNT
				FROM 
				( 
					SELECT 
						A.WORK_ORD_NO,
						B.EQUIP_CD,
						B.GOODS_CD,
						B.ORD_GUBUN,
						(SUM(A.OUTPUT_CNT) ) AS APPEAR_OUTPUT_CNT			
					FROM TB_WORK_ORDER_OUTPUT_SUB A, TB_WORK_ORDER B
					WHERE 
						WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
						AND A.WORK_ORD_NO = B.WORK_ORD_NO
					GROUP BY A.WORK_ORD_NO, B.EQUIP_CD, B.GOODS_CD, B.ORD_GUBUN
				) A LEFT OUTER JOIN 
				(
					SELECT
						X.WORK_ORD_NO
						, SUM(ISNULL(FAULTY_CNT,0)) FAULTY_CNT		
						, SUM(IIF(Z.MAJOR_CD = '001' OR Z.MAJOR_CD = '004',ISNULL(FAULTY_CNT,0), 0)) MATRL_FAULTY_CNT	
						, SUM(IIF(Z.MAJOR_CD = '002' OR Z.MAJOR_CD = '005',ISNULL(FAULTY_CNT,0), 0)) FILM_FAULTY_CNT	
					FROM TB_GOODS_FAULTY_ADM_CODE Z, 
						(
							SELECT DISTINCT 
								WORK_ORD_NO
							FROM TB_WORK_ORDER_OUTPUT_SUB X 
							WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
						) X
					WHERE 1=1 
						AND X.WORK_ORD_NO = Z.WORK_ORD_NO	
					GROUP BY X.WORK_ORD_NO
				) CC
				ON CC.WORK_ORD_NO = A.WORK_ORD_NO LEFT OUTER JOIN 
				( 
					SELECT 
						X.WORK_ORD_NO							  
						, ISNULL(SUM(FAULTY_CNT),0) FAULTY_CNT			
						, SUM(IIF(Z.MAJOR_CD = '001' OR Z.MAJOR_CD = '004',ISNULL(FAULTY_CNT,0), 0)) MATRL_FAULTY_CNT	
						, SUM(IIF(Z.MAJOR_CD = '002' OR Z.MAJOR_CD = '005',ISNULL(FAULTY_CNT,0), 0)) FILM_FAULTY_CNT		   
					FROM 
						TB_EDGE_GOODS_FAULTY_ADM_CODE Z, 
						(
							SELECT DISTINCT 
								WORK_ORD_NO
							FROM TB_WORK_ORDER_OUTPUT_SUB X 
							WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
							GROUP BY WORK_ORD_NO
						) X
					WHERE X.WORK_ORD_NO = Z.WORK_ORD_NO	
					GROUP BY X.WORK_ORD_NO 
				) B
				ON A.WORK_ORD_NO = B.WORK_ORD_NO LEFT OUTER JOIN
				(
					SELECT
						X.WORK_ORD_NO                        
						, SUM(A.FAULTY_CNT) FAULTY_CNT        
					FROM TB_SHIP_INSPECT_ADM A, (SELECT DISTINCT WORK_ORD_NO FROM TB_WORK_ORDER_OUTPUT_SUB X WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}) X
					WHERE A.WORK_ORD_NO = X.WORK_ORD_NO
					AND RE_INSP_STATUS = '002'
					GROUP BY X.WORK_ORD_NO
				) C
				ON A.WORK_ORD_NO = C.WORK_ORD_NO 
				GROUP BY A.EQUIP_CD, A.GOODS_CD, A.ORD_GUBUN, c.FAULTY_CNT
			) A
			WHERE 1=1
			GROUP BY A.EQUIP_CD, A.GOODS_CD, A.ORD_GUBUN
		) AA LEFT OUTER JOIN 
		(
			SELECT
			*
		FROM
		(
			SELECT
				EQUIP_CD
				, GOODS_CD
				, ORD_GUBUN
				, CHANGE_MINOR_CD AS MINOR_CD
				, SUM(FAULTY_CNT) AS FAULTY_CNT
			FROM (
				SELECT 							
					EQUIP_CD
					, GOODS_CD
					, ORD_GUBUN
					, (SELECT MIN(BASE_CD) FROM TB_SYSTEM_COMMON_CODE X WHERE  X.BASE_GROUP_CD = '068' AND X.BASE_CD_NM =  MINOR_NM AND X.ETC1 = AA.CHANGE_MAJOR_CD) AS CHANGE_MINOR_CD
					, AA.MINOR_NM
					, AA.CHANGE_MAJOR_CD
					, AA.MINOR_CD
					, AA.MAJOR_CD
					, FAULTY_CNT
				FROM
				(
					SELECT		
						E.EQUIP_CD
						, E.GOODS_CD
						, E.ORD_GUBUN
						, MINOR_CD
						, (SELECT BASE_CD_NM FROM TB_SYSTEM_COMMON_CODE X WHERE  X.BASE_GROUP_CD = '068' AND X.BASE_CD = MINOR_CD) AS MINOR_NM
						, MAJOR_CD
						, ( CASE
							WHEN MAJOR_CD = '001' THEN '001'
							WHEN MAJOR_CD = '002' THEN '002'
							WHEN MAJOR_CD = '004' THEN '001'
							WHEN MAJOR_CD = '005' THEN '002'
							END
						) AS CHANGE_MAJOR_CD
						, SUM(FAULTY_CNT) AS FAULTY_CNT
					FROM TB_GOODS_FAULTY_ADM_CODE Z,  
						TB_WORK_ORDER E,
						(
							SELECT DISTINCT 
								WORK_ORD_NO 
							FROM TB_WORK_ORDER_OUTPUT_SUB X 
							WHERE 1=1 
								AND X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
						) X
					WHERE 1=1								
						AND X.WORK_ORD_NO = Z.WORK_ORD_NO	               
						AND E.WORK_ORD_NO = X.WORK_ORD_NO
					GROUP BY
						E.EQUIP_CD
						, E.GOODS_CD
						, E.ORD_GUBUN
						, MINOR_CD
						, MAJOR_CD
				) AA
				
			) BB
			GROUP BY EQUIP_CD, GOODS_CD, ORD_GUBUN, CHANGE_MINOR_CD
				
			UNION ALL
				
			SELECT 
				E.EQUIP_CD
				, E.GOODS_CD
				, E.ORD_GUBUN
				, '200' AS MINOR_CD
				, ISNULL(SUM(FAULTY_CNT),0) FAULTY_CNT
			FROM 
				TB_EDGE_GOODS_FAULTY_ADM_CODE B, 
				TB_WORK_ORDER E,
				(
					SELECT DISTINCT 
						WORK_ORD_NO, 
						MAX(WORK_ORD_DATE) WORK_ORD_DATE 
					FROM TB_WORK_ORDER_OUTPUT_SUB X WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate} GROUP BY WORK_ORD_NO
				) X
			WHERE B.WORK_ORD_NO = X.WORK_ORD_NO				
				AND E.WORK_ORD_NO = X.WORK_ORD_NO
				AND MINOR_CD < '009'
			GROUP BY E.EQUIP_CD, E.GOODS_CD, E.ORD_GUBUN
			
			UNION ALL

			SELECT 								
				E.EQUIP_CD		
				, E.GOODS_CD							
				, E.ORD_GUBUN	
				, A.MINOR_CD
				, ISNULL(SUM(A.FAULTY_CNT),0) FAULTY_CNT
			FROM TB_SHIP_INSPECT_ADM B, TB_SHIP_INSPECT_DTL A,  TB_WORK_ORDER E, (SELECT DISTINCT WORK_ORD_NO FROM TB_WORK_ORDER_OUTPUT_SUB X WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}) X
			WHERE B.WORK_ORD_NO = X.WORK_ORD_NO					
				AND E.WORK_ORD_NO = X.WORK_ORD_NO
				AND A.SHIP_INSP_IDX = B.IDX
				AND RE_INSP_STATUS = '002'
			GROUP BY A.MINOR_CD,GOODS_CD,EQUIP_CD,E.ORD_GUBUN
		) AS t
		PIVOT(SUM(FAULTY_CNT) FOR MINOR_CD IN (
			${codeList} 
		)) AS PVT ) D
					
		ON AA.EQUIP_CD = D.EQUIP_CD
			AND AA.GOODS_CD = D.GOODS_CD
			AND AA.GUBUN = D.ORD_GUBUN
		ORDER BY AA.GUBUN, AA.EQUIP_NM
	]]>
	</select>
			
	
	<!--(최종검사집계) 날짜로 설비별/주야별/제품별 리스트 조회 SLD용-->
	<select id="faultyEquipGoodsTotalListFa3" resultType="HashMap" parameterType="mes.domain.qm.GoodsFaultyAdmVo" >
         
         <![CDATA[
			SELECT
            *
         FROM (
        	 SELECT
        	   B.EQUIP_CD
               , ISNULL( SUM(B.APPEAR_OUTPUT_CNT), 0 ) AS APPEAR_OUTPUT_CNT
               , ISNULL( SUM(B.EDGE_FAULTY_CNT), 0 ) AS EDGE_FAULTY_CNT
               , ISNULL( SUM(B.FAULT_SUM), 0 ) / ISNULL( SUM(B.USER_INPUT_INSPCT_CNT), 0 ) * 100 AS FAULT_PERCENT
               , ISNULL( SUM(B.FAULT_SUM), 0 ) AS FAULT_SUM
               , ISNULL( SUM(B.USER_INPUT_INSPCT_CNT), 0 ) AS USER_INPUT_INSPCT_CNT
               , GOODS_CD
               , (SELECT GOODS_NM FROM TB_GOODS_CODE_ADM X WHERE X.GOODS_CD = B.GOODS_CD) GOODS_NM 
               , GUBUN
			   , ISNULL( SUM(FAULTY_CNT), 0 ) FAULTY_CNT
   
            FROM (
   
               SELECT
                   AA.EQUIP_CD
                  , AA.APPEAR_INSPCT_DATE
                  , SUM(AA.E_FAULTY_CNT) AS EDGE_FAULTY_CNT
                  , SUM(AA.APPEAR_FAULTY_CNT) + SUM(E_FAULTY_CNT) + SUM(AA.FAULTY_CNT) AS FAULT_SUM
                  , SUM(AA.APPEAR_OUTPUT_CNT) AS APPEAR_OUTPUT_CNT
                  , SUM(AA.APPEAR_FAULTY_CNT) + SUM(E_FAULTY_CNT) + SUM(APPEAR_OUTPUT_CNT) + SUM(AA.FAULTY_CNT) AS USER_INPUT_INSPCT_CNT
                  , AA.GUBUN
                  , AA.GOODS_CD
				  , SUM(AA.FAULTY_CNT) FAULTY_CNT
                
               FROM
               (
                  SELECT
                     A.EQUIP_CD
                     , A.WORK_ORD_NO
                     , A.APPEAR_INSPCT_DATE
                     , ISNULL(A.APPEAR_FAULTY_CNT,0) AS APPEAR_FAULTY_CNT
                     , ISNULL(A.APPEAR_OUTPUT_CNT,0) AS APPEAR_OUTPUT_CNT
                     , ISNULL(A.USER_INPUT_INSPCT_CNT,0) AS USER_INPUT_INSPCT_CNT
                     , ISNULL(B.E_FAULTY_CNT,0) AS E_FAULTY_CNT
					 , ISNULL(C.FAULTY_CNT,0) AS FAULTY_CNT
                     , GUBUN
                     , A.GOODS_CD
                  FROM 
                  (
                     SELECT
                        B.EQUIP_CD
                        , A.WORK_ORD_NO
                        , A.APPEAR_INSPCT_DATE
                        , GUBUN
                        , SUM(A.APPEAR_FAULTY_CNT) APPEAR_FAULTY_CNT                        
                      
                         ,(SELECT SUM(OUTPUT_CNT) FROM TB_WORK_ORDER_OUTPUT_SUB X 
							WHERE X.WORK_ORD_NO = A.WORK_ORD_NO  AND X.GUBUN =A.GUBUN GROUP BY WORK_ORD_NO,GUBUN) AS APPEAR_OUTPUT_CNT
						 ,((SELECT SUM(OUTPUT_CNT) FROM TB_WORK_ORDER_OUTPUT_SUB X 
							WHERE X.WORK_ORD_NO = A.WORK_ORD_NO  AND X.GUBUN =A.GUBUN GROUP BY WORK_ORD_NO,GUBUN) + ISNULL(SUM(A.APPEAR_FAULTY_CNT),0)) AS USER_INPUT_INSPCT_CNT
                        , B.GOODS_CD
                     FROM TB_WORK_ORDER_OUTPUT_SUB A, TB_WORK_ORDER B
                     WHERE A.APPEAR_INSPCT_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
                     AND A.WORK_ORD_NO = B.WORK_ORD_NO
                     GROUP BY A.WORK_ORD_NO, A.APPEAR_INSPCT_DATE, B.EQUIP_CD, GUBUN, B.GOODS_CD
                  ) A 
                  LEFT OUTER JOIN 
                  (
                     SELECT
                        B.EQUIP_CD
                        , A.WORK_ORD_NO
                        , A.FAULTY_REG_DATE
                        , DAY_NIGHT_CD
                        , SUM(A.FAULTY_CNT) E_FAULTY_CNT
                        , B.GOODS_CD
                     FROM TB_EDGE_GOODS_FAULTY_ADM_CODE A, TB_WORK_ORDER B
                     WHERE A.FAULTY_REG_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
                     AND A.WORK_ORD_NO = B.WORK_ORD_NO
                     GROUP BY A.WORK_ORD_NO, A.FAULTY_REG_DATE, B.EQUIP_CD, DAY_NIGHT_CD, B.GOODS_CD
                  ) B
                  ON A.EQUIP_CD = B.EQUIP_CD
                  AND A.WORK_ORD_NO = B.WORK_ORD_NO
                  AND A.APPEAR_INSPCT_DATE = B.FAULTY_REG_DATE
                  AND A.GOODS_CD = B.GOODS_CD
                  AND ( A.GUBUN = B.DAY_NIGHT_CD  OR  B.DAY_NIGHT_CD IS NULL )
				  
				  LEFT OUTER JOIN

				 (
                     SELECT
                        A.WORK_ORD_NO
                        , A.INSP_DATE
                        , DAY_NIGHT_CD
                        , SUM(A.FAULTY_CNT) FAULTY_CNT
                  
                     FROM TB_SHIP_INSPECT_ADM A
                     WHERE A.INSP_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
                     AND RE_INSP_STATUS = '002'
                     GROUP BY A.WORK_ORD_NO, A.INSP_DATE, DAY_NIGHT_CD
                  ) C
                   ON  C.WORK_ORD_NO = A.WORK_ORD_NO
                  AND C.INSP_DATE = A.APPEAR_INSPCT_DATE                 
                  AND C.DAY_NIGHT_CD = A.GUBUN
               ) AA
               GROUP BY APPEAR_INSPCT_DATE, AA.EQUIP_CD, AA.GUBUN, AA.GOODS_CD
            ) AS B
            GROUP BY
               B.EQUIP_CD, GUBUN , GOODS_CD
         ) AS AA
         
         LEFT OUTER JOIN
         
         (
            SELECT
               *
            FROM
            (
               SELECT
                  C.EQUIP_CD
                  , H.EQUIP_NM
                  ,C.GOODS_CD
                  ,B.DAY_NIGHT_CD
                  , MINOR_CD
                  , FAULTY_CNT
               FROM   TB_GOODS_FAULTY_ADM_CODE B, TB_WORK_ORDER_OUTPUT_SUB A, TB_WORK_ORDER C, TB_EQUIP_CODE_ADM H
               WHERE   B.FAULTY_REG_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
               AND      B.ORD_LOT_NO =  A.ORD_LOT_NO
               AND      A.WORK_ORD_NO = C.WORK_ORD_NO
               AND      C.EQUIP_CD = H.EQUIP_CD
               AND		A.GUBUN = B.DAY_NIGHT_CD	
               GROUP BY C.EQUIP_CD, H.EQUIP_NM, MINOR_CD,C.GOODS_CD,B.DAY_NIGHT_CD,FAULTY_CNT
            ) AS t
            PIVOT(SUM(FAULTY_CNT) FOR MINOR_CD IN (
			${codeList}

            )) AS PVT
         ) BB
         ON AA.EQUIP_CD = BB.EQUIP_CD
         AND AA.GOODS_CD = BB.GOODS_CD
         AND AA.GUBUN = BB.DAY_NIGHT_CD
         
         ORDER BY GUBUN,BB.EQUIP_NM
			
			
		]]>
			



	</select>
	
	<!-- 공정 불량 날짜 별 조회 - 최종검사 집계 -->
	<select id="faultyProcessTotalListFa2" resultType="HashMap" parameterType="mes.domain.qm.GoodsFaultyAdmVo" >
		<![CDATA[
			SELECT
				C.APPEAR_INSPCT_DATE
				, C.USER_INPUT_INSPCT_CNT
				, ( C.USER_INPUT_INSPCT_CNT - C.FAULTY_CNT ) AS APPEAR_OUTPUT_CNT
				, C.FAULTY_CNT AS FAULT_SUM
				, C.FAULT_PERCENT
				, C.EDGE_FAULTY_CNT
				, D.*
			FROM
				(						
					SELECT
						Z.APPEAR_INSPCT_DATE
						, SUM(ISNULL(USER_INPUT_INSPCT_CNT, 0)) USER_INPUT_INSPCT_CNT
						, SUM(ISNULL(Z.APPEAR_OUTPUT_CNT, 0)) APPEAR_OUTPUT_CNT
						, SUM(ISNULL(Z.FAULT_SUM, 0)) FAULT_SUM
						, SUM(ISNULL(Z.EDGE_FAULTY_CNT, 0)) EDGE_FAULT_SUM
						, CONVERT(NUMERIC(5,2), (CONVERT(FLOAT,( SUM(ISNULL(Z.FAULTY_CNT, 0)))	) / CONVERT(FLOAT, SUM(ISNULL(Z.USER_INPUT_INSPCT_CNT, 0)))) * 100) AS FAULT_PERCENT
						, SUM(ISNULL(Z.EDGE_FAULTY_CNT, 0)) AS EDGE_FAULTY_CNT
						, SUM(FAULTY_CNT) FAULTY_CNT
					FROM
					(	
						SELECT A.APPEAR_INSPCT_DATE
							, SUM(ISNULL(USER_INPUT_INSPCT_CNT, 0)) USER_INPUT_INSPCT_CNT
							, SUM(ISNULL(A.APPEAR_OUTPUT_CNT, 0)) APPEAR_OUTPUT_CNT
							, SUM(ISNULL(A.APPEAR_FAULTY_CNT, 0)) + SUM(ISNULL(A.EDGE_FAULTY_CNT, 0)) FAULT_SUM
							, CONVERT(NUMERIC(5,2), (CONVERT(FLOAT,(SUM(ISNULL(A.APPEAR_FAULTY_CNT, 0)) + SUM(ISNULL(A.EDGE_FAULTY_CNT, 0)))	) / CONVERT(FLOAT, SUM(ISNULL(A.APPEAR_OUTPUT_CNT, 0)) + SUM(ISNULL(A.APPEAR_FAULTY_CNT, 0)) + SUM(ISNULL(A.EDGE_FAULTY_CNT, 0)))) * 100) AS FAULT_PERCENT
							, SUM(ISNULL(A.EDGE_FAULTY_CNT, 0)) AS EDGE_FAULTY_CNT
							, ISNULL(C.FAULTY_CNT, 0) AS FAULTY_CNT
						FROM TB_WORK_ORDER_OUTPUT_SUB A
						, (
							SELECT
								DISTINCT WORK_ORD_NO
								, ORD_LOT_NO
								, FAULTY_REG_DATE
								, CAST('' as INT) EDGE_FAULTY_CNT
								FROM TB_GOODS_FAULTY_ADM_CODE 
								WHERE FAULTY_REG_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
						) B
						, (
							SELECT 
								FAULTY_REG_DATE
								, SUM(FAULTY_CNT) FAULTY_CNT
							FROM TB_GOODS_FAULTY_ADM_CODE B
							WHERE B.FAULTY_REG_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
							AND MINOR_CD IN ( ${processList} ) 
							GROUP BY B.FAULTY_REG_DATE 
						) C
						WHERE A.SUB_WORK_STATUS_CD = 'A'
						AND A.WORK_ORD_NO = B.WORK_ORD_NO
						AND A.ORD_LOT_NO = B.ORD_LOT_NO
						AND A.APPEAR_INSPCT_DATE = C.FAULTY_REG_DATE
						AND (A.APPEAR_INSPCT_DATE = B.FAULTY_REG_DATE AND A.APPEAR_INSPCT_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}) 

						GROUP BY
							A.APPEAR_INSPCT_DATE
							, C.FAULTY_CNT 

					UNION 

					SELECT
						A.EDGE_INSPCT_DATE
						, SUM(ISNULL(USER_INPUT_INSPCT_CNT, 0)) USER_INPUT_INSPCT_CNT
						, SUM(ISNULL(A.APPEAR_OUTPUT_CNT, 0)) APPEAR_OUTPUT_CNT
						, SUM(ISNULL(A.APPEAR_FAULTY_CNT, 0)) + SUM(ISNULL(A.EDGE_FAULTY_CNT, 0)) EDGE_FAULT_SUM
						, CONVERT(NUMERIC(5,2), (CONVERT(FLOAT,(SUM(ISNULL(A.APPEAR_FAULTY_CNT, 0)) + SUM(ISNULL(A.EDGE_FAULTY_CNT, 0)))	) / CONVERT(FLOAT, SUM(ISNULL(A.APPEAR_OUTPUT_CNT, 0)) + SUM(ISNULL(A.APPEAR_FAULTY_CNT, 0)) + SUM(ISNULL(A.EDGE_FAULTY_CNT, 0)))) * 100) AS FAULT_PERCENT
						, SUM(ISNULL(A.EDGE_FAULTY_CNT, 0)) AS EDGE_FAULTY_CNT
						, 0 AS FAULTY_CNT
					FROM TB_WORK_ORDER_OUTPUT_SUB A
					, (
						SELECT WORK_ORD_NO, ORD_LOT_NO, FAULTY_REG_DATE
						FROM TB_EDGE_GOODS_FAULTY_ADM_CODE
						WHERE FAULTY_REG_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
						GROUP BY WORK_ORD_NO, ORD_LOT_NO, FAULTY_REG_DATE
					) B
					WHERE A.SUB_WORK_STATUS_CD = 'E'
					AND A.WORK_ORD_NO = B.WORK_ORD_NO
					AND A.ORD_LOT_NO = B.ORD_LOT_NO
					AND (A.EDGE_INSPCT_DATE = B.FAULTY_REG_DATE AND A.EDGE_INSPCT_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}) 

					GROUP BY A.EDGE_INSPCT_DATE

					) AS Z
					WHERE 1=1
					GROUP BY
					Z.APPEAR_INSPCT_DATE
				) C
				, (
					SELECT
						*
					FROM
					(
						SELECT 
							E.FAULTY_REG_DATE
							, MIN(E.CHANGE_MINOR_CD) AS MINOR_CD
							, SUM(E.FAULTY_CNT) AS FAULTY_CNT
						FROM
						(
							SELECT
								Z.FAULTY_REG_DATE
								, ( SELECT MIN(Z.BASE_CD) FROM TB_SYSTEM_COMMON_CODE Z WHERE Z.BASE_GROUP_CD = '068' AND Z.BASE_CD_NM = F.MINOR_NM AND Z.ETC1 = F.MAJOR_CD )  AS MINOR_CD
								, F.CHANGE_MINOR_CD
								, F.MINOR_NM
								, F.CHANGE_MAJOR_CD
								, SUM(ISNULL(Z.FAULTY_CNT, 0)) AS FAULTY_CNT
							FROM   TB_GOODS_FAULTY_ADM_CODE Z
							, (
			
								SELECT
									AA.FAULTY_REG_DATE
									, (SELECT MIN(BASE_CD) FROM TB_SYSTEM_COMMON_CODE X WHERE  X.BASE_GROUP_CD = '068' AND X.BASE_CD_NM =  MINOR_NM AND X.ETC1 = AA.CHANGE_MAJOR_CD) AS CHANGE_MINOR_CD
									, AA.MINOR_NM
									, AA.CHANGE_MAJOR_CD
									, AA.MINOR_CD
									, AA.MAJOR_CD
								FROM 
								(
									SELECT 
										FAULTY_REG_DATE
										, MAJOR_CD
										, (SELECT BASE_CD_NM FROM TB_SYSTEM_COMMON_CODE X WHERE  X.BASE_GROUP_CD = '068' AND X.BASE_CD = MINOR_CD) AS MINOR_NM
										, ( CASE
											WHEN MAJOR_CD = '001' THEN '001'
											WHEN MAJOR_CD = '002' THEN '002'
											WHEN MAJOR_CD = '004' THEN '001'
											WHEN MAJOR_CD = '005' THEN '002'
											END
										) AS CHANGE_MAJOR_CD
										, MINOR_CD
										, SUM(FAULTY_CNT) FAULTY_CNT
									FROM TB_GOODS_FAULTY_ADM_CODE B
									WHERE B.FAULTY_REG_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
									AND MINOR_CD IN ( ${processList} )
									GROUP BY
										B.FAULTY_REG_DATE
										, MAJOR_CD
										, MINOR_CD
								) AA
							) F
								WHERE  1 = 1
								AND Z.FAULTY_REG_DATE = F.FAULTY_REG_DATE
								AND Z.MAJOR_CD = F.MAJOR_CD
								AND Z.MINOR_CD = F.MINOR_CD
								AND Z.FAULTY_REG_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
								GROUP BY
									Z.FAULTY_REG_DATE
									, F.CHANGE_MAJOR_CD
									, F.MAJOR_CD
									, F.CHANGE_MINOR_CD
									, F.MINOR_NM
						) E
						GROUP BY
							E.FAULTY_REG_DATE
							, E.MINOR_NM
							, E.CHANGE_MAJOR_CD
					) AS t
					PIVOT
					( 
						SUM(FAULTY_CNT) FOR MINOR_CD IN ( ${codeList} )
					) AS PVT 
				) D
			WHERE C.APPEAR_INSPCT_DATE = D.FAULTY_REG_DATE
			ORDER BY C.APPEAR_INSPCT_DATE
		]]>
	</select>
	<!-- 공정 불량 날짜 별 조회 - 최종검사 집계 -->
	
	<select id="faultyGoodsTotalList" resultType="HashMap" parameterType="mes.domain.qm.GoodsFaultyAdmVo">
		<![CDATA[
			SELECT
				C.USER_INPUT_INSPCT_CNT
				, C.APPEAR_OUTPUT_CNT
				, C.FAULT_SUM
				, C.FAULT_PERCENT
				, C.EDGE_FAULTY_CNT
				, D.*
			FROM
				(SELECT
					B.GOODS_CD
					--, SUM(ISNULL(A.APPEAR_OUTPUT_CNT, 0)) + SUM(ISNULL(A.APPEAR_FAULTY_CNT, 0)) + SUM(ISNULL(A.EDGE_FAULTY_CNT, 0)) OUTPUT_CNT
					, SUM(ISNULL(USER_INPUT_INSPCT_CNT, 0)) USER_INPUT_INSPCT_CNT
					, SUM(ISNULL(A.APPEAR_OUTPUT_CNT, 0)) APPEAR_OUTPUT_CNT
					, SUM(ISNULL(A.APPEAR_FAULTY_CNT, 0)) + SUM(ISNULL(A.EDGE_FAULTY_CNT, 0)) FAULT_SUM
					, CONVERT(NUMERIC(5,2), (CONVERT(FLOAT,(SUM(ISNULL(A.APPEAR_FAULTY_CNT, 0)) + SUM(ISNULL(A.EDGE_FAULTY_CNT, 0)))	) / CONVERT(FLOAT, SUM(ISNULL(A.APPEAR_OUTPUT_CNT, 0)) + SUM(ISNULL(A.APPEAR_FAULTY_CNT, 0)) + SUM(ISNULL(A.EDGE_FAULTY_CNT, 0)))) * 100) AS FAULT_PERCENT
					, SUM(ISNULL(A.EDGE_FAULTY_CNT, 0)) AS EDGE_FAULTY_CNT
				FROM TB_WORK_ORDER_OUTPUT_SUB A, TB_WORK_ORDER B, (SELECT DISTINCT WORK_ORD_NO, ORD_LOT_NO, FAULTY_REG_DATE FROM TB_GOODS_FAULTY_ADM_CODE
																	WHERE FAULTY_REG_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
																	GROUP BY WORK_ORD_NO, ORD_LOT_NO, FAULTY_REG_DATE) C
				WHERE A.SUB_WORK_STATUS_CD = 'A'
				AND A.WORK_ORD_NO = B.WORK_ORD_NO
				AND A.WORK_ORD_NO = C.WORK_ORD_NO
				AND A.ORD_LOT_NO = C.ORD_LOT_NO
				AND A.APPEAR_INSPCT_DATE = C.FAULTY_REG_DATE
				AND A.APPEAR_INSPCT_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
				GROUP BY B.GOODS_CD ) C,
				(SELECT *
				FROM(
				SELECT
					E.GOODS_CD
					, H.GOODS_NM
					, MINOR_CD
					, ISNULL(SUM(FAULTY_CNT),0) FAULTY_CNT
				FROM	TB_GOODS_FAULTY_ADM_CODE B, TB_WORK_ORDER E, TB_GOODS_CODE_ADM H
				WHERE B.FAULTY_REG_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
				AND		B.WORK_ORD_NO =  E.WORK_ORD_NO
				AND		E.GOODS_CD = H.GOODS_CD
				GROUP BY E.GOODS_CD, H.GOODS_NM,MINOR_CD
				) as t
				PIVOT(SUM(FAULTY_CNT) for MINOR_CD IN (${codeList})) as PVT ) D
			WHERE C.GOODS_CD = D.GOODS_CD 
			ORDER BY D.GOODS_NM
		]]>
	</select>
	<select id="faultyGoodsTotalListFa2" resultType="HashMap" parameterType="mes.domain.qm.GoodsFaultyAdmVo">
	<!-- 	
			SELECT
				C.USER_INPUT_INSPCT_CNT
				, C.APPEAR_OUTPUT_CNT
				, C.FAULT_SUM
				, C.FAULT_PERCENT
				, C.EDGE_FAULTY_CNT
				, D.*
				FROM
				(SELECT SUM(ISNULL(Z.USER_INPUT_INSPCT_CNT,0)) USER_INPUT_INSPCT_CNT 
				, SUM(ISNULL(Z.APPEAR_OUTPUT_CNT,0)) APPEAR_OUTPUT_CNT 
				, SUM(ISNULL(Z.FAULT_SUM,0)) FAULT_SUM 
				,CONVERT(NUMERIC(5,2), (CONVERT(FLOAT,SUM(ISNULL(Z.FAULT_SUM,0)))) / CONVERT(FLOAT,SUM(ISNULL(Z.USER_INPUT_INSPCT_CNT,0))) * 100) AS FAULT_PERCENT
				, SUM(ISNULL(Z.EDGE_FAULTY_CNT,0)) EDGE_FAULTY_CNT 
				, Z.GOODS_CD
				
					FROM
					(
					SELECT
						B.GOODS_CD
						
						, SUM(ISNULL(USER_INPUT_INSPCT_CNT, 0)) USER_INPUT_INSPCT_CNT
						, SUM(ISNULL(A.APPEAR_OUTPUT_CNT, 0)) APPEAR_OUTPUT_CNT
						, SUM(ISNULL(A.APPEAR_FAULTY_CNT, 0)) + SUM(ISNULL(A.EDGE_FAULTY_CNT, 0)) FAULT_SUM
						, CONVERT(NUMERIC(5,2), (CONVERT(FLOAT,(SUM(ISNULL(A.APPEAR_FAULTY_CNT, 0)) + SUM(ISNULL(A.EDGE_FAULTY_CNT, 0)))	) / CONVERT(FLOAT, SUM(ISNULL(A.APPEAR_OUTPUT_CNT, 0)) + SUM(ISNULL(A.APPEAR_FAULTY_CNT, 0)) + SUM(ISNULL(A.EDGE_FAULTY_CNT, 0)))) * 100) AS FAULT_PERCENT
						, SUM(ISNULL(A.EDGE_FAULTY_CNT, 0)) AS EDGE_FAULTY_CNT
					FROM TB_WORK_ORDER_OUTPUT_SUB A, TB_WORK_ORDER B, (SELECT DISTINCT WORK_ORD_NO, ORD_LOT_NO, FAULTY_REG_DATE FROM TB_GOODS_FAULTY_ADM_CODE
																		WHERE FAULTY_REG_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
																		GROUP BY WORK_ORD_NO, ORD_LOT_NO, FAULTY_REG_DATE) C
					WHERE A.SUB_WORK_STATUS_CD = 'A'
					AND A.WORK_ORD_NO = B.WORK_ORD_NO
					AND A.WORK_ORD_NO = C.WORK_ORD_NO
					AND A.ORD_LOT_NO = C.ORD_LOT_NO
					AND A.APPEAR_INSPCT_DATE = C.FAULTY_REG_DATE
					AND A.APPEAR_INSPCT_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
					GROUP BY B.GOODS_CD 
				
					UNION ALL

					SELECT
						B.GOODS_CD
						
						, SUM(ISNULL(USER_INPUT_INSPCT_CNT, 0)) USER_INPUT_INSPCT_CNT
						, SUM(ISNULL(A.APPEAR_OUTPUT_CNT, 0)) APPEAR_OUTPUT_CNT
						, SUM(ISNULL(A.APPEAR_FAULTY_CNT, 0)) + SUM(ISNULL(A.EDGE_FAULTY_CNT, 0)) FAULT_SUM
						, CONVERT(NUMERIC(5,2), (CONVERT(FLOAT,(SUM(ISNULL(A.APPEAR_FAULTY_CNT, 0)) + SUM(ISNULL(A.EDGE_FAULTY_CNT, 0)))	) / CONVERT(FLOAT, SUM(ISNULL(A.USER_INPUT_INSPCT_CNT, 0))) * 100)) AS FAULT_PERCENT
						, SUM(ISNULL(A.EDGE_FAULTY_CNT, 0)) AS EDGE_FAULTY_CNT
					FROM TB_WORK_ORDER_OUTPUT_SUB A, TB_WORK_ORDER B, (SELECT DISTINCT WORK_ORD_NO, ORD_LOT_NO, FAULTY_REG_DATE FROM TB_EDGE_GOODS_FAULTY_ADM_CODE
																		WHERE FAULTY_REG_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
																		GROUP BY WORK_ORD_NO, ORD_LOT_NO, FAULTY_REG_DATE) C
					WHERE A.SUB_WORK_STATUS_CD = 'E'
					AND A.WORK_ORD_NO = B.WORK_ORD_NO
					AND A.WORK_ORD_NO = C.WORK_ORD_NO
					AND A.ORD_LOT_NO = C.ORD_LOT_NO
					AND A.EDGE_INSPCT_DATE = C.FAULTY_REG_DATE
					AND A.EDGE_INSPCT_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
					GROUP BY B.GOODS_CD ) as Z

				GROUP BY Z.GOODS_CD ) C,
				(SELECT *
				FROM(
				SELECT
					E.GOODS_CD
					, H.GOODS_NM
					, MINOR_CD
					, ISNULL(SUM(FAULTY_CNT),0) FAULTY_CNT
				FROM	TB_GOODS_FAULTY_ADM_CODE B, TB_WORK_ORDER E, TB_GOODS_CODE_ADM H
				WHERE B.FAULTY_REG_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
				AND		B.WORK_ORD_NO =  E.WORK_ORD_NO
				AND		E.GOODS_CD = H.GOODS_CD
				GROUP BY E.GOODS_CD, H.GOODS_NM,MINOR_CD
				) as t
				PIVOT(SUM(FAULTY_CNT) for MINOR_CD IN (${codeList})) as PVT ) D
			WHERE C.GOODS_CD = D.GOODS_CD 
			ORDER BY D.GOODS_NM -->
			
	
		
		<!-- 	SELECT * FROM 
			
				(
			   SELECT
					A.GOODS_CD
					,(SELECT GOODS_NM FROM TB_GOODS_CODE_ADM X WHERE X.GOODS_CD = A.GOODS_CD) GOODS_NM
					, ISNULL( SUM(A.APPEAR_FAULTY_CNT), 0) APPEAR_FAULTY_CNT 
					, ISNULL( SUM(B.FAULTY_CNT), 0) EDGE_FAULTY_CNT
					, ISNULL( SUM(A.APPEAR_FAULTY_CNT), 0) + ISNULL( SUM(FAULTY_CNT), 0) FAULT_SUM
					, ISNULL( SUM(A.APPEAR_OUTPUT_CNT), 0) APPEAR_OUTPUT_CNT
					, ISNULL( SUM(A.APPEAR_FAULTY_CNT), 0) + ISNULL( SUM(FAULTY_CNT), 0) + ISNULL( SUM(A.APPEAR_OUTPUT_CNT), 0) USER_INPUT_INSPCT_CNT
					, ( ISNULL( SUM(A.APPEAR_FAULTY_CNT), 0) + ISNULL( SUM(FAULTY_CNT), 0) ) / ( ISNULL( SUM(A.APPEAR_FAULTY_CNT), 0) + ISNULL( SUM(FAULTY_CNT), 0) + ISNULL( SUM(A.APPEAR_OUTPUT_CNT), 0) ) * 100 FAULT_PERCENT
					
			   FROM 
			
					   ( SELECT C.WORK_ORD_NO,		
							   E.GOODS_CD,
							   ISNULL(SUM(C.APPEAR_FAULTY_CNT),0) APPEAR_FAULTY_CNT,
							   ISNULL(SUM(C.APPEAR_OUTPUT_CNT),0) APPEAR_OUTPUT_CNT,
							   ISNULL(SUM(USER_INPUT_INSPCT_CNT),0) USER_INPUT_INSPCT_CNT,
							
							   (SELECT SUM(OUTPUT_CNT) FROM TB_WORK_ORDER_OUTPUT_SUB X 
							WHERE X.WORK_ORD_NO = C.WORK_ORD_NO GROUP BY WORK_ORD_NO) AS APPEAR_OUTPUT_CNT,
							
							    ((SELECT SUM(OUTPUT_CNT) FROM TB_WORK_ORDER_OUTPUT_SUB X 
								WHERE X.WORK_ORD_NO = C.WORK_ORD_NO GROUP BY WORK_ORD_NO) + ISNULL(SUM(C.APPEAR_FAULTY_CNT),0)) AS USER_INPUT_INSPCT_CNT,	
							   GUBUN
						FROM TB_WORK_ORDER_OUTPUT_SUB C, TB_WORK_ORDER E
						WHERE C.APPEAR_INSPCT_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
						AND C.WORK_ORD_NO = E.WORK_ORD_NO
						GROUP BY C.WORK_ORD_NO, E.GOODS_CD, GUBUN
						) A 
			
						LEFT OUTER JOIN 
			
					   ( SELECT C.WORK_ORD_NO,				
							   ISNULL(SUM(C.FAULTY_CNT),0) FAULTY_CNT,
							   DAY_NIGHT_CD
						FROM TB_EDGE_GOODS_FAULTY_ADM_CODE C
						WHERE C.FAULTY_REG_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
						GROUP BY C.WORK_ORD_NO, DAY_NIGHT_CD
						
						) B
			
						ON A.WORK_ORD_NO = B.WORK_ORD_NO
						AND ( A.GUBUN = B.DAY_NIGHT_CD  OR  B.DAY_NIGHT_CD IS NULL )
						
						GROUP BY A.GOODS_CD
						
				) AA

				LEFT OUTER JOIN 
	
				(SELECT *
					FROM (
						SELECT 
							
							 MINOR_CD
							, ISNULL(SUM(FAULTY_CNT),0) FAULTY_CNT
							,GOODS_CD
						FROM TB_GOODS_FAULTY_ADM_CODE B, TB_WORK_ORDER E
						WHERE B.FAULTY_REG_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
						AND E.WORK_ORD_NO = B.WORK_ORD_NO
						GROUP BY B.WORK_ORD_NO, B.ORD_LOT_NO, MINOR_CD,GOODS_CD
						) AS T
					PIVOT(SUM(FAULTY_CNT) FOR MINOR_CD IN (${codeList})) AS PVT ) D
	
				ON AA.GOODS_CD = D.GOODS_CD
	
				WHERE AA.GOODS_CD = D.GOODS_CD			
	
				ORDER BY AA.GOODS_CD -->
				
				<![CDATA[
				
				SELECT * FROM 
			
				(
			   SELECT
					A.GOODS_CD
					,(SELECT GOODS_NM FROM TB_GOODS_CODE_ADM X WHERE X.GOODS_CD = A.GOODS_CD) GOODS_NM
					, ISNULL( SUM(CC.FAULTY_CNT), 0 ) APPEAR_FAULTY_CNT 
					, ISNULL( SUM(B.FAULTY_CNT), 0 ) EDGE_FAULTY_CNT
					, ISNULL( SUM(C.FAULTY_CNT), 0 ) RE_INSP_CNT
					, ISNULL( SUM(CC.FAULTY_CNT), 0 ) +  ISNULL( SUM(B.FAULTY_CNT), 0 ) + ISNULL( SUM(C.FAULTY_CNT), 0 ) FAULT_SUM
					, ISNULL( SUM(APPEAR_OUTPUT_CNT), 0 ) APPEAR_OUTPUT_CNT
					, ISNULL( SUM(CC.FAULTY_CNT), 0 ) +  ISNULL( SUM(B.FAULTY_CNT), 0 ) +  ISNULL( SUM(APPEAR_OUTPUT_CNT), 0 ) + ISNULL( SUM(C.FAULTY_CNT), 0 ) USER_INPUT_INSPCT_CNT
					, ( ISNULL( Sum(CC.FAULTY_CNT), 0 ) + ISNULL( SUM(B.FAULTY_CNT), 0 ) + ISNULL( SUM(C.FAULTY_CNT), 0 ) ) / (  ISNULL( SUM(CC.FAULTY_CNT), 0 ) + ISNULL( SUM(B.FAULTY_CNT), 0 ) + ISNULL( SUM(APPEAR_OUTPUT_CNT), 0 ) ) * 100 FAULT_PERCENT
					
			   FROM 
			
					   ( SELECT C.WORK_ORD_NO,		
							   E.GOODS_CD,						
							   SUM(C.OUTPUT_CNT) AS APPEAR_OUTPUT_CNT							
						FROM TB_WORK_ORDER_OUTPUT_SUB C, TB_WORK_ORDER E
						WHERE C.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
						AND C.WORK_ORD_NO = E.WORK_ORD_NO
						GROUP BY C.WORK_ORD_NO, E.GOODS_CD
						) A 

						LEFT OUTER JOIN 
						(SELECT
								X.WORK_ORD_NO
								, SUM(ISNULL(FAULTY_CNT,0)) FAULTY_CNT						
				
							FROM TB_GOODS_FAULTY_ADM_CODE Z,  (SELECT DISTINCT WORK_ORD_NO FROM TB_WORK_ORDER_OUTPUT_SUB X WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}) X
							WHERE 1=1 
							AND X.WORK_ORD_NO = Z.WORK_ORD_NO	
		
			
							GROUP BY X.WORK_ORD_NO) CC
						ON CC.WORK_ORD_NO = A.WORK_ORD_NO

			
						LEFT OUTER JOIN 
			
					   ( SELECT X.WORK_ORD_NO,				
							   ISNULL(SUM(C.FAULTY_CNT),0) FAULTY_CNT							  
						FROM TB_EDGE_GOODS_FAULTY_ADM_CODE C , (SELECT DISTINCT WORK_ORD_NO FROM TB_WORK_ORDER_OUTPUT_SUB X WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}) X
						WHERE C.WORK_ORD_NO = X.WORK_ORD_NO					
						GROUP BY X.WORK_ORD_NO
						
						) B
			
						ON A.WORK_ORD_NO = B.WORK_ORD_NO		
						
						LEFT OUTER JOIN

						(SELECT 							
							X.WORK_ORD_NO
							,ISNULL(SUM(A.FAULTY_CNT),0) FAULTY_CNT							
						FROM TB_SHIP_INSPECT_ADM B, TB_SHIP_INSPECT_DTL A, (SELECT DISTINCT WORK_ORD_NO FROM TB_WORK_ORDER_OUTPUT_SUB X WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}) X
						WHERE B.WORK_ORD_NO = X.WORK_ORD_NO
						AND A.SHIP_INSP_IDX = B.IDX
						AND RE_INSP_STATUS = '002'
						GROUP BY X.WORK_ORD_NO
						) C
						ON A.WORK_ORD_NO = C.WORK_ORD_NO				
						
						GROUP BY A.GOODS_CD
						
				) AA

				LEFT OUTER JOIN 
	
				(SELECT *
					FROM (
						SELECT 
							
							 MINOR_CD
							, ISNULL(SUM(FAULTY_CNT),0) FAULTY_CNT
							,GOODS_CD
						FROM TB_GOODS_FAULTY_ADM_CODE B,  TB_WORK_ORDER E, (SELECT DISTINCT WORK_ORD_NO FROM TB_WORK_ORDER_OUTPUT_SUB X WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}) X
						WHERE B.WORK_ORD_NO = X.WORK_ORD_NO					
						AND E.WORK_ORD_NO = X.WORK_ORD_NO
						GROUP BY MINOR_CD,GOODS_CD

						UNION ALL

						SELECT 
							
							'200' MINOR_CD
							, ISNULL(SUM(FAULTY_CNT),0) FAULTY_CNT
							,GOODS_CD
						FROM TB_EDGE_GOODS_FAULTY_ADM_CODE B,  TB_WORK_ORDER E, (SELECT DISTINCT WORK_ORD_NO FROM TB_WORK_ORDER_OUTPUT_SUB X WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}) X
						WHERE B.WORK_ORD_NO = X.WORK_ORD_NO					
						AND E.WORK_ORD_NO = X.WORK_ORD_NO
						AND MINOR_CD < '009'
						GROUP BY GOODS_CD
						
						UNION ALL

						SELECT 							
							 A.MINOR_CD
							, ISNULL(SUM(A.FAULTY_CNT),0) FAULTY_CNT
							,GOODS_CD
						FROM TB_SHIP_INSPECT_ADM B, TB_SHIP_INSPECT_DTL A,  TB_WORK_ORDER E, (SELECT DISTINCT WORK_ORD_NO FROM TB_WORK_ORDER_OUTPUT_SUB X WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}) X
						WHERE B.WORK_ORD_NO = X.WORK_ORD_NO					
						AND E.WORK_ORD_NO = X.WORK_ORD_NO
						AND A.SHIP_INSP_IDX = B.IDX
						AND RE_INSP_STATUS = '002'
						GROUP BY A.MINOR_CD,GOODS_CD
						
						) AS T
					PIVOT(SUM(FAULTY_CNT) FOR MINOR_CD IN (
					${codeList}
					)) AS PVT ) D
	
				ON AA.GOODS_CD = D.GOODS_CD
		
	
				ORDER BY AA.GOODS_CD


		]]>
		
	</select> 
	
	
	<select id="faultyGoodsTotalSumListFa2" resultType="HashMap" parameterType="mes.domain.qm.GoodsFaultyAdmVo">
		<![CDATA[
			SELECT * FROM 
			(
				SELECT
					A.GOODS_CD
					, ISNULL( SUM(C.FAULTY_CNT), 0 ) RE_INSP_CNT
					, (SELECT GOODS_NM FROM TB_GOODS_CODE_ADM X WHERE X.GOODS_CD = A.GOODS_CD) GOODS_NM
					, ISNULL( SUM(CC.FAULTY_CNT), 0 ) +  ISNULL( SUM(B.FAULTY_CNT), 0 ) +  ISNULL( SUM(APPEAR_OUTPUT_CNT), 0 ) USER_INPUT_INSPCT_CNT
					, ISNULL( SUM(APPEAR_OUTPUT_CNT), 0 ) APPEAR_OUTPUT_CNT
					, ISNULL( SUM(CC.FAULTY_CNT), 0 ) +  ISNULL( SUM(B.FAULTY_CNT), 0 ) + ISNULL( SUM(C.FAULTY_CNT), 0 ) FAULT_SUM
					, ISNULL( SUM(CC.FAULTY_CNT), 0 ) APPEAR_FAULTY_CNT 
					, ISNULL( SUM(CC.MATRL_FAULTY_CNT), 0 ) MATRL_FAULTY_CNT
					, ISNULL( SUM(CC.FILM_FAULTY_CNT), 0 ) FILM_FAULTY_CNT
					, ISNULL( SUM(B.FAULTY_CNT), 0 ) EDGE_FAULTY_CNT
					, ( ISNULL( Sum(CC.FAULTY_CNT), 0 ) + ISNULL( SUM(B.FAULTY_CNT), 0 ) + ISNULL( SUM(C.FAULTY_CNT), 0 ) ) / (  ISNULL( SUM(CC.FAULTY_CNT), 0 ) + ISNULL( SUM(B.FAULTY_CNT), 0 ) + ISNULL( SUM(APPEAR_OUTPUT_CNT), 0 ) ) * 100 FAULT_PERCENT
				FROM 
				( 
					SELECT 
						A.WORK_ORD_NO,					 
						B.GOODS_CD,
						(SUM(A.OUTPUT_CNT) ) AS APPEAR_OUTPUT_CNT			
					FROM TB_WORK_ORDER_OUTPUT_SUB A, TB_WORK_ORDER B
					WHERE 
						WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
						AND A.WORK_ORD_NO = B.WORK_ORD_NO
					GROUP BY A.WORK_ORD_NO, B.GOODS_CD
				) A LEFT OUTER JOIN 
				(
					SELECT
						X.WORK_ORD_NO
						, SUM(ISNULL(FAULTY_CNT,0)) FAULTY_CNT		
						, SUM(IIF(Z.MAJOR_CD = '001' OR Z.MAJOR_CD = '004',ISNULL(FAULTY_CNT,0), 0)) MATRL_FAULTY_CNT	
						, SUM(IIF(Z.MAJOR_CD = '002' OR Z.MAJOR_CD = '005',ISNULL(FAULTY_CNT,0), 0)) FILM_FAULTY_CNT	
					FROM TB_GOODS_FAULTY_ADM_CODE Z, 
						(
							SELECT DISTINCT 
								WORK_ORD_NO
							FROM TB_WORK_ORDER_OUTPUT_SUB X 
							WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate} 
						) X
					WHERE 1=1 
						AND X.WORK_ORD_NO = Z.WORK_ORD_NO	
					GROUP BY X.WORK_ORD_NO
				) CC
				ON CC.WORK_ORD_NO = A.WORK_ORD_NO LEFT OUTER JOIN 
				( 
					SELECT 
						X.WORK_ORD_NO							  
						, ISNULL(SUM(FAULTY_CNT),0) FAULTY_CNT			
						, SUM(IIF(Z.MAJOR_CD = '001' OR Z.MAJOR_CD = '004',ISNULL(FAULTY_CNT,0), 0)) MATRL_FAULTY_CNT	
						, SUM(IIF(Z.MAJOR_CD = '002' OR Z.MAJOR_CD = '005',ISNULL(FAULTY_CNT,0), 0)) FILM_FAULTY_CNT		   
					FROM 
						TB_EDGE_GOODS_FAULTY_ADM_CODE Z, 
						(
							SELECT DISTINCT 
								WORK_ORD_NO
							FROM TB_WORK_ORDER_OUTPUT_SUB X 
							WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate} 
							GROUP BY WORK_ORD_NO
						) X
					WHERE X.WORK_ORD_NO = Z.WORK_ORD_NO	
					GROUP BY X.WORK_ORD_NO 
				) B
				ON A.WORK_ORD_NO = B.WORK_ORD_NO LEFT OUTER JOIN
				(
					SELECT 							
						X.WORK_ORD_NO
						,ISNULL(SUM(A.FAULTY_CNT),0) FAULTY_CNT							
					FROM TB_SHIP_INSPECT_ADM B, TB_SHIP_INSPECT_DTL A, (SELECT DISTINCT WORK_ORD_NO FROM TB_WORK_ORDER_OUTPUT_SUB X WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}) X
					WHERE B.WORK_ORD_NO = X.WORK_ORD_NO
						AND A.SHIP_INSP_IDX = B.IDX
						AND RE_INSP_STATUS = '002'
					GROUP BY X.WORK_ORD_NO
				) C				
				ON A.WORK_ORD_NO = C.WORK_ORD_NO		
			
				GROUP BY A.GOODS_CD	
			) AA LEFT OUTER JOIN 
			(
				SELECT
				*
			FROM
			(
				SELECT
					GOODS_CD
					, CHANGE_MINOR_CD AS MINOR_CD
					, SUM(FAULTY_CNT) AS FAULTY_CNT
				FROM (
					SELECT 							
						GOODS_CD
						, (SELECT MIN(BASE_CD) FROM TB_SYSTEM_COMMON_CODE X WHERE  X.BASE_GROUP_CD = '068' AND X.BASE_CD_NM =  MINOR_NM AND X.ETC1 = AA.CHANGE_MAJOR_CD) AS CHANGE_MINOR_CD
						, AA.MINOR_NM
						, AA.CHANGE_MAJOR_CD
						, AA.MINOR_CD
						, AA.MAJOR_CD
						, FAULTY_CNT
					FROM
					(
						SELECT		
							E.GOODS_CD
							, MINOR_CD
							, (SELECT BASE_CD_NM FROM TB_SYSTEM_COMMON_CODE X WHERE  X.BASE_GROUP_CD = '068' AND X.BASE_CD = MINOR_CD) AS MINOR_NM
							, MAJOR_CD
							, ( CASE
								WHEN MAJOR_CD = '001' THEN '001'
								WHEN MAJOR_CD = '002' THEN '002'
								WHEN MAJOR_CD = '004' THEN '001'
								WHEN MAJOR_CD = '005' THEN '002'
								END
							) AS CHANGE_MAJOR_CD
							, SUM(FAULTY_CNT) AS FAULTY_CNT
						FROM TB_GOODS_FAULTY_ADM_CODE Z,  
							TB_WORK_ORDER E,
							(
								SELECT DISTINCT 
									WORK_ORD_NO 
								FROM TB_WORK_ORDER_OUTPUT_SUB X 
								WHERE 1=1 
									AND X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
							) X
						WHERE 1=1								
							AND X.WORK_ORD_NO = Z.WORK_ORD_NO	               
							AND E.WORK_ORD_NO = X.WORK_ORD_NO
						GROUP BY
							E.GOODS_CD
							, MINOR_CD
							, MAJOR_CD
					) AA
					
				) BB
				GROUP BY GOODS_CD,  CHANGE_MINOR_CD
					
				UNION ALL
					
				SELECT 
					E.GOODS_CD
					, '200' AS MINOR_CD
					, ISNULL(SUM(FAULTY_CNT),0) FAULTY_CNT
				FROM 
					TB_EDGE_GOODS_FAULTY_ADM_CODE B, 
					TB_WORK_ORDER E,
					(
						SELECT DISTINCT 
							WORK_ORD_NO, 
							MAX(WORK_ORD_DATE) WORK_ORD_DATE 
						FROM TB_WORK_ORDER_OUTPUT_SUB X WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate} GROUP BY WORK_ORD_NO
					) X
				WHERE B.WORK_ORD_NO = X.WORK_ORD_NO				
					AND E.WORK_ORD_NO = X.WORK_ORD_NO
					AND MINOR_CD < '009'
				GROUP BY E.GOODS_CD
				
				UNION ALL

				SELECT 							
					GOODS_CD
					, A.MINOR_CD
					, ISNULL(SUM(A.FAULTY_CNT),0) FAULTY_CNT
				FROM TB_SHIP_INSPECT_ADM B, TB_SHIP_INSPECT_DTL A,  TB_WORK_ORDER E, (SELECT DISTINCT WORK_ORD_NO FROM TB_WORK_ORDER_OUTPUT_SUB X WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}) X
				WHERE B.WORK_ORD_NO = X.WORK_ORD_NO					
					AND E.WORK_ORD_NO = X.WORK_ORD_NO
					AND A.SHIP_INSP_IDX = B.IDX
					AND RE_INSP_STATUS = '002'
				GROUP BY A.MINOR_CD,GOODS_CD
			) AS t
			PIVOT(SUM(FAULTY_CNT) FOR MINOR_CD IN (
				${codeList} 
			)) AS PVT ) D
						
			ON AA.GOODS_CD = D.GOODS_CD
									
			ORDER BY AA.GOODS_CD
		]]>
	</select> 
	
	<!-- 불량집계현황(기간) 유형별 조회 -->
	<select id="faultyTypeTotalList" resultMap="GoodsFaultyAdmVo">
		<![CDATA[
			set ansi_warnings off
			set arithignore on
			set arithabort off

			SELECT
				--ISNULL(AA.TOTAL_OUTPUT_CNT, '') AS TOTAL_OUTPUT_CNT
				ISNULL(AA.USER_INPUT_INSPCT_CNT, '') AS USER_INPUT_INSPCT_CNT
				, ISNULL(AA.TOTAL_EDGE_FAULTY_CNT, '') AS TOTAL_EDGE_FAULTY_CNT
				, ISNULL(EDGE_FAULTY_PERCENT, '0') AS EDGE_FAULTY_PERCENT
				, ISNULL(SUM_METAL + SUM_FILM, '') AS SUM_SURFACE_FAULTY
				, ISNULL(CONVERT(NUMERIC(5,3), 100. * (SUM_METAL + SUM_FILM) / USER_INPUT_INSPCT_CNT ,5), '0')  AS SURFACE_FAULTY_PERCENT
				, ISNULL(SUM_METAL, '') AS SUM_METAL
				, ISNULL(CONVERT(NUMERIC(5,3), 100. * SUM_METAL / USER_INPUT_INSPCT_CNT, 5), '0')  AS METAL_PERCENT
				, ISNULL(SUM_FILM, '') AS SUM_FILM
				, ISNULL(CONVERT(NUMERIC(5,3), 100. * SUM_FILM / USER_INPUT_INSPCT_CNT, 5), '0') AS FILM_PERCENT
			FROM
				(SELECT
					--ISNULL(SUM(B.OUTPUT_CNT) + SUM(B.VISION_EDGE_CNT),0) AS TOTAL_OUTPUT_CNT
					SUM(B.USER_INPUT_INSPCT_CNT) USER_INPUT_INSPCT_CNT
					, ISNULL(SUM(B.EDGE_FAULTY_CNT),0) AS TOTAL_EDGE_FAULTY_CNT
					, ISNULL(CONVERT(NUMERIC(5,3),  (CONVERT(FLOAT,SUM(B.EDGE_FAULTY_CNT)) / (SUM(B.USER_INPUT_INSPCT_CNT) )) * 100 ,5),0) EDGE_FAULTY_PERCENT								
					, ISNULL((SELECT SUM(FAULTY_CNT)
								FROM TB_GOODS_FAULTY_ADM_CODE
								WHERE FAULTY_REG_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
								AND MAJOR_CD = '001'), 0) AS SUM_METAL	
					, ISNULL((SELECT SUM(FAULTY_CNT)
								FROM TB_GOODS_FAULTY_ADM_CODE
								WHERE FAULTY_REG_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
								AND MAJOR_CD = '002' ), 0) AS SUM_FILM
				FROM TB_WORK_ORDER_OUTPUT_SUB B
				WHERE APPEAR_INSPCT_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
				AND SUB_WORK_STATUS_CD = 'A') AA
			]]>
	</select>
	
	<!-- 불량집계현황(기간) 유형별 조회 Fa2-->
	<select id="faultyTypeTotalListFa2" resultMap="GoodsFaultyAdmVo">
		<![CDATA[
			set ansi_warnings off
			set arithignore on
			set arithabort off

			SELECT
				--ISNULL(AA.TOTAL_OUTPUT_CNT, '') AS TOTAL_OUTPUT_CNT
				ISNULL(AA.USER_INPUT_INSPCT_CNT, '') AS USER_INPUT_INSPCT_CNT
				, ISNULL(AA.TOTAL_EDGE_FAULTY_CNT, '') AS TOTAL_EDGE_FAULTY_CNT
				, ISNULL(CONVERT(NUMERIC(5,3), 100. *  TOTAL_EDGE_FAULTY_CNT / USER_INPUT_INSPCT_CNT ,5), '0')  AS EDGE_FAULTY_PERCENT
				, ISNULL(SUM_METAL + SUM_FILM, '') AS SUM_SURFACE_FAULTY
				, ISNULL(CONVERT(NUMERIC(5,3), 100. * (SUM_METAL + SUM_FILM) / USER_INPUT_INSPCT_CNT ,5), '0')  AS SURFACE_FAULTY_PERCENT
				, ISNULL(SUM_METAL, '') AS SUM_METAL
				, ISNULL(CONVERT(NUMERIC(5,3), 100. * SUM_METAL / USER_INPUT_INSPCT_CNT, 5), '0')  AS METAL_PERCENT
				, ISNULL(SUM_FILM, '') AS SUM_FILM
				, ISNULL(CONVERT(NUMERIC(5,3), 100. * SUM_FILM / USER_INPUT_INSPCT_CNT, 5), '0') AS FILM_PERCENT
			FROM
				(
				SELECT 
					SUM(Z.USER_INPUT_INSPCT_CNT) USER_INPUT_INSPCT_CNT
					, ISNULL(SUM(Z.TOTAL_EDGE_FAULTY_CNT),0) AS TOTAL_EDGE_FAULTY_CNT
					, ISNULL(CONVERT(NUMERIC(5,3), 100 * SUM(Z.TOTAL_EDGE_FAULTY_CNT) / SUM(Z.USER_INPUT_INSPCT_CNT) ), '0')  AS EDGE_FAULTY_PERCENT
					,  ISNULL((SELECT SUM(FAULTY_CNT)
								FROM TB_GOODS_FAULTY_ADM_CODE
								WHERE FAULTY_REG_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
								AND MAJOR_CD = '001'), 0) AS SUM_METAL	
					, ISNULL((SELECT SUM(FAULTY_CNT)
								FROM TB_GOODS_FAULTY_ADM_CODE
								WHERE FAULTY_REG_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
								AND MAJOR_CD = '002' ), 0) AS SUM_FILM
				FROM
					(
					SELECT
						--ISNULL(SUM(B.OUTPUT_CNT) + SUM(B.VISION_EDGE_CNT),0) AS TOTAL_OUTPUT_CNT
						SUM(B.USER_INPUT_INSPCT_CNT) USER_INPUT_INSPCT_CNT
						, ISNULL(SUM(B.EDGE_FAULTY_CNT),0) AS TOTAL_EDGE_FAULTY_CNT
						, ISNULL(CONVERT(NUMERIC(5,3),  SUM(B.EDGE_FAULTY_CNT) / (SUM(B.OUTPUT_CNT) + SUM(B.VISION_EDGE_CNT)) ,5),0) EDGE_FAULTY_PERCENT									
						, ISNULL((SELECT SUM(FAULTY_CNT)
									FROM TB_GOODS_FAULTY_ADM_CODE
									WHERE FAULTY_REG_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
									AND MAJOR_CD = '001'), 0) AS SUM_METAL	
						, ISNULL((SELECT SUM(FAULTY_CNT)
									FROM TB_GOODS_FAULTY_ADM_CODE
									WHERE FAULTY_REG_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
									AND MAJOR_CD = '002' ), 0) AS SUM_FILM
					FROM TB_WORK_ORDER_OUTPUT_SUB B
					WHERE APPEAR_INSPCT_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
					AND SUB_WORK_STATUS_CD = 'A'
				
					UNION ALL

					SELECT
						--ISNULL(SUM(B.OUTPUT_CNT) + SUM(B.VISION_EDGE_CNT),0) AS TOTAL_OUTPUT_CNT
						SUM(B.USER_INPUT_INSPCT_CNT) USER_INPUT_INSPCT_CNT
						, ISNULL(SUM(B.EDGE_FAULTY_CNT),0) AS TOTAL_EDGE_FAULTY_CNT
						, ISNULL(CONVERT(NUMERIC(5,3), 100 * SUM(B.EDGE_FAULTY_CNT) / SUM(B.USER_INPUT_INSPCT_CNT)), '0')  AS EDGE_FAULTY_PERCENT								
						, ISNULL((
									SELECT SUM(FAULTY_CNT)
										FROM TB_GOODS_FAULTY_ADM_CODE
										WHERE FAULTY_REG_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
										AND MAJOR_CD = '001'
									), 0) AS SUM_METAL	
						, ISNULL((SELECT SUM(FAULTY_CNT)
									FROM TB_GOODS_FAULTY_ADM_CODE
									WHERE FAULTY_REG_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
									AND MAJOR_CD = '002' ), 0) AS SUM_FILM
					FROM TB_WORK_ORDER_OUTPUT_SUB B
					WHERE EDGE_INSPCT_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
					AND SUB_WORK_STATUS_CD = 'E'
					) as Z
				) AA
			]]>
	</select>
	<!-- 불량집계현황(기간) 설비별 조회 2021. 11. 29부터 -->
	<select id="faultyEquipTotalDataList" resultType="HashMap" parameterType="mes.domain.qm.GoodsFaultyAdmVo">
		<![CDATA[
			SELECT
				--C.OUTPUT_CNT
				C.USER_INPUT_INSPCT_CNT
				, C.APPEAR_OUTPUT_CNT
				, C.FAULT_SUM
				, C.FAULT_PERCENT
				, C.EDGE_FAULTY_CNT
				, D.*				
			FROM
								(SELECT
					B.EQUIP_CD
					--, SUM(ISNULL(A.APPEAR_OUTPUT_CNT, 0)) + SUM(ISNULL(A.APPEAR_FAULTY_CNT, 0)) + SUM(ISNULL(A.EDGE_FAULTY_CNT, 0)) OUTPUT_CNT
					, SUM(ISNULL(A.USER_INPUT_INSPCT_CNT, 0)) USER_INPUT_INSPCT_CNT
					, SUM(ISNULL(A.APPEAR_OUTPUT_CNT, 0)) APPEAR_OUTPUT_CNT
					, SUM(ISNULL(A.APPEAR_FAULTY_CNT, 0)) + SUM(ISNULL(A.EDGE_FAULTY_CNT, 0)) FAULT_SUM
					--, CONVERT(NUMERIC(5,2), (CONVERT(FLOAT,(SUM(ISNULL(A.APPEAR_FAULTY_CNT, 0)) + SUM(ISNULL(A.EDGE_FAULTY_CNT, 0)))	) / CONVERT(FLOAT, SUM(ISNULL(A.APPEAR_OUTPUT_CNT, 0)) + SUM(ISNULL(A.APPEAR_FAULTY_CNT, 0)) + SUM(ISNULL(A.EDGE_FAULTY_CNT, 0)))) * 100) AS FAULT_PERCENT
					, CONVERT(NUMERIC(5,2), (CONVERT(FLOAT,(SUM(ISNULL(A.APPEAR_FAULTY_CNT, 0)) + SUM(ISNULL(A.EDGE_FAULTY_CNT, 0)))	) / CONVERT(FLOAT, SUM(ISNULL(A.USER_INPUT_INSPCT_CNT, 0))) * 100)) AS FAULT_PERCENT
					, SUM(ISNULL(A.EDGE_FAULTY_CNT, 0)) AS EDGE_FAULTY_CNT
				FROM TB_WORK_ORDER_OUTPUT_SUB A, TB_WORK_ORDER B, (SELECT DISTINCT WORK_ORD_NO, ORD_LOT_NO, FAULTY_REG_DATE FROM TB_GOODS_FAULTY_ADM_CODE
														WHERE FAULTY_REG_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
														GROUP BY WORK_ORD_NO, ORD_LOT_NO, FAULTY_REG_DATE) C
				WHERE A.WORK_ORD_NO = B.WORK_ORD_NO
				AND SUB_WORK_STATUS_CD = 'A'
				AND A.WORK_ORD_NO = C.WORK_ORD_NO
				AND A.ORD_LOT_NO = C.ORD_LOT_NO
				AND A.APPEAR_INSPCT_DATE = C.FAULTY_REG_DATE
				AND A.APPEAR_INSPCT_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
				GROUP BY B.EQUIP_CD ) C,
				(SELECT *
					FROM (
						SELECT
							C.EQUIP_CD
							, H.EQUIP_NM
							, MINOR_CD
							, SUM(FAULTY_CNT) FAULTY_CNT
						FROM	TB_GOODS_FAULTY_ADM_CODE B, TB_WORK_ORDER_OUTPUT_SUB A, TB_WORK_ORDER C, TB_EQUIP_CODE_ADM H
						WHERE	B.FAULTY_REG_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
						AND		B.ORD_LOT_NO =  A.ORD_LOT_NO
						AND		A.WORK_ORD_NO = C.WORK_ORD_NO
						AND		C.EQUIP_CD = H.EQUIP_CD
						GROUP BY C.EQUIP_CD, H.EQUIP_NM, MINOR_CD
					) as t
					PIVOT(SUM(FAULTY_CNT) for MINOR_CD IN (${codeList})) as PVT) D
			WHERE C.EQUIP_CD = D.EQUIP_CD
			ORDER BY D.EQUIP_NM
		]]>
	</select>
	<!-- 불량집계현황(기간) 설비별 조회 2021. 11. 29부터  + Fa2 -->
	<select id="faultyEquipTotalDataListFa2" resultType="HashMap" parameterType="mes.domain.qm.GoodsFaultyAdmVo">
		
			<!-- SELECT
				*
			FROM (
			
				SELECT
					B.EQUIP_CD
					, SUM(B.APPEAR_OUTPUT_CNT) AS APPEAR_OUTPUT_CNT
					, SUM(B.EDGE_FAULTY_CNT) AS EDGE_FAULTY_CNT
					, CONVERT(NUMERIC(5,2), (CONVERT(FLOAT, SUM(B.FAULT_SUM), 0 )) / CONVERT(FLOAT, SUM(B.USER_INPUT_INSPCT_CNT), 0) * 100) AS FAULT_PERCENT
					, SUM(B.FAULT_SUM) AS FAULT_SUM
					, SUM(B.USER_INPUT_INSPCT_CNT) AS USER_INPUT_INSPCT_CNT
				FROM (
	
					SELECT
						AA.EQUIP_CD
						, AA.APPEAR_INSPCT_DATE
						, SUM(AA.E_FAULTY_CNT) AS EDGE_FAULTY_CNT
						, SUM(AA.APPEAR_FAULTY_CNT) + SUM(E_FAULTY_CNT) AS FAULT_SUM
						, SUM(AA.APPEAR_OUTPUT_CNT) AS APPEAR_OUTPUT_CNT
						, SUM(AA.APPEAR_FAULTY_CNT) + SUM(E_FAULTY_CNT) + SUM(APPEAR_OUTPUT_CNT) AS USER_INPUT_INSPCT_CNT
					FROM
					(
						SELECT
							A.EQUIP_CD
							, A.WORK_ORD_NO
							, A.APPEAR_INSPCT_DATE
							, ISNULL(A.APPEAR_FAULTY_CNT,0) AS APPEAR_FAULTY_CNT
							, ISNULL(A.APPEAR_OUTPUT_CNT,0) AS APPEAR_OUTPUT_CNT
							, ISNULL(A.USER_INPUT_INSPCT_CNT,0) AS USER_INPUT_INSPCT_CNT
							, ISNULL(B.E_FAULTY_CNT,0) AS E_FAULTY_CNT
						FROM 
						(
							SELECT
								B.EQUIP_CD
								, A.WORK_ORD_NO
								, A.APPEAR_INSPCT_DATE
								, GUBUN
								, SUM(A.APPEAR_FAULTY_CNT) APPEAR_FAULTY_CNT
								, SUM(A.APPEAR_OUTPUT_CNT) APPEAR_OUTPUT_CNT
								, SUM(A.USER_INPUT_INSPCT_CNT) USER_INPUT_INSPCT_CNT
								,(SELECT SUM(OUTPUT_CNT) FROM TB_WORK_ORDER_OUTPUT_SUB X 
							WHERE X.WORK_ORD_NO = A.WORK_ORD_NO GROUP BY WORK_ORD_NO) AS APPEAR_OUTPUT_CNT
							    ,((SELECT SUM(OUTPUT_CNT) FROM TB_WORK_ORDER_OUTPUT_SUB X 
								WHERE X.WORK_ORD_NO = A.WORK_ORD_NO GROUP BY WORK_ORD_NO) + ISNULL(SUM(A.APPEAR_FAULTY_CNT),0)) AS USER_INPUT_INSPCT_CNT
								
							FROM TB_WORK_ORDER_OUTPUT_SUB A, TB_WORK_ORDER B
							WHERE A.APPEAR_INSPCT_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
							AND A.WORK_ORD_NO = B.WORK_ORD_NO
							GROUP BY A.WORK_ORD_NO, A.APPEAR_INSPCT_DATE, B.EQUIP_CD, GUBUN
						) A 
						LEFT OUTER JOIN 
						(
							SELECT
								B.EQUIP_CD
								, A.WORK_ORD_NO
								, A.FAULTY_REG_DATE
								, DAY_NIGHT_CD
								, SUM(A.FAULTY_CNT) E_FAULTY_CNT
							FROM TB_EDGE_GOODS_FAULTY_ADM_CODE A, TB_WORK_ORDER B
							WHERE A.FAULTY_REG_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
							AND A.WORK_ORD_NO = B.WORK_ORD_NO
							GROUP BY A.WORK_ORD_NO, A.FAULTY_REG_DATE, B.EQUIP_CD, DAY_NIGHT_CD
						) B
						ON A.EQUIP_CD = B.EQUIP_CD
						AND A.WORK_ORD_NO = B.WORK_ORD_NO
						AND A.APPEAR_INSPCT_DATE = B.FAULTY_REG_DATE
						AND ( A.GUBUN = B.DAY_NIGHT_CD  OR  B.DAY_NIGHT_CD IS NULL )
						
					) AA
					GROUP BY APPEAR_INSPCT_DATE, AA.EQUIP_CD
				) AS B
				GROUP BY
					B.EQUIP_CD
			) AS AA
			, (
				SELECT
					*
				FROM
				(
					SELECT
						C.EQUIP_CD
						, H.EQUIP_NM
						, MINOR_CD
						, ISNULL(SUM(FAULTY_CNT),0) FAULTY_CNT
					FROM	TB_GOODS_FAULTY_ADM_CODE B, TB_WORK_ORDER_OUTPUT_SUB A, TB_WORK_ORDER C, TB_EQUIP_CODE_ADM H
					WHERE	B.FAULTY_REG_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
					AND		B.ORD_LOT_NO =  A.ORD_LOT_NO
					AND		A.WORK_ORD_NO = C.WORK_ORD_NO
					AND		C.EQUIP_CD = H.EQUIP_CD
					GROUP BY C.EQUIP_CD, H.EQUIP_NM, MINOR_CD
				) AS t
				PIVOT(SUM(FAULTY_CNT) FOR MINOR_CD IN (
					${codeList}
				)) AS PVT
			) BB
			WHERE AA.EQUIP_CD = BB.EQUIP_CD
			ORDER BY BB.EQUIP_NM -->
			
		<![CDATA[
			SELECT
				*
			FROM (
			
				SELECT
					B.EQUIP_CD					
					,(SELECT EQUIP_NM FROM TB_EQUIP_CODE_ADM  WHERE EQUIP_CD = B.EQUIP_CD) EQUIP_NM
					, SUM(B.APPEAR_OUTPUT_CNT) AS APPEAR_OUTPUT_CNT
					, SUM(B.EDGE_FAULTY_CNT) AS EDGE_FAULTY_CNT
					, CONVERT(NUMERIC(5,2), (CONVERT(FLOAT, SUM(B.FAULT_SUM), 0 )) / CONVERT(FLOAT, SUM(B.USER_INPUT_INSPCT_CNT), 0) * 100) AS FAULT_PERCENT
					, SUM(B.FAULT_SUM) AS FAULT_SUM
					, SUM(B.RE_INSP_CNT) AS RE_INSP_CNT
					, SUM(B.USER_INPUT_INSPCT_CNT) AS USER_INPUT_INSPCT_CNT
				FROM (
	
					SELECT
						AA.EQUIP_CD						
						, SUM(AA.E_FAULTY_CNT) AS EDGE_FAULTY_CNT
						, SUM(AA.APPEAR_FAULTY_CNT) + SUM(E_FAULTY_CNT) + SUM(AA.RE_INSP_CNT) AS FAULT_SUM
						, SUM(AA.APPEAR_OUTPUT_CNT) AS APPEAR_OUTPUT_CNT
						, SUM(AA.RE_INSP_CNT) AS RE_INSP_CNT
						, SUM(AA.APPEAR_FAULTY_CNT) + SUM(E_FAULTY_CNT) + SUM(APPEAR_OUTPUT_CNT) + SUM(AA.RE_INSP_CNT) AS USER_INPUT_INSPCT_CNT
					FROM
					(
						SELECT
							A.EQUIP_CD					
							,(SELECT EQUIP_NM FROM TB_EQUIP_CODE_ADM  WHERE EQUIP_CD = A.EQUIP_CD) EQUIP_NM								
							, ISNULL(CC.FAULTY_CNT,0) AS APPEAR_FAULTY_CNT
							, ISNULL(C.FAULTY_CNT,0) AS RE_INSP_CNT
							, ISNULL(A.APPEAR_OUTPUT_CNT,0) AS APPEAR_OUTPUT_CNT
							, ISNULL(CC.FAULTY_CNT,0) +  ISNULL(A.APPEAR_OUTPUT_CNT,0) AS USER_INPUT_INSPCT_CNT
							, ISNULL(B.E_FAULTY_CNT,0) AS E_FAULTY_CNT
						FROM 
						(
							SELECT
								B.EQUIP_CD		
								,A.WORK_ORD_NO
								,SUM(A.OUTPUT_CNT) AS APPEAR_OUTPUT_CNT							
							FROM TB_WORK_ORDER_OUTPUT_SUB A, TB_WORK_ORDER B
							WHERE A.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
							AND A.WORK_ORD_NO = B.WORK_ORD_NO
							GROUP BY B.EQUIP_CD,A.WORK_ORD_NO
						) A 
						LEFT OUTER JOIN
						(SELECT
								X.WORK_ORD_NO
								, SUM(ISNULL(FAULTY_CNT,0)) FAULTY_CNT						
				
							FROM TB_GOODS_FAULTY_ADM_CODE Z,  (SELECT DISTINCT WORK_ORD_NO FROM TB_WORK_ORDER_OUTPUT_SUB X WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}) X
							WHERE 1=1 
							AND X.WORK_ORD_NO = Z.WORK_ORD_NO	
		
			
							GROUP BY X.WORK_ORD_NO) CC
						ON CC.WORK_ORD_NO = A.WORK_ORD_NO

						LEFT OUTER JOIN 
						(
							SELECT								
								 A.WORK_ORD_NO								
								, SUM(A.FAULTY_CNT) E_FAULTY_CNT
							FROM TB_EDGE_GOODS_FAULTY_ADM_CODE A, TB_WORK_ORDER B,  (SELECT DISTINCT WORK_ORD_NO FROM TB_WORK_ORDER_OUTPUT_SUB X WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}) X
							WHERE X.WORK_ORD_NO = A.WORK_ORD_NO
							AND A.WORK_ORD_NO = B.WORK_ORD_NO
							GROUP BY A.WORK_ORD_NO 
						) B
						ON  A.WORK_ORD_NO = B.WORK_ORD_NO		
						
						LEFT OUTER JOIN
						(SELECT 							
							X.WORK_ORD_NO
							, ISNULL(SUM(A.FAULTY_CNT),0) FAULTY_CNT
							,EQUIP_CD
						FROM TB_SHIP_INSPECT_ADM B, TB_SHIP_INSPECT_DTL A,  TB_WORK_ORDER E, (SELECT DISTINCT WORK_ORD_NO FROM TB_WORK_ORDER_OUTPUT_SUB X WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}) X
						WHERE B.WORK_ORD_NO = X.WORK_ORD_NO					
						AND E.WORK_ORD_NO = X.WORK_ORD_NO
						AND A.SHIP_INSP_IDX = B.IDX
						AND RE_INSP_STATUS = '002'
						GROUP BY X.WORK_ORD_NO,EQUIP_CD) C
						ON  A.WORK_ORD_NO = C.WORK_ORD_NO					
						
						
					) AA
					GROUP BY AA.EQUIP_CD
				) AS B
				GROUP BY
					B.EQUIP_CD
			) AS AA
			LEFT OUTER JOIN (
				SELECT
					*
				FROM
				(
					SELECT 
							
						MINOR_CD
						, ISNULL(SUM(FAULTY_CNT),0) FAULTY_CNT
						,EQUIP_CD
					
					FROM TB_GOODS_FAULTY_ADM_CODE B,  TB_WORK_ORDER E, (SELECT DISTINCT WORK_ORD_NO FROM TB_WORK_ORDER_OUTPUT_SUB X WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}) X
					WHERE B.WORK_ORD_NO = X.WORK_ORD_NO					
					AND E.WORK_ORD_NO = X.WORK_ORD_NO
					GROUP BY MINOR_CD,EQUIP_CD

					UNION ALL

					SELECT 
							
						'200' MINOR_CD
						, ISNULL(SUM(FAULTY_CNT),0) FAULTY_CNT
						,EQUIP_CD					
						
					FROM TB_EDGE_GOODS_FAULTY_ADM_CODE B,  TB_WORK_ORDER E, (SELECT DISTINCT WORK_ORD_NO FROM TB_WORK_ORDER_OUTPUT_SUB X WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}) X
					WHERE B.WORK_ORD_NO = X.WORK_ORD_NO					
					AND E.WORK_ORD_NO = X.WORK_ORD_NO
					AND MINOR_CD < '009'
					GROUP BY EQUIP_CD

					UNION ALL

					SELECT 							
							A.MINOR_CD
						, ISNULL(SUM(A.FAULTY_CNT),0) FAULTY_CNT
						,EQUIP_CD
					FROM TB_SHIP_INSPECT_ADM B, TB_SHIP_INSPECT_DTL A,  TB_WORK_ORDER E, (SELECT DISTINCT WORK_ORD_NO FROM TB_WORK_ORDER_OUTPUT_SUB X WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}) X
					WHERE B.WORK_ORD_NO = X.WORK_ORD_NO					
					AND E.WORK_ORD_NO = X.WORK_ORD_NO
					AND A.SHIP_INSP_IDX = B.IDX
					AND RE_INSP_STATUS = '002'
					GROUP BY A.MINOR_CD,EQUIP_CD
					
				) AS t
				PIVOT(SUM(FAULTY_CNT) FOR MINOR_CD IN (
					${codeList}
				)) AS PVT
			) BB
			ON 1=1
			AND AA.EQUIP_CD = BB.EQUIP_CD
			 

			ORDER BY EQUIP_NM
		]]>
	</select>
	
	
	<select id="faultyEquipTotalSumDataListFa2" resultType="HashMap" parameterType="mes.domain.qm.GoodsFaultyAdmVo">			
		<![CDATA[
			SELECT * FROM 
			(
				SELECT
					A.EQUIP_CD
					, (SELECT EQUIP_NM FROM TB_EQUIP_CODE_ADM X WHERE X.EQUIP_CD = A.EQUIP_CD) EQUIP_NM
					, ISNULL( SUM(CC.FAULTY_CNT), 0 ) +  ISNULL( SUM(B.FAULTY_CNT), 0 ) + ISNULL( SUM(APPEAR_OUTPUT_CNT), 0 ) USER_INPUT_INSPCT_CNT
					, ISNULL( SUM(APPEAR_OUTPUT_CNT), 0 ) APPEAR_OUTPUT_CNT
					, ISNULL( SUM(CC.FAULTY_CNT), 0 ) +  ISNULL( SUM(B.FAULTY_CNT), 0 ) + ISNULL( SUM(C.FAULTY_CNT), 0 )FAULT_SUM
					, ISNULL( SUM(CC.FAULTY_CNT), 0 ) APPEAR_FAULTY_CNT 
					, ISNULL( SUM(CC.MATRL_FAULTY_CNT), 0 ) MATRL_FAULTY_CNT
					, ISNULL( SUM(CC.FILM_FAULTY_CNT), 0 ) FILM_FAULTY_CNT
					, ISNULL( SUM(B.FAULTY_CNT), 0 ) EDGE_FAULTY_CNT
					, ISNULL( SUM(C.FAULTY_CNT), 0 ) AS RE_INSP_CNT
					, ( ISNULL( Sum(CC.FAULTY_CNT), 0 ) + ISNULL( SUM(B.FAULTY_CNT), 0 ) + ISNULL( SUM(C.FAULTY_CNT), 0 )) / ( ISNULL( SUM(CC.FAULTY_CNT), 0 ) + ISNULL( SUM(B.FAULTY_CNT), 0 ) + ISNULL( SUM(APPEAR_OUTPUT_CNT), 0 ) ) * 100 FAULT_PERCENT
				FROM 
				( 
					SELECT 
						A.WORK_ORD_NO,					 
						B.EQUIP_CD,
						(SUM(A.OUTPUT_CNT) ) AS APPEAR_OUTPUT_CNT			
					FROM TB_WORK_ORDER_OUTPUT_SUB A, TB_WORK_ORDER B
					WHERE 
						WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
						AND A.WORK_ORD_NO = B.WORK_ORD_NO
					GROUP BY A.WORK_ORD_NO, B.EQUIP_CD
				) A LEFT OUTER JOIN 
				(
					SELECT
						X.WORK_ORD_NO
						, SUM(ISNULL(FAULTY_CNT,0)) FAULTY_CNT		
						, SUM(IIF(Z.MAJOR_CD = '001' OR Z.MAJOR_CD = '004',ISNULL(FAULTY_CNT,0), 0)) MATRL_FAULTY_CNT	
						, SUM(IIF(Z.MAJOR_CD = '002' OR Z.MAJOR_CD = '005',ISNULL(FAULTY_CNT,0), 0)) FILM_FAULTY_CNT	
					FROM TB_GOODS_FAULTY_ADM_CODE Z, 
						(
							SELECT DISTINCT 
								WORK_ORD_NO
							FROM TB_WORK_ORDER_OUTPUT_SUB X 
							WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate} 
						) X
					WHERE 1=1 
						AND X.WORK_ORD_NO = Z.WORK_ORD_NO	
					GROUP BY X.WORK_ORD_NO
				) CC
				ON CC.WORK_ORD_NO = A.WORK_ORD_NO LEFT OUTER JOIN 
				( 
					SELECT 
						X.WORK_ORD_NO							  
						, ISNULL(SUM(FAULTY_CNT),0) FAULTY_CNT			
						, SUM(IIF(Z.MAJOR_CD = '001' OR Z.MAJOR_CD = '004',ISNULL(FAULTY_CNT,0), 0)) MATRL_FAULTY_CNT	
						, SUM(IIF(Z.MAJOR_CD = '002' OR Z.MAJOR_CD = '005',ISNULL(FAULTY_CNT,0), 0)) FILM_FAULTY_CNT		   
					FROM 
						TB_EDGE_GOODS_FAULTY_ADM_CODE Z, 
						(
							SELECT DISTINCT 
								WORK_ORD_NO
							FROM TB_WORK_ORDER_OUTPUT_SUB X 
							WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate} 
							GROUP BY WORK_ORD_NO
						) X
					WHERE X.WORK_ORD_NO = Z.WORK_ORD_NO	
					GROUP BY X.WORK_ORD_NO 
				) B
				ON A.WORK_ORD_NO = B.WORK_ORD_NO LEFT OUTER JOIN
				(
					SELECT 							
						X.WORK_ORD_NO
						, ISNULL(SUM(A.FAULTY_CNT),0) FAULTY_CNT
						, EQUIP_CD
					FROM TB_SHIP_INSPECT_ADM B, TB_SHIP_INSPECT_DTL A,  TB_WORK_ORDER E, (SELECT DISTINCT WORK_ORD_NO FROM TB_WORK_ORDER_OUTPUT_SUB X WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}) X
					WHERE B.WORK_ORD_NO = X.WORK_ORD_NO					
						AND E.WORK_ORD_NO = X.WORK_ORD_NO
						AND A.SHIP_INSP_IDX = B.IDX
						AND RE_INSP_STATUS = '002'
					GROUP BY X.WORK_ORD_NO,EQUIP_CD
				) C
				ON  A.WORK_ORD_NO = C.WORK_ORD_NO							
				GROUP BY A.EQUIP_CD	
			) AA LEFT OUTER JOIN 
			(
				SELECT
				*
			FROM
			(
				SELECT
					EQUIP_CD
					, CHANGE_MINOR_CD AS MINOR_CD
					, SUM(FAULTY_CNT) AS FAULTY_CNT
				FROM (
					SELECT 							
						EQUIP_CD
						, (SELECT MIN(BASE_CD) FROM TB_SYSTEM_COMMON_CODE X WHERE  X.BASE_GROUP_CD = '068' AND X.BASE_CD_NM =  MINOR_NM AND X.ETC1 = AA.CHANGE_MAJOR_CD) AS CHANGE_MINOR_CD
						, AA.MINOR_NM
						, AA.CHANGE_MAJOR_CD
						, AA.MINOR_CD
						, AA.MAJOR_CD
						, FAULTY_CNT
					FROM
					(
						SELECT		
							E.EQUIP_CD
							, MINOR_CD
							, (SELECT BASE_CD_NM FROM TB_SYSTEM_COMMON_CODE X WHERE  X.BASE_GROUP_CD = '068' AND X.BASE_CD = MINOR_CD) AS MINOR_NM
							, MAJOR_CD
							, ( CASE
								WHEN MAJOR_CD = '001' THEN '001'
								WHEN MAJOR_CD = '002' THEN '002'
								WHEN MAJOR_CD = '004' THEN '001'
								WHEN MAJOR_CD = '005' THEN '002'
								END
							) AS CHANGE_MAJOR_CD
							, SUM(FAULTY_CNT) AS FAULTY_CNT
						FROM TB_GOODS_FAULTY_ADM_CODE Z,  
							TB_WORK_ORDER E,
							(
								SELECT DISTINCT 
									WORK_ORD_NO 
								FROM TB_WORK_ORDER_OUTPUT_SUB X 
								WHERE 1=1 
									AND X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
							) X
						WHERE 1=1								
							AND X.WORK_ORD_NO = Z.WORK_ORD_NO	               
							AND E.WORK_ORD_NO = X.WORK_ORD_NO
						GROUP BY
							E.EQUIP_CD
							, MINOR_CD
							, MAJOR_CD
					) AA
					
				) BB
				GROUP BY EQUIP_CD,  CHANGE_MINOR_CD
					
				UNION ALL
					
				SELECT 
					E.EQUIP_CD
					, '200' AS MINOR_CD
					, ISNULL(SUM(FAULTY_CNT),0) FAULTY_CNT
				FROM 
					TB_EDGE_GOODS_FAULTY_ADM_CODE B, 
					TB_WORK_ORDER E,
					(
						SELECT DISTINCT 
							WORK_ORD_NO, 
							MAX(WORK_ORD_DATE) WORK_ORD_DATE 
						FROM TB_WORK_ORDER_OUTPUT_SUB X WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate} GROUP BY WORK_ORD_NO
					) X
				WHERE B.WORK_ORD_NO = X.WORK_ORD_NO				
					AND E.WORK_ORD_NO = X.WORK_ORD_NO
					AND MINOR_CD < '009'
				GROUP BY E.EQUIP_CD
				
				UNION ALL

				SELECT 				
					EQUIP_CD			
					, A.MINOR_CD
					, ISNULL(SUM(A.FAULTY_CNT),0) FAULTY_CNT
				FROM TB_SHIP_INSPECT_ADM B, TB_SHIP_INSPECT_DTL A,  TB_WORK_ORDER E, (SELECT DISTINCT WORK_ORD_NO FROM TB_WORK_ORDER_OUTPUT_SUB X WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}) X
				WHERE B.WORK_ORD_NO = X.WORK_ORD_NO					
					AND E.WORK_ORD_NO = X.WORK_ORD_NO
					AND A.SHIP_INSP_IDX = B.IDX
					AND RE_INSP_STATUS = '002'
				GROUP BY A.MINOR_CD,EQUIP_CD
			) AS t
			PIVOT(SUM(FAULTY_CNT) FOR MINOR_CD IN (
				${codeList} 
			)) AS PVT ) D
						
			ON AA.EQUIP_CD = D.EQUIP_CD
									
			ORDER BY AA.EQUIP_CD
		]]>
	</select>
	
	<!-- 일일업무실적보고 1동 Header-->
	<select id="goodsInspectDailyWorkHeader" resultMap="GoodsFaultyAdmVo">
		<![CDATA[
			SELECT 'QUARTER1' HEADER_GUBUN, 'MIN' HEADER_TYPE, MIN(A.DATE) HEADER_DATE, MIN(A.MONTH) HEADER_MONTH, MIN(A.DAY) HEADER_DAY,  MIN(A.ISO_WEEK) HEADER_ISO_WEEK, MIN(A.QUARTER) HEADER_QUARTER, '' HEADER_DAY_OF_WEEK FROM CALENDAR A, (SELECT QUARTER, YEAR FROM CALENDAR WHERE DATE = DATEADD(QUARTER, -3, #{chooseDateTo})) B
			WHERE A.QUARTER = B.QUARTER
			AND A.YEAR = B.YEAR
			
			UNION ALL
			
			SELECT 'QUARTER2' HEADER_GUBUN, 'MIN' HEADER_TYPE, MIN(A.DATE) HEADER_DATE, MIN(A.MONTH) HEADER_MONTH, MIN(A.DAY) HEADER_DAY,  MIN(A.ISO_WEEK) HEADER_ISO_WEEK, MIN(A.QUARTER) HEADER_QUARTER, '' HEADER_DAY_OF_WEEK FROM CALENDAR A, (SELECT QUARTER, YEAR FROM CALENDAR WHERE DATE = DATEADD(QUARTER, -2, #{chooseDateTo})) B
			WHERE A.QUARTER = B.QUARTER
			AND A.YEAR = B.YEAR
			
			UNION ALL
			
			SELECT 'QUARTER3' HEADER_GUBUN, 'MIN' HEADER_TYPE, MIN(A.DATE) HEADER_DATE, MIN(A.MONTH) HEADER_MONTH, MIN(A.DAY) HEADER_DAY,  MIN(A.ISO_WEEK) HEADER_ISO_WEEK, MIN(A.QUARTER) HEADER_QUARTER, '' HEADER_DAY_OF_WEEK FROM CALENDAR A, (SELECT QUARTER, YEAR FROM CALENDAR WHERE DATE = DATEADD(QUARTER, -1, #{chooseDateTo})) B
			WHERE A.QUARTER = B.QUARTER
			AND A.YEAR = B.YEAR
			
			UNION ALL
			
			SELECT 'QUARTER1' HEADER_GUBUN, 'MAX' HEADER_TYPE, MAX(A.DATE) HEADER_DATE, MAX(A.MONTH) HEADER_MONTH, MAX(A.DAY) HEADER_DAY,  MAX(A.ISO_WEEK) HEADER_ISO_WEEK, MAX(A.QUARTER) HEADER_QUARTER, '' HEADER_DAY_OF_WEEK FROM CALENDAR A, (SELECT QUARTER, YEAR FROM CALENDAR WHERE DATE = DATEADD(QUARTER, -3, #{chooseDateTo})) B
			WHERE A.QUARTER = B.QUARTER
			AND A.YEAR = B.YEAR
			
			UNION ALL
			
			SELECT 'QUARTER2' HEADER_GUBUN, 'MAX' HEADER_TYPE, MAX(A.DATE) HEADER_DATE, MAX(A.MONTH) HEADER_MONTH, MAX(A.DAY) HEADER_DAY,  MAX(A.ISO_WEEK) HEADER_ISO_WEEK, MAX(A.QUARTER) HEADER_QUARTER, '' HEADER_DAY_OF_WEEK FROM CALENDAR A, (SELECT QUARTER, YEAR FROM CALENDAR WHERE DATE = DATEADD(QUARTER, -2, #{chooseDateTo})) B
			WHERE A.QUARTER = B.QUARTER
			AND A.YEAR = B.YEAR
			
			UNION ALL
			
			SELECT 'QUARTER3' HEADER_GUBUN, 'MAX' HEADER_TYPE, MAX(A.DATE) HEADER_DATE, MAX(A.MONTH) HEADER_MONTH, MAX(A.DAY) HEADER_DAY,  MAX(A.ISO_WEEK) HEADER_ISO_WEEK, MAX(A.QUARTER) HEADER_QUARTER, '' HEADER_DAY_OF_WEEK FROM CALENDAR A, (SELECT QUARTER, YEAR FROM CALENDAR WHERE DATE = DATEADD(QUARTER, -1, #{chooseDateTo})) B
			WHERE A.QUARTER = B.QUARTER
			AND A.YEAR = B.YEAR
			
			UNION ALL
			
			SELECT 'MONTH1' HEADER_GUBUN, 'MIN' HEADER_TYPE, MIN(A.DATE) HEADER_DATE, MIN(A.MONTH) HEADER_MONTH, MIN(A.DAY) HEADER_DAY, MIN(A.ISO_WEEK) HEADER_ISO_WEEK, MIN(A.QUARTER) HEADER_QUARTER, '' HEADER_DAY_OF_WEEK FROM CALENDAR A, (SELECT MONTH, YEAR FROM CALENDAR WHERE DATE = DATEADD(MONTH, -3, #{chooseDateTo})) B
			WHERE A.MONTH = B.MONTH
			AND A.YEAR = B.YEAR
			
			UNION ALL
			
			SELECT 'MONTH2' HEADER_GUBUN, 'MIN' HEADER_TYPE, MIN(A.DATE) HEADER_DATE, MIN(A.MONTH) HEADER_MONTH, MIN(A.DAY) HEADER_DAY, MIN(A.ISO_WEEK) HEADER_ISO_WEEK, MIN(A.QUARTER) HEADER_QUARTER, '' HEADER_DAY_OF_WEEK FROM CALENDAR A, (SELECT MONTH, YEAR FROM CALENDAR WHERE DATE = DATEADD(MONTH, -2, #{chooseDateTo})) B
			WHERE A.MONTH = B.MONTH
			AND A.YEAR = B.YEAR
			
			UNION ALL
			
			SELECT 'MONTH3' HEADER_GUBUN, 'MIN' HEADER_TYPE, MIN(A.DATE) HEADER_DATE, MIN(A.MONTH) HEADER_MONTH, MIN(A.DAY) HEADER_DAY, MIN(A.ISO_WEEK) HEADER_ISO_WEEK, MIN(A.QUARTER) HEADER_QUARTER, '' HEADER_DAY_OF_WEEK FROM CALENDAR A, (SELECT MONTH, YEAR FROM CALENDAR WHERE DATE = DATEADD(MONTH, -1, #{chooseDateTo})) B
			WHERE A.MONTH = B.MONTH
			AND A.YEAR = B.YEAR
			
			UNION ALL
			
			SELECT 'MONTH1' HEADER_GUBUN, 'MAX' HEADER_TYPE, MAX(A.DATE) HEADER_DATE, MAX(A.MONTH) HEADER_MONTH, MAX(A.DAY) HEADER_DAY, MAX(A.ISO_WEEK) HEADER_ISO_WEEK, MAX(A.QUARTER) HEADER_QUARTER, '' HEADER_DAY_OF_WEEK FROM CALENDAR A, (SELECT MONTH, YEAR FROM CALENDAR WHERE DATE = DATEADD(MONTH, -3, #{chooseDateTo})) B
			WHERE A.MONTH = B.MONTH
			AND A.YEAR = B.YEAR
			
			UNION ALL
			
			SELECT 'MONTH2' HEADER_GUBUN, 'MAX' HEADER_TYPE, MAX(A.DATE) HEADER_DATE, MAX(A.MONTH) HEADER_MONTH, MAX(A.DAY) HEADER_DAY, MAX(A.ISO_WEEK) HEADER_ISO_WEEK, MAX(A.QUARTER) HEADER_QUARTER, '' HEADER_DAY_OF_WEEK FROM CALENDAR A, (SELECT MONTH, YEAR FROM CALENDAR WHERE DATE = DATEADD(MONTH, -2, #{chooseDateTo})) B
			WHERE A.MONTH = B.MONTH
			AND A.YEAR = B.YEAR
			
			UNION ALL
			
			SELECT 'MONTH3' HEADER_GUBUN, 'MAX' HEADER_TYPE, MAX(A.DATE) HEADER_DATE, MAX(A.MONTH) HEADER_MONTH, MAX(A.DAY) HEADER_DAY, MAX(A.ISO_WEEK) HEADER_ISO_WEEK, MAX(A.QUARTER) HEADER_QUARTER, '' HEADER_DAY_OF_WEEK FROM CALENDAR A, (SELECT MONTH, YEAR FROM CALENDAR WHERE DATE = DATEADD(MONTH, -1, #{chooseDateTo})) B
			WHERE A.MONTH = B.MONTH
			AND A.YEAR = B.YEAR
			
			UNION ALL
																
			SELECT 'WEEK1' HEADER_GUBUN, 'MIN' HEADER_TYPE, MIN(A.DATE) HEADER_DATE, MIN(A.MONTH) HEADER_MONTH, MIN(A.DAY) HEADER_DAY,  MIN(A.ISO_WEEK) HEADER_ISO_WEEK, MIN(A.QUARTER) HEADER_QUARTER, '' HEADER_DAY_OF_WEEK FROM CALENDAR A, (SELECT ISO_WEEK, YEAR FROM CALENDAR WHERE DATE = DATEADD(WEEK, -3, #{chooseDateTo})) B
			WHERE A.ISO_WEEK = B.ISO_WEEK
			AND A.YEAR = B.YEAR
			
			UNION ALL
			
			SELECT 'WEEK2' HEADER_GUBUN, 'MIN' HEADER_TYPE, MIN(A.DATE) HEADER_DATE, MIN(A.MONTH) HEADER_MONTH, MIN(A.DAY) HEADER_DAY,  MIN(A.ISO_WEEK) HEADER_ISO_WEEK, MIN(A.QUARTER) HEADER_QUARTER, '' HEADER_DAY_OF_WEEK FROM CALENDAR A, (SELECT ISO_WEEK, YEAR FROM CALENDAR WHERE DATE = DATEADD(WEEK, -2, #{chooseDateTo})) B
			WHERE A.ISO_WEEK = B.ISO_WEEK
			AND A.YEAR = B.YEAR
			
			UNION ALL
			
			SELECT 'WEEK3' HEADER_GUBUN, 'MIN' HEADER_TYPE, MIN(A.DATE) HEADER_DATE, MIN(A.MONTH) HEADER_MONTH, MIN(A.DAY) HEADER_DAY,  MIN(A.ISO_WEEK) HEADER_ISO_WEEK, MIN(A.QUARTER) HEADER_QUARTER, '' HEADER_DAY_OF_WEEK FROM CALENDAR A, (SELECT ISO_WEEK, YEAR FROM CALENDAR WHERE DATE = DATEADD(WEEK, -1, #{chooseDateTo})) B
			WHERE A.ISO_WEEK = B.ISO_WEEK
			AND A.YEAR = B.YEAR
			
			UNION ALL
			
			SELECT 'WEEK1' HEADER_GUBUN, 'MAX' HEADER_TYPE, MAX(A.DATE) HEADER_DATE, MAX(A.MONTH) HEADER_MONTH, MAX(A.DAY) HEADER_DAY, MAX(A.ISO_WEEK) HEADER_ISO_WEEK, MAX(A.QUARTER) HEADER_QUARTER, '' HEADER_DAY_OF_WEEK FROM CALENDAR A, (SELECT ISO_WEEK, YEAR FROM CALENDAR WHERE DATE = DATEADD(WEEK, -3, #{chooseDateTo})) B
			WHERE A.ISO_WEEK = B.ISO_WEEK
			AND A.YEAR = B.YEAR
			
			UNION ALL
			
			SELECT 'WEEK2' HEADER_GUBUN, 'MAX' HEADER_TYPE, MAX(A.DATE) HEADER_DATE, MAX(A.MONTH) HEADER_MONTH, MAX(A.DAY) HEADER_DAY, MAX(A.ISO_WEEK) HEADER_ISO_WEEK, MAX(A.QUARTER) HEADER_QUARTER, '' HEADER_DAY_OF_WEEK FROM CALENDAR A, (SELECT ISO_WEEK, YEAR FROM CALENDAR WHERE DATE = DATEADD(WEEK, -2, #{chooseDateTo})) B
			WHERE A.ISO_WEEK = B.ISO_WEEK
			AND A.YEAR = B.YEAR
			
			UNION ALL
			
			SELECT 'WEEK3' HEADER_GUBUN,'MAX' HEADER_TYPE, MAX(A.DATE) HEADER_DATE, MAX(A.MONTH) HEADER_MONTH, MAX(A.DAY) HEADER_DAY, MAX(A.ISO_WEEK) HEADER_ISO_WEEK, MAX(A.QUARTER) HEADER_QUARTER, '' HEADER_DAY_OF_WEEK FROM CALENDAR A, (SELECT ISO_WEEK, YEAR FROM CALENDAR WHERE DATE = DATEADD(WEEK, -1, #{chooseDateTo})) B
			WHERE A.ISO_WEEK = B.ISO_WEEK
			AND A.YEAR = B.YEAR
			
			UNION ALL
			
			SELECT 'DAY1' HEADER_GUBUN, '-' HEADER_TYPE, A.DATE HEADER_DATE, A.MONTH HEADER_MONTH, A.DAY HEADER_DAY, A.ISO_WEEK HEADE_ISO_WEEK, A.QUARTER HEADER_QUARTER, A.DAY_OF_WEEK HEADER_DAY_OF_WEEK FROM CALENDAR A WHERE DATE = DATEADD(DD, -13, #{chooseDateTo})
			UNION ALL
			SELECT 'DAY2' HEADER_GUBUN, '-' HEADER_TYPE, A.DATE HEADER_DATE, A.MONTH HEADER_MONTH, A.DAY HEADER_DAY, A.ISO_WEEK HEADE_ISO_WEEK, A.QUARTER HEADER_QUARTER, A.DAY_OF_WEEK HEADER_DAY_OF_WEEK FROM CALENDAR A WHERE DATE = DATEADD(DD, -12, #{chooseDateTo})
			UNION ALL
			SELECT 'DAY3' HEADER_GUBUN, '-' HEADER_TYPE, A.DATE HEADER_DATE, A.MONTH HEADER_MONTH, A.DAY HEADER_DAY, A.ISO_WEEK HEADE_ISO_WEEK, A.QUARTER HEADER_QUARTER, A.DAY_OF_WEEK HEADER_DAY_OF_WEEK FROM CALENDAR A WHERE DATE = DATEADD(DD, -11, #{chooseDateTo})
			UNION ALL
			SELECT 'DAY4' HEADER_GUBUN, '-' HEADER_TYPE, A.DATE HEADER_DATE, A.MONTH HEADER_MONTH, A.DAY HEADER_DAY, A.ISO_WEEK HEADE_ISO_WEEK, A.QUARTER HEADER_QUARTER, A.DAY_OF_WEEK HEADER_DAY_OF_WEEK FROM CALENDAR A WHERE DATE = DATEADD(DD, -10, #{chooseDateTo})
			UNION ALL
			SELECT 'DAY5' HEADER_GUBUN, '-' HEADER_TYPE, A.DATE HEADER_DATE, A.MONTH HEADER_MONTH, A.DAY HEADER_DAY, A.ISO_WEEK HEADE_ISO_WEEK, A.QUARTER HEADER_QUARTER, A.DAY_OF_WEEK HEADER_DAY_OF_WEEK FROM CALENDAR A WHERE DATE = DATEADD(DD, -9, #{chooseDateTo})
			UNION ALL
			SELECT 'DAY6' HEADER_GUBUN, '-' HEADER_TYPE, A.DATE HEADER_DATE, A.MONTH HEADER_MONTH, A.DAY HEADER_DAY, A.ISO_WEEK HEADE_ISO_WEEK, A.QUARTER HEADER_QUARTER, A.DAY_OF_WEEK HEADER_DAY_OF_WEEK FROM CALENDAR A WHERE DATE = DATEADD(DD, -8, #{chooseDateTo})
			UNION ALL
			SELECT 'DAY7' HEADER_GUBUN, '-' HEADER_TYPE, A.DATE HEADER_DATE, A.MONTH HEADER_MONTH, A.DAY HEADER_DAY, A.ISO_WEEK HEADE_ISO_WEEK, A.QUARTER HEADER_QUARTER, A.DAY_OF_WEEK HEADER_DAY_OF_WEEK FROM CALENDAR A WHERE DATE = DATEADD(DD, -7, #{chooseDateTo})
			UNION ALL
			SELECT 'DAY8' HEADER_GUBUN, '-' HEADER_TYPE, A.DATE HEADER_DATE, A.MONTH HEADER_MONTH, A.DAY HEADER_DAY, A.ISO_WEEK HEADE_ISO_WEEK, A.QUARTER HEADER_QUARTER, A.DAY_OF_WEEK HEADER_DAY_OF_WEEK FROM CALENDAR A WHERE DATE = DATEADD(DD, -6, #{chooseDateTo})
			UNION ALL
			SELECT 'DAY9' HEADER_GUBUN, '-' HEADER_TYPE, A.DATE HEADER_DATE, A.MONTH HEADER_MONTH, A.DAY HEADER_DAY, A.ISO_WEEK HEADE_ISO_WEEK, A.QUARTER HEADER_QUARTER, A.DAY_OF_WEEK HEADER_DAY_OF_WEEK FROM CALENDAR A WHERE DATE = DATEADD(DD, -5, #{chooseDateTo})
			UNION ALL
			SELECT 'DAY10' HEADER_GUBUN, '-' HEADER_TYPE, A.DATE HEADER_DATE, A.MONTH HEADER_MONTH, A.DAY HEADER_DAY, A.ISO_WEEK HEADE_ISO_WEEK, A.QUARTER HEADER_QUARTER, A.DAY_OF_WEEK HEADER_DAY_OF_WEEK FROM CALENDAR A WHERE DATE = DATEADD(DD, -4, #{chooseDateTo})
			UNION ALL
			SELECT 'DAY11' HEADER_GUBUN, '-' HEADER_TYPE, A.DATE HEADER_DATE, A.MONTH HEADER_MONTH, A.DAY HEADER_DAY, A.ISO_WEEK HEADE_ISO_WEEK, A.QUARTER HEADER_QUARTER, A.DAY_OF_WEEK HEADER_DAY_OF_WEEK FROM CALENDAR A WHERE DATE = DATEADD(DD, -3, #{chooseDateTo})
			UNION ALL
			SELECT 'DAY12' HEADER_GUBUN, '-' HEADER_TYPE, A.DATE HEADER_DATE, A.MONTH HEADER_MONTH, A.DAY HEADER_DAY, A.ISO_WEEK HEADE_ISO_WEEK, A.QUARTER HEADER_QUARTER, A.DAY_OF_WEEK HEADER_DAY_OF_WEEK FROM CALENDAR A WHERE DATE = DATEADD(DD, -2, #{chooseDateTo})
			UNION ALL
			SELECT 'DAY13' HEADER_GUBUN, '-' HEADER_TYPE, A.DATE HEADER_DATE, A.MONTH HEADER_MONTH, A.DAY HEADER_DAY, A.ISO_WEEK HEADE_ISO_WEEK, A.QUARTER HEADER_QUARTER, A.DAY_OF_WEEK HEADER_DAY_OF_WEEK FROM CALENDAR A WHERE DATE = DATEADD(DD, -1, #{chooseDateTo})
			UNION ALL
			SELECT 'DAY14' HEADER_GUBUN, '-' HEADER_TYPE, A.DATE HEADER_DATE, A.MONTH HEADER_MONTH, A.DAY HEADER_DAY, A.ISO_WEEK HEADE_ISO_WEEK, A.QUARTER HEADER_QUARTER, A.DAY_OF_WEEK HEADER_DAY_OF_WEEK FROM CALENDAR A WHERE DATE = DATEADD(DD, -0, #{chooseDateTo})
		]]>
	</select>
	
	<!-- 일일업무실적보고 1동 통계 현황(21.11.29 부터 생산실적 기준)-->
	<select id="goodsInspectDailyWorkContent" resultMap="GoodsFaultyAdmVo">
		<![CDATA[
			DECLARE @minDateQuarter VARCHAR(8)
			DECLARE @maxDateQuarter VARCHAR(8)
			SELECT @minDateQuarter = MIN(A.DATE)
			FROM CALENDAR A, (SELECT YEAR, QUARTER, DATE FROM CALENDAR WHERE DATE = DATEADD(QUARTER, -3, #{appearInspctDate})) B
			WHERE A.YEAR = B.YEAR
			AND A.QUARTER = B.QUARTER
			SELECT @maxDateQuarter = MAX(A.DATE)
			FROM CALENDAR A, (SELECT YEAR, QUARTER, DATE FROM CALENDAR WHERE DATE = DATEADD(QUARTER, -1, #{appearInspctDate})) B
			WHERE A.YEAR = B.YEAR
			AND A.QUARTER = B.QUARTER
			PRINT(@minDateQuarter + '최소 분기')
			PRINT(@maxDateQuarter + '최대 분기')
			
			DECLARE @minDateMonth VARCHAR(8)
			DECLARE @maxDateMonth VARCHAR(8)
			SELECT @minDateMonth = MIN(A.DATE)
			FROM CALENDAR A, (SELECT YEAR, MONTH, DATE FROM CALENDAR WHERE DATE = DATEADD(MONTH, -3, #{appearInspctDate})) B
			WHERE A.YEAR = B.YEAR
			AND A.MONTH = B.MONTH
			SELECT @maxDateMonth = MAX(A.DATE)
			FROM CALENDAR A, (SELECT YEAR, MONTH, DATE FROM CALENDAR WHERE DATE = DATEADD(MONTH, -1, #{appearInspctDate})) B
			WHERE A.YEAR = B.YEAR
			AND A.MONTH = B.MONTH
			PRINT(@minDateMonth + '최소 월')
			PRINT(@maxDateMonth + '최소 월')
			
			DECLARE @minDateWeek VARCHAR(8)
			DECLARE @maxDateWeek VARCHAR(8)
			SELECT @minDateWeek = MIN(A.DATE)
			FROM CALENDAR A, (SELECT YEAR, ISO_WEEK, DATE FROM CALENDAR WHERE DATE = DATEADD(WEEK, -3, #{appearInspctDate})) B
			WHERE A.YEAR = B.YEAR
			AND A.ISO_WEEK = B.ISO_WEEK
			SELECT @maxDateWeek = MAX(A.DATE)
			FROM CALENDAR A, (SELECT YEAR, ISO_WEEK, DATE FROM CALENDAR WHERE DATE = DATEADD(WEEK, -1, #{appearInspctDate})) B
			WHERE A.YEAR = B.YEAR
			AND A.ISO_WEEK = B.ISO_WEEK
			PRINT(@minDateWeek + '최소 주')
			PRINT(@maxDateWeek + '최대 주')
			
			DECLARE @minDate VARCHAR(8)
			DECLARE @maxDate VARCHAR(8)
			SELECT @minDate = CONVERT(CHAR(8), DATEADD(DAY, -13, #{appearInspctDate}), 112)
			SELECT @maxDate = CONVERT(CHAR(8), DATEADD(DAY, -0, #{appearInspctDate}), 112)
			PRINT(@minDate + '최소 2주치중 날짜')
			PRINT(@maxDate + '최대 2주치중 날짜')
			
			SELECT
				KKK.GOODS_CD
				, GOODS_NM
				, KKK.NO1
				, G.MODEL
				, QUTY_CD
				, ISNULL((SELECT BASE_CD_NM FROM TB_SYSTEM_COMMON_CODE B WHERE B.BASE_GROUP_CD='007' AND B.BASE_CD = M.QUTY_CD), KKK.GOODS_CD) QUTY_NM
				, KKK.ITEM_NM
				, KKK.QUARTER1
				, KKK.QUARTER2
				, KKK.QUARTER3
				, KKK.MONTH1
				, KKK.MONTH2
				, KKK.MONTH3
				, KKK.WEEK1
				, KKK.WEEK2
				, KKK.WEEK3
				, KKK.DAY1
				, KKK.DAY2
				, KKK.DAY3
				, KKK.DAY4
				, KKK.DAY5
				, KKK.DAY6
				, KKK.DAY7
				, KKK.DAY8
				, KKK.DAY9
				, KKK.DAY10
				, KKK.DAY11
				, KKK.DAY12
				, KKK.DAY13
				, KKK.DAY14
			FROM
				TB_GOODS_CODE_ADM G RIGHT JOIN
				(SELECT
					AAA.GOODS_CD
					, AAA.NO1
					, AAA.ITEM_NM
					, AAA.QUARTER1
					, AAA.QUARTER2
					, AAA.QUARTER3
					, BBB.MONTH1
					, BBB.MONTH2
					, BBB.MONTH3
					, CCC.WEEK1
					, CCC.WEEK2
					, CCC.WEEK3
					, DDD.DATE1 AS DAY1
					, DDD.DATE2 AS DAY2
					, DDD.DATE3 AS DAY3
					, DDD.DATE4 AS DAY4 
					, DDD.DATE5 AS DAY5
					, DDD.DATE6 AS DAY6
					, DDD.DATE7 AS DAY7
					, DDD.DATE8 AS DAY8
					, DDD.DATE9 AS DAY9
					, DDD.DATE10 AS DAY10
					, DDD.DATE11 AS DAY11
					, DDD.DATE12 AS DAY12
					, DDD.DATE13 AS DAY13
					, DDD.DATE14 AS DAY14
				FROM
					(SELECT
						GOODS_CD
						, NO1
						, CASE WHEN NO1 = 1 THEN '생산수량' WHEN NO1 = 2 THEN '양품수량' ELSE '양품률'  END ITEM_NM
						, MAX(QUARTER1) QUARTER1
						, MAX(QUARTER2) QUARTER2
						, MAX(QUARTER3) QUARTER3
					FROM
						(SELECT
							BB.GOODS_CD
							, CC.NO1
							, CASE WHEN CC.NO1 = 1 AND BB.QUARTER_ORD = 1 THEN MAX(OUTPUT_CNT) WHEN CC.NO1 = 2 AND BB.QUARTER_ORD = 1 THEN MAX(APPEAR_OUTPUT_CNT) WHEN CC.NO1 = 3 AND BB.QUARTER_ORD = 1 THEN ROUND(CONVERT(float, MAX(APPEAR_OUTPUT_CNT)) * 100 / CONVERT(float, MAX(OUTPUT_CNT)), 2) END QUARTER1
							, CASE WHEN CC.NO1 = 1 AND BB.QUARTER_ORD = 2 THEN MAX(OUTPUT_CNT) WHEN CC.NO1 = 2 AND BB.QUARTER_ORD = 2 THEN MAX(APPEAR_OUTPUT_CNT) WHEN CC.NO1 = 3 AND BB.QUARTER_ORD = 2 THEN ROUND(CONVERT(float, MAX(APPEAR_OUTPUT_CNT)) * 100 / CONVERT(float, MAX(OUTPUT_CNT)), 2) END QUARTER2
							, CASE WHEN CC.NO1 = 1 AND BB.QUARTER_ORD = 3 THEN MAX(OUTPUT_CNT) WHEN CC.NO1 = 2 AND BB.QUARTER_ORD = 3 THEN MAX(APPEAR_OUTPUT_CNT) WHEN CC.NO1 = 3 AND BB.QUARTER_ORD = 3 THEN ROUND(CONVERT(float, MAX(APPEAR_OUTPUT_CNT)) * 100 / CONVERT(float, MAX(OUTPUT_CNT)), 2) END QUARTER3
							FROM
								(SELECT
									CASE WHEN NO1 = 1 THEN '전체' WHEN NO1 = 2 AND TT='A' THEN '전체AL' WHEN NO1 = 3 AND TT='N' THEN '전체NICU' ELSE GOODS_CD END GOODS_CD
									, MAX(TT) TT
									, MAX(FLAG) FLAG
									, QUARTER_ORD QUARTER_ORD
									, CASE WHEN NO1 = 1 THEN SUM(OUTPUT_CNT) WHEN NO1 = 2 AND MAX(TT) = 'A' THEN SUM(OUTPUT_CNT) WHEN NO1 = 3 AND MAX(TT) = 'N' THEN SUM(OUTPUT_CNT) ELSE MAX(OUTPUT_CNT) END OUTPUT_CNT
									, CASE WHEN NO1 = 1 THEN SUM(APPEAR_OUTPUT_CNT) WHEN NO1 = 2 AND MAX(TT) = 'A' THEN SUM(APPEAR_OUTPUT_CNT) WHEN NO1 = 3 AND MAX(TT) = 'N' THEN SUM(APPEAR_OUTPUT_CNT) ELSE MAX(APPEAR_OUTPUT_CNT) END APPEAR_OUTPUT_CNT
								FROM
									(SELECT
										GOODS_CD
										, SUBSTRING(GOODS_CD, 1, 1) TT
										, CASE WHEN SUBSTRING(GOODS_CD, 1, 1) = 'A' THEN 1 ELSE 2 END FLAG
										, SUM(OUTPUT_CNT) OUTPUT_CNT
										, SUM(APPEAR_OUTPUT_CNT) APPEAR_OUTPUT_CNT
										--, ROUND(CONVERT(float, SUM(APPEAR_OUTPUT_CNT)) * 100 / CONVERT(float, SUM(OUTPUT_CNT)), 2) TOT_PCT
										, QUARTER_ORD
									FROM
										(SELECT
											A.EQUIP_CD
											, A.GOODS_CD
											, A.OUTPUT_CNT
											, A.APPEAR_OUTPUT_CNT
											, B.YEAR
											, B.DATE
											, B.WEEK
											, B.QUARTER
											, C.QUARTER_ORD
										FROM
											(SELECT
												B.GOODS_CD
												, USE_YN_CD
												, A.EQUIP_CD
												, A.OUTPUT_CNT
												, A.APPEAR_OUTPUT_CNT
												, ISNULL(A.APPEAR_INSPCT_DATE, @minDateQuarter) APPEAR_INSPCT_DATE
											FROM
											(SELECT
												A.WORK_ORD_NO
												, A.EQUIP_CD
												, A.GOODS_CD
												--, B.USER_INPUT_INSPCT_CNT OUTPUT_CNT
												--, B.APPEAR_OUTPUT_CNT
												,((SELECT SUM(X.OUTPUT_CNT) FROM TB_WORK_ORDER_OUTPUT_SUB X 
								WHERE X.WORK_ORD_NO = A.WORK_ORD_NO GROUP BY WORK_ORD_NO) + 								
								(SELECT SUM(X.APPEAR_FAULTY_CNT) FROM TB_WORK_ORDER_OUTPUT_SUB X 
								WHERE X.WORK_ORD_NO = A.WORK_ORD_NO GROUP BY WORK_ORD_NO)+ 								
								(SELECT SUM(X.EDGE_FAULTY_CNT) FROM TB_WORK_ORDER_OUTPUT_SUB X 
								WHERE X.WORK_ORD_NO = A.WORK_ORD_NO GROUP BY WORK_ORD_NO)
																
								) AS OUTPUT_CNT
												, (SELECT SUM(X.OUTPUT_CNT) FROM TB_WORK_ORDER_OUTPUT_SUB X 
							WHERE X.WORK_ORD_NO = A.WORK_ORD_NO GROUP BY WORK_ORD_NO) AS APPEAR_OUTPUT_CNT
												, B.APPEAR_INSPCT_DATE
											FROM TB_WORK_ORDER A, TB_WORK_ORDER_OUTPUT_SUB B
											WHERE A.WORK_ORD_NO = B.WORK_ORD_NO
											AND B.APPEAR_INSPCT_DATE BETWEEN @minDateQuarter AND @maxDateQuarter
											AND B.APPEAR_INSPCT_DATE >= '20211129'
										]]>
											AND A.EQUIP_CD IN (${equipCd})
											AND A.GOODS_CD IN (${goodsCd})
									<choose>
										<when test="qutyCd == '001'">
											AND 'A' = SUBSTRING(A.GOODS_CD, 1, 1)
										</when>
										<when test="qutyCd == '002'">
											AND 'N' = SUBSTRING(A.GOODS_CD, 1, 1)
										</when>
										<otherwise>
												
										</otherwise>
									</choose>
									<![CDATA[
									
											UNION ALL
										
											SELECT
												A.WORK_ORD_NO
												, A.EQUIP_CD
												, A.GOODS_CD
												, A.OUTPUT_CNT
												, A.APPEAR_OUTPUT_CNT
												, A.APPEAR_INSPCT_DATE
											FROM TB_WORK_ORDER A
											WHERE A.APPEAR_INSPCT_DATE BETWEEN @minDateQuarter AND @maxDateQuarter
											AND A.APPEAR_INSPCT_DATE < '20211129' ) A RIGHT OUTER JOIN TB_GOODS_CODE_ADM B ON B.USE_YN_CD = '001'
											AND A.GOODS_CD = B.GOODS_CD
										]]>
											AND A.EQUIP_CD IN (${equipCd})
											AND A.GOODS_CD IN (${goodsCd})
									<choose>
										<when test="qutyCd == '001'">
											AND 'A' = SUBSTRING(B.GOODS_CD, 1, 1)
										</when>
										<when test="qutyCd == '002'">
											AND 'N' = SUBSTRING(B.GOODS_CD, 1, 1)
										</when>
										<otherwise>
													
										</otherwise>
									</choose>
										<![CDATA[
											) A,
											CALENDAR B,
											(SELECT
												MAX(C.DATE) DATE
												, C.QUARTER
												, RANK() OVER (ORDER BY MAX(DATE) ASC) QUARTER_ORD
											FROM CALENDAR C
											WHERE C.DATE BETWEEN @minDateQuarter AND @maxDateQuarter
											GROUP BY QUARTER) C
										WHERE A.APPEAR_INSPCT_DATE BETWEEN @minDateQuarter AND @maxDateQuarter
										AND A.APPEAR_INSPCT_DATE = B.DATE
										AND B.QUARTER = C.QUARTER
										AND A.USE_YN_CD = '001'
									) AA
									GROUP BY GOODS_CD, QUARTER_ORD
								) BB,
								(SELECT TOP 3 ROW_NUMBER() OVER(ORDER BY (SELECT 1)) NO1 FROM CALENDAR) CC
								
								GROUP BY CC.NO1, BB.QUARTER_ORD,
								CASE WHEN NO1 = 1 THEN '전체' WHEN NO1 = 2 AND TT = 'A' THEN '전체AL' WHEN NO1 = 3 AND TT = 'N' THEN '전체NICU' ELSE GOODS_CD END
								
								) BB,
								(SELECT TOP 3 ROW_NUMBER() OVER(ORDER BY (SELECT 1)) NO1 FROM CALENDAR) CC
								GROUP BY GOODS_CD, NO1, QUARTER_ORD
							) DD
							GROUP BY GOODS_CD, NO1
							--ORDER BY GOODS_CD, NO1 ASC
						) AAA,
						
						(SELECT
							GOODS_CD
							, NO1
							, CASE WHEN NO1 = 1 THEN '생산수량' WHEN NO1 = 2 THEN '양품수량' ELSE '양품률'  END ITEM_NM
							, MAX(MONTH1) MONTH1
							, MAX(MONTH2) MONTH2
							, MAX(MONTH3) MONTH3
						FROM
							( SELECT
								BB.GOODS_CD
								, CC.NO1
								, CASE WHEN CC.NO1 = 1 AND BB.MONTH_ORD = 1 THEN MAX(OUTPUT_CNT) WHEN CC.NO1 = 2 AND BB.MONTH_ORD = 1 THEN MAX(APPEAR_OUTPUT_CNT) WHEN CC.NO1 = 3 AND BB.MONTH_ORD = 1 THEN ROUND(CONVERT(float, MAX(APPEAR_OUTPUT_CNT)) * 100 / CONVERT(float, MAX(OUTPUT_CNT)), 2) END MONTH1
								, CASE WHEN CC.NO1 = 1 AND BB.MONTH_ORD = 2 THEN MAX(OUTPUT_CNT) WHEN CC.NO1 = 2 AND BB.MONTH_ORD = 2 THEN MAX(APPEAR_OUTPUT_CNT) WHEN CC.NO1 = 3 AND BB.MONTH_ORD = 2 THEN ROUND(CONVERT(float, MAX(APPEAR_OUTPUT_CNT)) * 100 / CONVERT(float, MAX(OUTPUT_CNT)), 2) END MONTH2
								, CASE WHEN CC.NO1 = 1 AND BB.MONTH_ORD = 3 THEN MAX(OUTPUT_CNT) WHEN CC.NO1 = 2 AND BB.MONTH_ORD = 3 THEN MAX(APPEAR_OUTPUT_CNT) WHEN CC.NO1 = 3 AND BB.MONTH_ORD = 3 THEN ROUND(CONVERT(float, MAX(APPEAR_OUTPUT_CNT)) * 100 / CONVERT(float, MAX(OUTPUT_CNT)), 2) END MONTH3
							FROM
								(SELECT
									CASE WHEN NO1 = 1 THEN '전체' WHEN NO1 = 2 AND TT='A' THEN '전체AL' WHEN NO1 = 3 AND TT='N' THEN '전체NICU' ELSE GOODS_CD END GOODS_CD
									, MAX(TT) TT
									, MAX(FLAG) FLAG
									, MONTH_ORD MONTH_ORD
									, CASE WHEN NO1 = 1 THEN SUM(OUTPUT_CNT) WHEN NO1 = 2 AND MAX(TT) = 'A' THEN SUM(OUTPUT_CNT) WHEN NO1 = 3 AND MAX(TT) = 'N' THEN SUM(OUTPUT_CNT) ELSE MAX(OUTPUT_CNT) END OUTPUT_CNT
									, CASE WHEN NO1 = 1 THEN SUM(APPEAR_OUTPUT_CNT) WHEN NO1 = 2 AND MAX(TT) = 'A' THEN SUM(APPEAR_OUTPUT_CNT) WHEN NO1 = 3 AND MAX(TT) = 'N' THEN SUM(APPEAR_OUTPUT_CNT) ELSE MAX(APPEAR_OUTPUT_CNT) END APPEAR_OUTPUT_CNT
								FROM
									( SELECT
										GOODS_CD
										, SUBSTRING(GOODS_CD, 1, 1) TT
										, CASE WHEN SUBSTRING(GOODS_CD, 1, 1) = 'A' THEN 1 ELSE 2 END FLAG
										, SUM(OUTPUT_CNT) OUTPUT_CNT
										, SUM(APPEAR_OUTPUT_CNT) APPEAR_OUTPUT_CNT
										--, ROUND(CONVERT(float, SUM(APPEAR_OUTPUT_CNT)) * 100 / CONVERT(float, SUM(OUTPUT_CNT)), 2) TOT_PCT
										, MONTH_ORD
									FROM
										(SELECT
											A.EQUIP_CD
											, A.GOODS_CD
											, A.OUTPUT_CNT
											, A.APPEAR_OUTPUT_CNT
											, B.YEAR
											, B.DATE
											, B.WEEK
											, B.QUARTER
											, C.MONTH_ORD
										FROM
											(SELECT
												B.GOODS_CD
												, USE_YN_CD
												, A.EQUIP_CD
												, A.OUTPUT_CNT
												, A.APPEAR_OUTPUT_CNT
												, ISNULL(A.APPEAR_INSPCT_DATE, @minDateMonth) APPEAR_INSPCT_DATE
											FROM
												(SELECT
													A.WORK_ORD_NO
													, A.EQUIP_CD
													, A.GOODS_CD
													--, B.USER_INPUT_INSPCT_CNT OUTPUT_CNT
													--, B.APPEAR_OUTPUT_CNT
													,((SELECT SUM(X.OUTPUT_CNT) FROM TB_WORK_ORDER_OUTPUT_SUB X 
								WHERE X.WORK_ORD_NO = A.WORK_ORD_NO GROUP BY WORK_ORD_NO) + 								
								(SELECT SUM(X.APPEAR_FAULTY_CNT) FROM TB_WORK_ORDER_OUTPUT_SUB X 
								WHERE X.WORK_ORD_NO = A.WORK_ORD_NO GROUP BY WORK_ORD_NO)+ 								
								(SELECT SUM(X.EDGE_FAULTY_CNT) FROM TB_WORK_ORDER_OUTPUT_SUB X 
								WHERE X.WORK_ORD_NO = A.WORK_ORD_NO GROUP BY WORK_ORD_NO)
																
								) AS OUTPUT_CNT
												, (SELECT SUM(X.OUTPUT_CNT) FROM TB_WORK_ORDER_OUTPUT_SUB X 
							WHERE X.WORK_ORD_NO = A.WORK_ORD_NO GROUP BY WORK_ORD_NO) AS APPEAR_OUTPUT_CNT
													, B.APPEAR_INSPCT_DATE
												FROM TB_WORK_ORDER A, TB_WORK_ORDER_OUTPUT_SUB B
												WHERE A.WORK_ORD_NO = B.WORK_ORD_NO
												AND B.APPEAR_INSPCT_DATE BETWEEN @minDateMonth AND @maxDateMonth
												AND B.APPEAR_INSPCT_DATE >= '20211129'
											]]>
												AND A.EQUIP_CD IN (${equipCd})
												AND A.GOODS_CD IN (${goodsCd})
										<choose>
											<when test="qutyCd == '001'">
												AND 'A' = SUBSTRING(A.GOODS_CD, 1, 1)
											</when>
											<when test="qutyCd == '002'">
												AND 'N' = SUBSTRING(A.GOODS_CD, 1, 1)
											</when>
											<otherwise>
													
											</otherwise>
										</choose>
										<![CDATA[
												UNION ALL
											
												SELECT
													A.WORK_ORD_NO
													, A.EQUIP_CD
													, A.GOODS_CD
													, A.OUTPUT_CNT
													, A.APPEAR_OUTPUT_CNT
													, A.APPEAR_INSPCT_DATE
												FROM TB_WORK_ORDER A
												WHERE A.APPEAR_INSPCT_DATE BETWEEN @minDateMonth AND @maxDateMonth
												AND A.APPEAR_INSPCT_DATE < '20211129' ) A RIGHT OUTER JOIN TB_GOODS_CODE_ADM B ON B.USE_YN_CD = '001'
												AND A.GOODS_CD = B.GOODS_CD
											]]>
												AND A.EQUIP_CD IN (${equipCd})
												AND A.GOODS_CD IN (${goodsCd})
										<choose>
											<when test="qutyCd == '001'">
												AND 'A' = SUBSTRING(B.GOODS_CD, 1, 1)
											</when>
											<when test="qutyCd == '002'">
												AND 'N' = SUBSTRING(B.GOODS_CD, 1, 1)
											</when>
											<otherwise>
													
											</otherwise>
										</choose>
											<![CDATA[
												) A,
												CALENDAR B,
												(SELECT
													MAX(C.DATE) DATE
													, C.MONTH
													, RANK() OVER (ORDER BY MAX(DATE) ASC) MONTH_ORD
												FROM CALENDAR C
												WHERE C.DATE BETWEEN @minDateMonth AND @maxDateMonth
												GROUP BY MONTH) C
											WHERE A.APPEAR_INSPCT_DATE BETWEEN @minDateMonth AND @maxDateMonth
											AND A.APPEAR_INSPCT_DATE = B.DATE
											AND B.MONTH = C.MONTH
											AND A.USE_YN_CD = '001'
										) AA
									GROUP BY GOODS_CD, MONTH_ORD
								) BB,
								(SELECT TOP 3 ROW_NUMBER() OVER(ORDER BY (SELECT 1)) NO1 FROM CALENDAR) CC
						
								GROUP BY CC.NO1, BB.MONTH_ORD,
								CASE WHEN NO1 = 1 THEN '전체' WHEN NO1 = 2 AND TT = 'A' THEN '전체AL' WHEN NO1 = 3 AND TT = 'N' THEN '전체NICU' ELSE GOODS_CD END
							) BB,
							(SELECT TOP 3 ROW_NUMBER() OVER(ORDER BY (SELECT 1)) NO1 FROM CALENDAR) CC
							GROUP BY GOODS_CD, NO1, MONTH_ORD
						) DD
						GROUP BY GOODS_CD, NO1
						--ORDER BY GOODS_CD, NO1 ASC
					) BBB,
					(
						SELECT
							GOODS_CD
							, NO1
							, CASE WHEN NO1 = 1 THEN '생산수량' WHEN NO1 = 2 THEN '양품수량' ELSE '양품률'  END ITEM_NM
							, MAX(WEEK1) WEEK1
							, MAX(WEEK2) WEEK2
							, MAX(WEEK3) WEEK3
						FROM
							(SELECT
								BB.GOODS_CD
								, CC.NO1
								, CASE WHEN CC.NO1 = 1 AND BB.WEEK_ORD = 1 THEN MAX(OUTPUT_CNT) WHEN CC.NO1 = 2 AND BB.WEEK_ORD = 1 THEN MAX(APPEAR_OUTPUT_CNT) WHEN CC.NO1 = 3 AND BB.WEEK_ORD = 1 THEN ROUND(CONVERT(float, MAX(APPEAR_OUTPUT_CNT)) * 100 / CONVERT(float, MAX(OUTPUT_CNT)), 2) END WEEK1
								, CASE WHEN CC.NO1 = 1 AND BB.WEEK_ORD = 2 THEN MAX(OUTPUT_CNT) WHEN CC.NO1 = 2 AND BB.WEEK_ORD = 2 THEN MAX(APPEAR_OUTPUT_CNT) WHEN CC.NO1 = 3 AND BB.WEEK_ORD = 2 THEN ROUND(CONVERT(float, MAX(APPEAR_OUTPUT_CNT)) * 100 / CONVERT(float, MAX(OUTPUT_CNT)), 2) END WEEK2
								, CASE WHEN CC.NO1 = 1 AND BB.WEEK_ORD = 3 THEN MAX(OUTPUT_CNT) WHEN CC.NO1 = 2 AND BB.WEEK_ORD = 3 THEN MAX(APPEAR_OUTPUT_CNT) WHEN CC.NO1 = 3 AND BB.WEEK_ORD = 3 THEN ROUND(CONVERT(float, MAX(APPEAR_OUTPUT_CNT)) * 100 / CONVERT(float, MAX(OUTPUT_CNT)), 2) END WEEK3
							FROM
								(SELECT
									CASE WHEN NO1 = 1 THEN '전체' WHEN NO1 = 2 AND TT='A' THEN '전체AL' WHEN NO1 = 3 AND TT='N' THEN '전체NICU' ELSE GOODS_CD END GOODS_CD
									, MAX(TT) TT
									, MAX(FLAG) FLAG
									, WEEK_ORD WEEK_ORD
									, CASE WHEN NO1 = 1 THEN SUM(OUTPUT_CNT) WHEN NO1 = 2 AND MAX(TT) = 'A' THEN SUM(OUTPUT_CNT) WHEN NO1 = 3 AND MAX(TT) = 'N' THEN SUM(OUTPUT_CNT) ELSE MAX(OUTPUT_CNT) END OUTPUT_CNT
									, CASE WHEN NO1 = 1 THEN SUM(APPEAR_OUTPUT_CNT) WHEN NO1 = 2 AND MAX(TT) = 'A' THEN SUM(APPEAR_OUTPUT_CNT) WHEN NO1 = 3 AND MAX(TT) = 'N' THEN SUM(APPEAR_OUTPUT_CNT) ELSE MAX(APPEAR_OUTPUT_CNT) END APPEAR_OUTPUT_CNT
								FROM
									(SELECT
										GOODS_CD
										, SUBSTRING(GOODS_CD, 1, 1) TT
										, CASE WHEN SUBSTRING(GOODS_CD, 1, 1) = 'A' THEN 1 ELSE 2 END FLAG
										, SUM(OUTPUT_CNT) OUTPUT_CNT
										, SUM(APPEAR_OUTPUT_CNT) APPEAR_OUTPUT_CNT
										--, ROUND(CONVERT(float, SUM(APPEAR_OUTPUT_CNT)) * 100 / CONVERT(float, SUM(OUTPUT_CNT)), 2) TOT_PCT
										, WEEK_ORD
									FROM
										(SELECT
											A.EQUIP_CD
											, A.GOODS_CD
											, A.OUTPUT_CNT
											, A.APPEAR_OUTPUT_CNT
											, B.YEAR
											, B.DATE
											, B.WEEK
											, B.QUARTER
											, C.WEEK_ORD
										FROM
											(SELECT
												B.GOODS_CD
												, USE_YN_CD
												, A.EQUIP_CD
												, A.OUTPUT_CNT
												, A.APPEAR_OUTPUT_CNT
												, ISNULL(A.APPEAR_INSPCT_DATE, @minDateWeek) APPEAR_INSPCT_DATE
											FROM
											(SELECT
												A.WORK_ORD_NO
												, A.EQUIP_CD
												, A.GOODS_CD
												--, B.USER_INPUT_INSPCT_CNT OUTPUT_CNT
												--, B.APPEAR_OUTPUT_CNT
												,((SELECT SUM(X.OUTPUT_CNT) FROM TB_WORK_ORDER_OUTPUT_SUB X 
								WHERE X.WORK_ORD_NO = A.WORK_ORD_NO GROUP BY WORK_ORD_NO) + 								
								(SELECT SUM(X.APPEAR_FAULTY_CNT) FROM TB_WORK_ORDER_OUTPUT_SUB X 
								WHERE X.WORK_ORD_NO = A.WORK_ORD_NO GROUP BY WORK_ORD_NO)+ 								
								(SELECT SUM(X.EDGE_FAULTY_CNT) FROM TB_WORK_ORDER_OUTPUT_SUB X 
								WHERE X.WORK_ORD_NO = A.WORK_ORD_NO GROUP BY WORK_ORD_NO)
																
								) AS OUTPUT_CNT
												, (SELECT SUM(X.OUTPUT_CNT) FROM TB_WORK_ORDER_OUTPUT_SUB X 
							WHERE X.WORK_ORD_NO = A.WORK_ORD_NO GROUP BY WORK_ORD_NO) AS APPEAR_OUTPUT_CNT
												, B.APPEAR_INSPCT_DATE
											FROM TB_WORK_ORDER A, TB_WORK_ORDER_OUTPUT_SUB B
											WHERE A.WORK_ORD_NO = B.WORK_ORD_NO
											AND B.APPEAR_INSPCT_DATE BETWEEN @minDateWeek AND @maxDateWeek
											AND B.APPEAR_INSPCT_DATE >= '20211129'
										]]>
											AND A.EQUIP_CD IN (${equipCd})
											AND A.GOODS_CD IN (${goodsCd})
									<choose>
										<when test="qutyCd == '001'">
											AND 'A' = SUBSTRING(A.GOODS_CD, 1, 1)
										</when>
										<when test="qutyCd == '002'">
											AND 'N' = SUBSTRING(A.GOODS_CD, 1, 1)
										</when>
										<otherwise>
												
										</otherwise>
									</choose>
									<![CDATA[
										
											UNION ALL
											
											SELECT
												A.WORK_ORD_NO
												, A.EQUIP_CD
												, A.GOODS_CD
												, A.OUTPUT_CNT
												, A.APPEAR_OUTPUT_CNT
												, A.APPEAR_INSPCT_DATE
											FROM TB_WORK_ORDER A
											WHERE A.APPEAR_INSPCT_DATE BETWEEN @minDateWeek AND @maxDateWeek
											AND A.APPEAR_INSPCT_DATE < '20211129'
											
											) A RIGHT OUTER JOIN TB_GOODS_CODE_ADM B ON B.USE_YN_CD = '001'
											AND A.GOODS_CD = B.GOODS_CD
										]]>
											AND A.EQUIP_CD IN (${equipCd})
											AND A.GOODS_CD IN (${goodsCd})
									<choose>
										<when test="qutyCd == '001'">
											AND 'A' = SUBSTRING(B.GOODS_CD, 1, 1)
										</when>
										<when test="qutyCd == '002'">
											AND 'N' = SUBSTRING(B.GOODS_CD, 1, 1)
										</when>
										<otherwise>
													
										</otherwise>
									</choose>
									<![CDATA[
											) A,
											CALENDAR B,
											(SELECT
												MAX(C.DATE) DATE
												, C.ISO_WEEK
												, RANK() OVER (ORDER BY MAX(DATE) ASC) WEEK_ORD
											FROM CALENDAR C
											WHERE C.DATE BETWEEN @minDateWeek AND @maxDateWeek
											GROUP BY ISO_WEEK) C
										WHERE A.APPEAR_INSPCT_DATE BETWEEN @minDateWeek AND @maxDateWeek
										AND A.APPEAR_INSPCT_DATE = B.DATE
										AND B.ISO_WEEK = C.ISO_WEEK
										AND A.USE_YN_CD = '001'
										) AA
									GROUP BY GOODS_CD, WEEK_ORD
								) BB,
								(SELECT TOP 3 ROW_NUMBER() OVER(ORDER BY (SELECT 1)) NO1 FROM CALENDAR) CC
						
								GROUP BY CC.NO1, BB.WEEK_ORD,
								CASE WHEN NO1 = 1 THEN '전체' WHEN NO1 = 2 AND TT = 'A' THEN '전체AL' WHEN NO1 = 3 AND TT = 'N' THEN '전체NICU' ELSE GOODS_CD END
						
							) BB,
							(SELECT TOP 3 ROW_NUMBER() OVER(ORDER BY (SELECT 1)) NO1 FROM CALENDAR) CC
							GROUP BY GOODS_CD, NO1, WEEK_ORD
						) DD
						GROUP BY GOODS_CD, NO1
						--ORDER BY GOODS_CD, NO1 ASC
					) CCC,
						
					(
						SELECT
							GOODS_CD
							, NO1
							, CASE WHEN NO1 = 1 THEN '생산수량' WHEN NO1 = 2 THEN '양품수량' ELSE '양품률'  END ITEM_NM
							, MAX(DATE1) DATE1
							, MAX(DATE2) DATE2
							, MAX(DATE3) DATE3
							, MAX(DATE4) DATE4
							, MAX(DATE5) DATE5
							, MAX(DATE6) DATE6
							, MAX(DATE7) DATE7
							, MAX(DATE8) DATE8
							, MAX(DATE9) DATE9
							, MAX(DATE10) DATE10
							, MAX(DATE11) DATE11
							, MAX(DATE12) DATE12
							, MAX(DATE13) DATE13
							, MAX(DATE14) DATE14
						FROM
							(SELECT
								BB.GOODS_CD
								, CC.NO1
								, CASE WHEN CC.NO1 = 1 AND BB.DATE_ORD = 1 THEN MAX(OUTPUT_CNT) WHEN CC.NO1 = 2 AND BB.DATE_ORD = 1 THEN MAX(APPEAR_OUTPUT_CNT) WHEN CC.NO1 = 3 AND BB.DATE_ORD = 1 THEN ROUND(CONVERT(float, MAX(APPEAR_OUTPUT_CNT)) * 100 / CONVERT(float, MAX(OUTPUT_CNT)), 2) END DATE1
								, CASE WHEN CC.NO1 = 1 AND BB.DATE_ORD = 2 THEN MAX(OUTPUT_CNT) WHEN CC.NO1 = 2 AND BB.DATE_ORD = 2 THEN MAX(APPEAR_OUTPUT_CNT) WHEN CC.NO1 = 3 AND BB.DATE_ORD = 2 THEN ROUND(CONVERT(float, MAX(APPEAR_OUTPUT_CNT)) * 100 / CONVERT(float, MAX(OUTPUT_CNT)), 2) END DATE2
								, CASE WHEN CC.NO1 = 1 AND BB.DATE_ORD = 3 THEN MAX(OUTPUT_CNT) WHEN CC.NO1 = 2 AND BB.DATE_ORD = 3 THEN MAX(APPEAR_OUTPUT_CNT) WHEN CC.NO1 = 3 AND BB.DATE_ORD = 3 THEN ROUND(CONVERT(float, MAX(APPEAR_OUTPUT_CNT)) * 100 / CONVERT(float, MAX(OUTPUT_CNT)), 2) END DATE3
								, CASE WHEN CC.NO1 = 1 AND BB.DATE_ORD = 4 THEN MAX(OUTPUT_CNT) WHEN CC.NO1 = 2 AND BB.DATE_ORD = 4 THEN MAX(APPEAR_OUTPUT_CNT) WHEN CC.NO1 = 3 AND BB.DATE_ORD = 4 THEN ROUND(CONVERT(float, MAX(APPEAR_OUTPUT_CNT)) * 100 / CONVERT(float, MAX(OUTPUT_CNT)), 2) END DATE4
								, CASE WHEN CC.NO1 = 1 AND BB.DATE_ORD = 5 THEN MAX(OUTPUT_CNT) WHEN CC.NO1 = 2 AND BB.DATE_ORD = 5 THEN MAX(APPEAR_OUTPUT_CNT) WHEN CC.NO1 = 3 AND BB.DATE_ORD = 5 THEN ROUND(CONVERT(float, MAX(APPEAR_OUTPUT_CNT)) * 100 / CONVERT(float, MAX(OUTPUT_CNT)), 2) END DATE5
								, CASE WHEN CC.NO1 = 1 AND BB.DATE_ORD = 6 THEN MAX(OUTPUT_CNT) WHEN CC.NO1 = 2 AND BB.DATE_ORD = 6 THEN MAX(APPEAR_OUTPUT_CNT) WHEN CC.NO1 = 3 AND BB.DATE_ORD = 6 THEN ROUND(CONVERT(float, MAX(APPEAR_OUTPUT_CNT)) * 100 / CONVERT(float, MAX(OUTPUT_CNT)), 2) END DATE6
								, CASE WHEN CC.NO1 = 1 AND BB.DATE_ORD = 7 THEN MAX(OUTPUT_CNT) WHEN CC.NO1 = 2 AND BB.DATE_ORD = 7 THEN MAX(APPEAR_OUTPUT_CNT) WHEN CC.NO1 = 3 AND BB.DATE_ORD = 7 THEN ROUND(CONVERT(float, MAX(APPEAR_OUTPUT_CNT)) * 100 / CONVERT(float, MAX(OUTPUT_CNT)), 2) END DATE7
								, CASE WHEN CC.NO1 = 1 AND BB.DATE_ORD = 8 THEN MAX(OUTPUT_CNT) WHEN CC.NO1 = 2 AND BB.DATE_ORD = 8 THEN MAX(APPEAR_OUTPUT_CNT) WHEN CC.NO1 = 3 AND BB.DATE_ORD = 8 THEN ROUND(CONVERT(float, MAX(APPEAR_OUTPUT_CNT)) * 100 / CONVERT(float, MAX(OUTPUT_CNT)), 2) END DATE8
								, CASE WHEN CC.NO1 = 1 AND BB.DATE_ORD = 9 THEN MAX(OUTPUT_CNT) WHEN CC.NO1 = 2 AND BB.DATE_ORD = 9 THEN MAX(APPEAR_OUTPUT_CNT) WHEN CC.NO1 = 3 AND BB.DATE_ORD = 9 THEN ROUND(CONVERT(float, MAX(APPEAR_OUTPUT_CNT)) * 100 / CONVERT(float, MAX(OUTPUT_CNT)), 2) END DATE9
								, CASE WHEN CC.NO1 = 1 AND BB.DATE_ORD = 10 THEN MAX(OUTPUT_CNT) WHEN CC.NO1 = 2 AND BB.DATE_ORD = 10 THEN MAX(APPEAR_OUTPUT_CNT) WHEN CC.NO1 = 3 AND BB.DATE_ORD = 10 THEN ROUND(CONVERT(float, MAX(APPEAR_OUTPUT_CNT)) * 100 / CONVERT(float, MAX(OUTPUT_CNT)), 2) END DATE10
								, CASE WHEN CC.NO1 = 1 AND BB.DATE_ORD = 11 THEN MAX(OUTPUT_CNT) WHEN CC.NO1 = 2 AND BB.DATE_ORD = 11 THEN MAX(APPEAR_OUTPUT_CNT) WHEN CC.NO1 = 3 AND BB.DATE_ORD = 11 THEN ROUND(CONVERT(float, MAX(APPEAR_OUTPUT_CNT)) * 100 / CONVERT(float, MAX(OUTPUT_CNT)), 2) END DATE11
								, CASE WHEN CC.NO1 = 1 AND BB.DATE_ORD = 12 THEN MAX(OUTPUT_CNT) WHEN CC.NO1 = 2 AND BB.DATE_ORD = 12 THEN MAX(APPEAR_OUTPUT_CNT) WHEN CC.NO1 = 3 AND BB.DATE_ORD = 12 THEN ROUND(CONVERT(float, MAX(APPEAR_OUTPUT_CNT)) * 100 / CONVERT(float, MAX(OUTPUT_CNT)), 2) END DATE12
								, CASE WHEN CC.NO1 = 1 AND BB.DATE_ORD = 13 THEN MAX(OUTPUT_CNT) WHEN CC.NO1 = 2 AND BB.DATE_ORD = 13 THEN MAX(APPEAR_OUTPUT_CNT) WHEN CC.NO1 = 3 AND BB.DATE_ORD = 13 THEN ROUND(CONVERT(float, MAX(APPEAR_OUTPUT_CNT)) * 100 / CONVERT(float, MAX(OUTPUT_CNT)), 2) END DATE13
								, CASE WHEN CC.NO1 = 1 AND BB.DATE_ORD = 14 THEN MAX(OUTPUT_CNT) WHEN CC.NO1 = 2 AND BB.DATE_ORD = 14 THEN MAX(APPEAR_OUTPUT_CNT) WHEN CC.NO1 = 3 AND BB.DATE_ORD = 14 THEN ROUND(CONVERT(float, MAX(APPEAR_OUTPUT_CNT)) * 100 / CONVERT(float, MAX(OUTPUT_CNT)), 2) END DATE14
							FROM
								(SELECT
									CASE WHEN NO1 = 1 THEN '전체' WHEN NO1 = 2 AND TT='A' THEN '전체AL' WHEN NO1 = 3 AND TT='N' THEN '전체NICU' ELSE GOODS_CD END GOODS_CD
									, MAX(TT) TT
									, MAX(FLAG) FLAG
									, DATE_ORD DATE_ORD
									, CASE WHEN NO1 = 1 THEN SUM(OUTPUT_CNT) WHEN NO1 = 2 AND MAX(TT) = 'A' THEN SUM(OUTPUT_CNT) WHEN NO1 = 3 AND MAX(TT) = 'N' THEN SUM(OUTPUT_CNT) ELSE MAX(OUTPUT_CNT) END OUTPUT_CNT
									, CASE WHEN NO1 = 1 THEN SUM(APPEAR_OUTPUT_CNT) WHEN NO1 = 2 AND MAX(TT) = 'A' THEN SUM(APPEAR_OUTPUT_CNT) WHEN NO1 = 3 AND MAX(TT) = 'N' THEN SUM(APPEAR_OUTPUT_CNT) ELSE MAX(APPEAR_OUTPUT_CNT) END APPEAR_OUTPUT_CNT
								FROM
									(SELECT
										GOODS_CD
										, SUBSTRING(GOODS_CD, 1, 1) TT
										, CASE WHEN SUBSTRING(GOODS_CD, 1, 1) = 'A' THEN 1 ELSE 2 END FLAG
										, SUM(OUTPUT_CNT) OUTPUT_CNT
										, SUM(APPEAR_OUTPUT_CNT) APPEAR_OUTPUT_CNT
										--, ROUND(CONVERT(float, SUM(APPEAR_OUTPUT_CNT)) * 100 / CONVERT(float, SUM(OUTPUT_CNT)), 2) TOT_PCT
										, DATE_ORD
									FROM
										(SELECT
											A.EQUIP_CD
											, A.GOODS_CD
											, A.OUTPUT_CNT
											, A.APPEAR_OUTPUT_CNT
											, B.YEAR
											, B.DATE
											, B.WEEK
											, B.QUARTER
											, C.DATE_ORD
										FROM
											(SELECT
												B.GOODS_CD
												, USE_YN_CD
												, A.EQUIP_CD
												, A.OUTPUT_CNT
												, A.APPEAR_OUTPUT_CNT
												, ISNULL(A.APPEAR_INSPCT_DATE, @minDate) APPEAR_INSPCT_DATE
											FROM
												(SELECT
													A.WORK_ORD_NO
													, A.EQUIP_CD
													, A.GOODS_CD
													--, B.USER_INPUT_INSPCT_CNT OUTPUT_CNT
													--, B.APPEAR_OUTPUT_CNT
													,((SELECT SUM(X.OUTPUT_CNT) FROM TB_WORK_ORDER_OUTPUT_SUB X 
								WHERE X.WORK_ORD_NO = A.WORK_ORD_NO GROUP BY WORK_ORD_NO) + 								
								(SELECT SUM(X.APPEAR_FAULTY_CNT) FROM TB_WORK_ORDER_OUTPUT_SUB X 
								WHERE X.WORK_ORD_NO = A.WORK_ORD_NO GROUP BY WORK_ORD_NO)+ 								
								(SELECT SUM(X.EDGE_FAULTY_CNT) FROM TB_WORK_ORDER_OUTPUT_SUB X 
								WHERE X.WORK_ORD_NO = A.WORK_ORD_NO GROUP BY WORK_ORD_NO)
																
								) AS OUTPUT_CNT
												, (SELECT SUM(X.OUTPUT_CNT) FROM TB_WORK_ORDER_OUTPUT_SUB X 
							WHERE X.WORK_ORD_NO = A.WORK_ORD_NO GROUP BY WORK_ORD_NO) AS APPEAR_OUTPUT_CNT
													, B.APPEAR_INSPCT_DATE
												FROM TB_WORK_ORDER A, TB_WORK_ORDER_OUTPUT_SUB B
												WHERE A.WORK_ORD_NO = B.WORK_ORD_NO
												AND B.APPEAR_INSPCT_DATE BETWEEN @minDate AND @maxDate
												AND B.APPEAR_INSPCT_DATE >= '20211129'
											]]>
												AND A.EQUIP_CD IN (${equipCd})
												AND A.GOODS_CD IN (${goodsCd})
										<choose>
											<when test="qutyCd == '001'">
												AND 'A' = SUBSTRING(A.GOODS_CD, 1, 1)
											</when>
											<when test="qutyCd == '002'">
												AND 'N' = SUBSTRING(A.GOODS_CD, 1, 1)
											</when>
											<otherwise>
													
											</otherwise>
										</choose>
										<![CDATA[
												
												UNION ALL
												
												SELECT
													A.WORK_ORD_NO
													, A.EQUIP_CD
													, A.GOODS_CD
													, A.OUTPUT_CNT
													, A.APPEAR_OUTPUT_CNT
													, A.APPEAR_INSPCT_DATE
												FROM TB_WORK_ORDER A
												WHERE A.APPEAR_INSPCT_DATE BETWEEN @minDate AND @maxDate
												AND A.APPEAR_INSPCT_DATE < '20211129' ) A RIGHT OUTER JOIN TB_GOODS_CODE_ADM B ON B.USE_YN_CD = '001'
												AND A.GOODS_CD = B.GOODS_CD
											]]>
												AND A.EQUIP_CD IN (${equipCd})
												AND A.GOODS_CD IN (${goodsCd})
										<choose>
											<when test="qutyCd == '001'">
												AND 'A' = SUBSTRING(B.GOODS_CD, 1, 1)
											</when>
											<when test="qutyCd == '002'">
												AND 'N' = SUBSTRING(B.GOODS_CD, 1, 1)
											</when>
											<otherwise>
													
											</otherwise>
										</choose>
										<![CDATA[
											) A,
											CALENDAR B,
											(SELECT
												MAX(C.DATE) DATE
												--, C.ISO_WEEK
												, RANK() OVER (ORDER BY MAX(DATE) ASC) DATE_ORD
											FROM CALENDAR C
											WHERE C.DATE BETWEEN @minDate AND @maxDate
											GROUP BY DATE) C
										WHERE A.APPEAR_INSPCT_DATE BETWEEN @minDate AND @maxDate
										AND A.APPEAR_INSPCT_DATE = B.DATE
										AND B.DATE = C.DATE
										AND A.USE_YN_CD = '001'
										) AA
									GROUP BY GOODS_CD, DATE_ORD
								) BB,
								(SELECT TOP 3 ROW_NUMBER() OVER(ORDER BY (SELECT 1)) NO1 FROM CALENDAR) CC
						
								GROUP BY CC.NO1, BB.DATE_ORD,
								CASE WHEN NO1 = 1 THEN '전체' WHEN NO1 = 2 AND TT = 'A' THEN '전체AL' WHEN NO1 = 3 AND TT = 'N' THEN '전체NICU' ELSE GOODS_CD END
						
							) BB,
							(SELECT TOP 3 ROW_NUMBER() OVER(ORDER BY (SELECT 1)) NO1 FROM CALENDAR) CC
							GROUP BY GOODS_CD, NO1, DATE_ORD
						) DD
						GROUP BY GOODS_CD, NO1
						--ORDER BY GOODS_CD, NO1 ASC
					) DDD
				WHERE AAA.GOODS_CD = BBB.GOODS_CD
				AND AAA.NO1 = BBB.NO1
				AND BBB.GOODS_CD = CCC.GOODS_CD
				AND BBB.NO1 = CCC.NO1
				AND CCC.GOODS_CD = DDD.GOODS_CD
				AND CCC.NO1 = DDD.NO1
			) KKK ON KKK.GOODS_CD = G.GOODS_CD LEFT JOIN TB_MATRL_CODE_ADM M ON G.ALNICU_MATRL_CD = M.MATRL_CD
	]]>
		WHERE 1=1
		AND KKK.GOODS_CD IN (${goodsCd}, '전체', '전체AL', '전체NICU')
	<choose>
		<when test="qutyCd == '001'">
		AND (KKK.GOODS_CD = '전체AL' OR 'A' = SUBSTRING(KKK.GOODS_CD, 1, 1))
		</when>
		<when test="qutyCd == '002'">
		AND (KKK.GOODS_CD = '전체NICU' OR 'N' = SUBSTRING(KKK.GOODS_CD, 1, 1))
		</when>
		<otherwise>
		
		</otherwise>
	</choose>
		ORDER BY G.GOODS_NM, GOODS_CD, KKK.NO1
	</select>
	
	<!-- 일일업무실적보고 1동 통계 현황(21.11.28 까지 작업지시기준) -->
	<select id="goodsInspectDailyWorkContentOld" resultMap="GoodsFaultyAdmVo">
		<![CDATA[
			DECLARE @minDateQuarter VARCHAR(8)
			DECLARE @maxDateQuarter VARCHAR(8)
			SELECT @minDateQuarter = MIN(A.DATE)
			FROM CALENDAR A, (SELECT YEAR, QUARTER, DATE FROM CALENDAR WHERE DATE = DATEADD(QUARTER, -3, #{appearInspctDate})) B
			WHERE A.YEAR = B.YEAR
			AND A.QUARTER = B.QUARTER
			SELECT @maxDateQuarter = MAX(A.DATE)
			FROM CALENDAR A, (SELECT YEAR, QUARTER, DATE FROM CALENDAR WHERE DATE = DATEADD(QUARTER, -1, #{appearInspctDate})) B
			WHERE A.YEAR = B.YEAR
			AND A.QUARTER = B.QUARTER
			PRINT(@minDateQuarter + '최소 분기')
			PRINT(@maxDateQuarter + '최대 분기')
			
			DECLARE @minDateMonth VARCHAR(8)
			DECLARE @maxDateMonth VARCHAR(8)
			SELECT @minDateMonth = MIN(A.DATE)
			FROM CALENDAR A, (SELECT YEAR, MONTH, DATE FROM CALENDAR WHERE DATE = DATEADD(MONTH, -3, #{appearInspctDate})) B
			WHERE A.YEAR = B.YEAR
			AND A.MONTH = B.MONTH
			SELECT @maxDateMonth = MAX(A.DATE)
			FROM CALENDAR A, (SELECT YEAR, MONTH, DATE FROM CALENDAR WHERE DATE = DATEADD(MONTH, -1, #{appearInspctDate})) B
			WHERE A.YEAR = B.YEAR
			AND A.MONTH = B.MONTH
			PRINT(@minDateMonth + '최소 월')
			PRINT(@maxDateMonth + '최소 월')
			
			DECLARE @minDateWeek VARCHAR(8)
			DECLARE @maxDateWeek VARCHAR(8)
			SELECT @minDateWeek = MIN(A.DATE)
			FROM CALENDAR A, (SELECT YEAR, ISO_WEEK, DATE FROM CALENDAR WHERE DATE = DATEADD(WEEK, -3, #{appearInspctDate})) B
			WHERE A.YEAR = B.YEAR
			AND A.ISO_WEEK = B.ISO_WEEK
			SELECT @maxDateWeek = MAX(A.DATE)
			FROM CALENDAR A, (SELECT YEAR, ISO_WEEK, DATE FROM CALENDAR WHERE DATE = DATEADD(WEEK, -1, #{appearInspctDate})) B
			WHERE A.YEAR = B.YEAR
			AND A.ISO_WEEK = B.ISO_WEEK
			PRINT(@minDateWeek + '최소 주')
			PRINT(@maxDateWeek + '최대 주')
			
			DECLARE @minDate VARCHAR(8)
			DECLARE @maxDate VARCHAR(8)
			SELECT @minDate = CONVERT(CHAR(8), DATEADD(DAY, -13, #{appearInspctDate}), 112)
			SELECT @maxDate = CONVERT(CHAR(8), DATEADD(DAY, -0, #{appearInspctDate}), 112)
			PRINT(@minDate + '최소 2주치중 날짜')
			PRINT(@maxDate + '최대 2주치중 날짜')

			SELECT
				KKK.GOODS_CD
				, GOODS_NM
				, KKK.NO1
				, G.MODEL
				, QUTY_CD
				, ISNULL((SELECT BASE_CD_NM FROM TB_SYSTEM_COMMON_CODE B WHERE B.BASE_GROUP_CD='007' AND B.BASE_CD = M.QUTY_CD), KKK.GOODS_CD) QUTY_NM
				, KKK.ITEM_NM
				, KKK.QUARTER1
				, KKK.QUARTER2
				, KKK.QUARTER3
				, KKK.MONTH1
				, KKK.MONTH2
				, KKK.MONTH3
				, KKK.WEEK1
				, KKK.WEEK2
				, KKK.WEEK3
				, KKK.DAY1
				, KKK.DAY2
				, KKK.DAY3
				, KKK.DAY4
				, KKK.DAY5
				, KKK.DAY6
				, KKK.DAY7
				, KKK.DAY8
				, KKK.DAY9
				, KKK.DAY10
				, KKK.DAY11
				, KKK.DAY12
				, KKK.DAY13
				, KKK.DAY14
			FROM
				TB_GOODS_CODE_ADM G RIGHT JOIN
				(SELECT
					AAA.GOODS_CD
					, AAA.NO1
					, AAA.ITEM_NM
					, AAA.QUARTER1
					, AAA.QUARTER2
					, AAA.QUARTER3
					, BBB.MONTH1
					, BBB.MONTH2
					, BBB.MONTH3
					, CCC.WEEK1
					, CCC.WEEK2
					, CCC.WEEK3
					, DDD.DATE1 AS DAY1
					, DDD.DATE2 AS DAY2
					, DDD.DATE3 AS DAY3
					, DDD.DATE4 AS DAY4 
					, DDD.DATE5 AS DAY5
					, DDD.DATE6 AS DAY6
					, DDD.DATE7 AS DAY7
					, DDD.DATE8 AS DAY8
					, DDD.DATE9 AS DAY9
					, DDD.DATE10 AS DAY10
					, DDD.DATE11 AS DAY11
					, DDD.DATE12 AS DAY12
					, DDD.DATE13 AS DAY13
					, DDD.DATE14 AS DAY14
				FROM
					(SELECT
						GOODS_CD
						, NO1
						, CASE WHEN NO1 = 1 THEN '생산수량' WHEN NO1 = 2 THEN '양품수량' ELSE '양품률'  END ITEM_NM
						, MAX(QUARTER1) QUARTER1
						, MAX(QUARTER2) QUARTER2
						, MAX(QUARTER3) QUARTER3
					FROM
						(SELECT
							BB.GOODS_CD
							, CC.NO1
							, CASE WHEN CC.NO1 = 1 AND BB.QUARTER_ORD = 1 THEN MAX(OUTPUT_CNT) WHEN CC.NO1 = 2 AND BB.QUARTER_ORD = 1 THEN MAX(APPEAR_OUTPUT_CNT) WHEN CC.NO1 = 3 AND BB.QUARTER_ORD = 1 THEN ROUND(CONVERT(float, MAX(APPEAR_OUTPUT_CNT)) * 100 / CONVERT(float, MAX(OUTPUT_CNT)), 2) END QUARTER1
							, CASE WHEN CC.NO1 = 1 AND BB.QUARTER_ORD = 2 THEN MAX(OUTPUT_CNT) WHEN CC.NO1 = 2 AND BB.QUARTER_ORD = 2 THEN MAX(APPEAR_OUTPUT_CNT) WHEN CC.NO1 = 3 AND BB.QUARTER_ORD = 2 THEN ROUND(CONVERT(float, MAX(APPEAR_OUTPUT_CNT)) * 100 / CONVERT(float, MAX(OUTPUT_CNT)), 2) END QUARTER2
							, CASE WHEN CC.NO1 = 1 AND BB.QUARTER_ORD = 3 THEN MAX(OUTPUT_CNT) WHEN CC.NO1 = 2 AND BB.QUARTER_ORD = 3 THEN MAX(APPEAR_OUTPUT_CNT) WHEN CC.NO1 = 3 AND BB.QUARTER_ORD = 3 THEN ROUND(CONVERT(float, MAX(APPEAR_OUTPUT_CNT)) * 100 / CONVERT(float, MAX(OUTPUT_CNT)), 2) END QUARTER3
							FROM
								(SELECT
									CASE WHEN NO1 = 1 THEN '전체' WHEN NO1 = 2 AND TT='A' THEN '전체AL' WHEN NO1 = 3 AND TT='N' THEN '전체NICU' ELSE GOODS_CD END GOODS_CD
									, MAX(TT) TT
									, MAX(FLAG) FLAG
									, QUARTER_ORD QUARTER_ORD
									, CASE WHEN NO1 = 1 THEN SUM(OUTPUT_CNT) WHEN NO1 = 2 AND MAX(TT) = 'A' THEN SUM(OUTPUT_CNT) WHEN NO1 = 3 AND MAX(TT) = 'N' THEN SUM(OUTPUT_CNT) ELSE MAX(OUTPUT_CNT) END OUTPUT_CNT
									, CASE WHEN NO1 = 1 THEN SUM(APPEAR_OUTPUT_CNT) WHEN NO1 = 2 AND MAX(TT) = 'A' THEN SUM(APPEAR_OUTPUT_CNT) WHEN NO1 = 3 AND MAX(TT) = 'N' THEN SUM(APPEAR_OUTPUT_CNT) ELSE MAX(APPEAR_OUTPUT_CNT) END APPEAR_OUTPUT_CNT
								FROM
									(SELECT
										GOODS_CD
										, SUBSTRING(GOODS_CD, 1, 1) TT
										, CASE WHEN SUBSTRING(GOODS_CD, 1, 1) = 'A' THEN 1 ELSE 2 END FLAG
										, SUM(OUTPUT_CNT) OUTPUT_CNT
										, SUM(APPEAR_OUTPUT_CNT) APPEAR_OUTPUT_CNT
										--, ROUND(CONVERT(float, SUM(APPEAR_OUTPUT_CNT)) * 100 / CONVERT(float, SUM(OUTPUT_CNT)), 2) TOT_PCT
										, QUARTER_ORD
									FROM
										(SELECT
											A.EQUIP_CD
											, A.GOODS_CD
											, A.OUTPUT_CNT
											, A.APPEAR_OUTPUT_CNT
											, B.YEAR
											, B.DATE
											, B.WEEK
											, B.QUARTER
											, C.QUARTER_ORD
										FROM
											(SELECT
												B.GOODS_CD
												, USE_YN_CD
												, A.EQUIP_CD
												, A.OUTPUT_CNT
												, A.APPEAR_OUTPUT_CNT
												, ISNULL(A.APPEAR_INSPCT_DATE, @minDateQuarter) APPEAR_INSPCT_DATE
											FROM TB_WORK_ORDER A RIGHT OUTER JOIN TB_GOODS_CODE_ADM B ON A.APPEAR_INSPCT_DATE BETWEEN @minDateQuarter AND @maxDateQuarter
											AND B.USE_YN_CD = '001'
											AND A.GOODS_CD = B.GOODS_CD
										]]>
											AND A.EQUIP_CD IN (${equipCd})
										<if test="goodsCd != null and goodsCd != ''">
											AND A.GOODS_CD = #{goodsCd}
										</if>
									<choose>
										<when test="qutyCd == '001'">
											AND 'A' = SUBSTRING(B.GOODS_CD, 1, 1)
										</when>
										<when test="qutyCd == '002'">
											AND 'N' = SUBSTRING(B.GOODS_CD, 1, 1)
										</when>
										<otherwise>
										
										</otherwise>
									</choose>
										<![CDATA[
											) A, 
											CALENDAR B,
											(SELECT
												MAX(C.DATE) DATE
												, C.QUARTER
												, RANK() OVER (ORDER BY MAX(DATE) ASC) QUARTER_ORD
											FROM CALENDAR C
											WHERE C.DATE BETWEEN @minDateQuarter AND @maxDateQuarter
											GROUP BY QUARTER) C
										WHERE A.APPEAR_INSPCT_DATE BETWEEN @minDateQuarter AND @maxDateQuarter
										AND A.APPEAR_INSPCT_DATE = B.DATE
										AND B.QUARTER = C.QUARTER
										AND A.USE_YN_CD = '001'
									) AA
									GROUP BY GOODS_CD, QUARTER_ORD
								) BB,
								(SELECT TOP 3 ROW_NUMBER() OVER(ORDER BY (SELECT 1)) NO1 FROM CALENDAR) CC
					
								GROUP BY CC.NO1, BB.QUARTER_ORD,
								CASE WHEN NO1 = 1 THEN '전체' WHEN NO1 = 2 AND TT = 'A' THEN '전체AL' WHEN NO1 = 3 AND TT = 'N' THEN '전체NICU' ELSE GOODS_CD END
					
								) BB,
								(SELECT TOP 3 ROW_NUMBER() OVER(ORDER BY (SELECT 1)) NO1 FROM CALENDAR) CC
								GROUP BY GOODS_CD, NO1, QUARTER_ORD
							) DD
							GROUP BY GOODS_CD, NO1
							--ORDER BY GOODS_CD, NO1 ASC
						) AAA,
			
						(SELECT
							GOODS_CD
							, NO1
							, CASE WHEN NO1 = 1 THEN '생산수량' WHEN NO1 = 2 THEN '양품수량' ELSE '양품률'  END ITEM_NM
							, MAX(MONTH1) MONTH1
							, MAX(MONTH2) MONTH2
							, MAX(MONTH3) MONTH3
						FROM
							( SELECT
								BB.GOODS_CD
								, CC.NO1
								, CASE WHEN CC.NO1 = 1 AND BB.MONTH_ORD = 1 THEN MAX(OUTPUT_CNT) WHEN CC.NO1 = 2 AND BB.MONTH_ORD = 1 THEN MAX(APPEAR_OUTPUT_CNT) WHEN CC.NO1 = 3 AND BB.MONTH_ORD = 1 THEN ROUND(CONVERT(float, MAX(APPEAR_OUTPUT_CNT)) * 100 / CONVERT(float, MAX(OUTPUT_CNT)), 2) END MONTH1
								, CASE WHEN CC.NO1 = 1 AND BB.MONTH_ORD = 2 THEN MAX(OUTPUT_CNT) WHEN CC.NO1 = 2 AND BB.MONTH_ORD = 2 THEN MAX(APPEAR_OUTPUT_CNT) WHEN CC.NO1 = 3 AND BB.MONTH_ORD = 2 THEN ROUND(CONVERT(float, MAX(APPEAR_OUTPUT_CNT)) * 100 / CONVERT(float, MAX(OUTPUT_CNT)), 2) END MONTH2
								, CASE WHEN CC.NO1 = 1 AND BB.MONTH_ORD = 3 THEN MAX(OUTPUT_CNT) WHEN CC.NO1 = 2 AND BB.MONTH_ORD = 3 THEN MAX(APPEAR_OUTPUT_CNT) WHEN CC.NO1 = 3 AND BB.MONTH_ORD = 3 THEN ROUND(CONVERT(float, MAX(APPEAR_OUTPUT_CNT)) * 100 / CONVERT(float, MAX(OUTPUT_CNT)), 2) END MONTH3
							FROM
								(SELECT
									CASE WHEN NO1 = 1 THEN '전체' WHEN NO1 = 2 AND TT='A' THEN '전체AL' WHEN NO1 = 3 AND TT='N' THEN '전체NICU' ELSE GOODS_CD END GOODS_CD
									, MAX(TT) TT
									, MAX(FLAG) FLAG
									, MONTH_ORD MONTH_ORD
									, CASE WHEN NO1 = 1 THEN SUM(OUTPUT_CNT) WHEN NO1 = 2 AND MAX(TT) = 'A' THEN SUM(OUTPUT_CNT) WHEN NO1 = 3 AND MAX(TT) = 'N' THEN SUM(OUTPUT_CNT) ELSE MAX(OUTPUT_CNT) END OUTPUT_CNT
									, CASE WHEN NO1 = 1 THEN SUM(APPEAR_OUTPUT_CNT) WHEN NO1 = 2 AND MAX(TT) = 'A' THEN SUM(APPEAR_OUTPUT_CNT) WHEN NO1 = 3 AND MAX(TT) = 'N' THEN SUM(APPEAR_OUTPUT_CNT) ELSE MAX(APPEAR_OUTPUT_CNT) END APPEAR_OUTPUT_CNT
								FROM
									( SELECT
										GOODS_CD
										, SUBSTRING(GOODS_CD, 1, 1) TT
										, CASE WHEN SUBSTRING(GOODS_CD, 1, 1) = 'A' THEN 1 ELSE 2 END FLAG
										, SUM(OUTPUT_CNT) OUTPUT_CNT
										, SUM(APPEAR_OUTPUT_CNT) APPEAR_OUTPUT_CNT
										--, ROUND(CONVERT(float, SUM(APPEAR_OUTPUT_CNT)) * 100 / CONVERT(float, SUM(OUTPUT_CNT)), 2) TOT_PCT
										, MONTH_ORD
									FROM
										(SELECT
											A.EQUIP_CD
											, A.GOODS_CD
											, A.OUTPUT_CNT
											, A.APPEAR_OUTPUT_CNT
											, B.YEAR
											, B.DATE
											, B.WEEK
											, B.QUARTER
											, C.MONTH_ORD
										FROM
											(SELECT
												B.GOODS_CD
												, USE_YN_CD
												, A.EQUIP_CD
												, A.OUTPUT_CNT
												, A.APPEAR_OUTPUT_CNT
												, ISNULL(A.APPEAR_INSPCT_DATE, @minDateMonth) APPEAR_INSPCT_DATE
											FROM TB_WORK_ORDER A RIGHT OUTER JOIN TB_GOODS_CODE_ADM B ON A.APPEAR_INSPCT_DATE BETWEEN @minDateMonth AND @maxDateMonth
											AND B.USE_YN_CD = '001'
											AND A.GOODS_CD = B.GOODS_CD
										]]>
											AND A.EQUIP_CD IN (${equipCd})
										<if test="goodsCd != null and goodsCd != ''">
											AND A.GOODS_CD = #{goodsCd}
										</if>
									<choose>
										<when test="qutyCd == '001'">
											AND 'A' = SUBSTRING(B.GOODS_CD, 1, 1)
										</when>
										<when test="qutyCd == '002'">
											AND 'N' = SUBSTRING(B.GOODS_CD, 1, 1)
										</when>
										<otherwise>
										
										</otherwise>
									</choose>
										<![CDATA[
											) A, 
											CALENDAR B,
											(SELECT
												MAX(C.DATE) DATE
												, C.MONTH
												, RANK() OVER (ORDER BY MAX(DATE) ASC) MONTH_ORD
											FROM CALENDAR C
											WHERE C.DATE BETWEEN @minDateMonth AND @maxDateMonth
											GROUP BY MONTH) C
										WHERE A.APPEAR_INSPCT_DATE BETWEEN @minDateMonth AND @maxDateMonth
										AND A.APPEAR_INSPCT_DATE = B.DATE
										AND B.MONTH = C.MONTH
										AND A.USE_YN_CD = '001'
										) AA
									GROUP BY GOODS_CD, MONTH_ORD
								) BB,
								(SELECT TOP 3 ROW_NUMBER() OVER(ORDER BY (SELECT 1)) NO1 FROM CALENDAR) CC
			
								GROUP BY CC.NO1, BB.MONTH_ORD,
								CASE WHEN NO1 = 1 THEN '전체' WHEN NO1 = 2 AND TT = 'A' THEN '전체AL' WHEN NO1 = 3 AND TT = 'N' THEN '전체NICU' ELSE GOODS_CD END
							) BB,
							(SELECT TOP 3 ROW_NUMBER() OVER(ORDER BY (SELECT 1)) NO1 FROM CALENDAR) CC
							GROUP BY GOODS_CD, NO1, MONTH_ORD
						) DD
						GROUP BY GOODS_CD, NO1
						--ORDER BY GOODS_CD, NO1 ASC
					) BBB,
					(
						SELECT
							GOODS_CD
							, NO1
							, CASE WHEN NO1 = 1 THEN '생산수량' WHEN NO1 = 2 THEN '양품수량' ELSE '양품률'  END ITEM_NM
							, MAX(WEEK1) WEEK1
							, MAX(WEEK2) WEEK2
							, MAX(WEEK3) WEEK3
						FROM
							(SELECT
								BB.GOODS_CD
								, CC.NO1
								, CASE WHEN CC.NO1 = 1 AND BB.WEEK_ORD = 1 THEN MAX(OUTPUT_CNT) WHEN CC.NO1 = 2 AND BB.WEEK_ORD = 1 THEN MAX(APPEAR_OUTPUT_CNT) WHEN CC.NO1 = 3 AND BB.WEEK_ORD = 1 THEN ROUND(CONVERT(float, MAX(APPEAR_OUTPUT_CNT)) * 100 / CONVERT(float, MAX(OUTPUT_CNT)), 2) END WEEK1
								, CASE WHEN CC.NO1 = 1 AND BB.WEEK_ORD = 2 THEN MAX(OUTPUT_CNT) WHEN CC.NO1 = 2 AND BB.WEEK_ORD = 2 THEN MAX(APPEAR_OUTPUT_CNT) WHEN CC.NO1 = 3 AND BB.WEEK_ORD = 2 THEN ROUND(CONVERT(float, MAX(APPEAR_OUTPUT_CNT)) * 100 / CONVERT(float, MAX(OUTPUT_CNT)), 2) END WEEK2
								, CASE WHEN CC.NO1 = 1 AND BB.WEEK_ORD = 3 THEN MAX(OUTPUT_CNT) WHEN CC.NO1 = 2 AND BB.WEEK_ORD = 3 THEN MAX(APPEAR_OUTPUT_CNT) WHEN CC.NO1 = 3 AND BB.WEEK_ORD = 3 THEN ROUND(CONVERT(float, MAX(APPEAR_OUTPUT_CNT)) * 100 / CONVERT(float, MAX(OUTPUT_CNT)), 2) END WEEK3
							FROM
								(SELECT
									CASE WHEN NO1 = 1 THEN '전체' WHEN NO1 = 2 AND TT='A' THEN '전체AL' WHEN NO1 = 3 AND TT='N' THEN '전체NICU' ELSE GOODS_CD END GOODS_CD
									, MAX(TT) TT
									, MAX(FLAG) FLAG
									, WEEK_ORD WEEK_ORD
									, CASE WHEN NO1 = 1 THEN SUM(OUTPUT_CNT) WHEN NO1 = 2 AND MAX(TT) = 'A' THEN SUM(OUTPUT_CNT) WHEN NO1 = 3 AND MAX(TT) = 'N' THEN SUM(OUTPUT_CNT) ELSE MAX(OUTPUT_CNT) END OUTPUT_CNT
									, CASE WHEN NO1 = 1 THEN SUM(APPEAR_OUTPUT_CNT) WHEN NO1 = 2 AND MAX(TT) = 'A' THEN SUM(APPEAR_OUTPUT_CNT) WHEN NO1 = 3 AND MAX(TT) = 'N' THEN SUM(APPEAR_OUTPUT_CNT) ELSE MAX(APPEAR_OUTPUT_CNT) END APPEAR_OUTPUT_CNT
								FROM
									(SELECT
										GOODS_CD
										, SUBSTRING(GOODS_CD, 1, 1) TT
										, CASE WHEN SUBSTRING(GOODS_CD, 1, 1) = 'A' THEN 1 ELSE 2 END FLAG
										, SUM(OUTPUT_CNT) OUTPUT_CNT
										, SUM(APPEAR_OUTPUT_CNT) APPEAR_OUTPUT_CNT
										--, ROUND(CONVERT(float, SUM(APPEAR_OUTPUT_CNT)) * 100 / CONVERT(float, SUM(OUTPUT_CNT)), 2) TOT_PCT
										, WEEK_ORD
									FROM
										(SELECT
											A.EQUIP_CD
											, A.GOODS_CD
											, A.OUTPUT_CNT
											, A.APPEAR_OUTPUT_CNT
											, B.YEAR
											, B.DATE
											, B.WEEK
											, B.QUARTER
											, C.WEEK_ORD
										FROM
											(SELECT
												B.GOODS_CD
												, USE_YN_CD
												, A.EQUIP_CD
												, A.OUTPUT_CNT
												, A.APPEAR_OUTPUT_CNT
												, ISNULL(A.APPEAR_INSPCT_DATE, @minDateWeek) APPEAR_INSPCT_DATE
											FROM TB_WORK_ORDER A RIGHT OUTER JOIN TB_GOODS_CODE_ADM B ON A.APPEAR_INSPCT_DATE BETWEEN @minDateWeek AND @maxDateWeek
											AND B.USE_YN_CD = '001'
											AND A.GOODS_CD = B.GOODS_CD
										]]>
											AND A.EQUIP_CD IN (${equipCd})
										<if test="goodsCd != null and goodsCd != ''">
											AND A.GOODS_CD = #{goodsCd}
										</if>
									<choose>
										<when test="qutyCd == '001'">
											AND 'A' = SUBSTRING(B.GOODS_CD, 1, 1)
										</when>
										<when test="qutyCd == '002'">
											AND 'N' = SUBSTRING(B.GOODS_CD, 1, 1)
										</when>
										<otherwise>
										
										</otherwise>
									</choose>
										<![CDATA[
											) A, 
											CALENDAR B,
											(SELECT
												MAX(C.DATE) DATE
												, C.ISO_WEEK
												, RANK() OVER (ORDER BY MAX(DATE) ASC) WEEK_ORD
											FROM CALENDAR C
											WHERE C.DATE BETWEEN @minDateWeek AND @maxDateWeek
											GROUP BY ISO_WEEK) C
										WHERE A.APPEAR_INSPCT_DATE BETWEEN @minDateWeek AND @maxDateWeek
										AND A.APPEAR_INSPCT_DATE = B.DATE
										AND B.ISO_WEEK = C.ISO_WEEK
										AND A.USE_YN_CD = '001'
										) AA
									GROUP BY GOODS_CD, WEEK_ORD
								) BB,
								(SELECT TOP 3 ROW_NUMBER() OVER(ORDER BY (SELECT 1)) NO1 FROM CALENDAR) CC
			
								GROUP BY CC.NO1, BB.WEEK_ORD,
								CASE WHEN NO1 = 1 THEN '전체' WHEN NO1 = 2 AND TT = 'A' THEN '전체AL' WHEN NO1 = 3 AND TT = 'N' THEN '전체NICU' ELSE GOODS_CD END
			
							) BB,
							(SELECT TOP 3 ROW_NUMBER() OVER(ORDER BY (SELECT 1)) NO1 FROM CALENDAR) CC
							GROUP BY GOODS_CD, NO1, WEEK_ORD
						) DD
						GROUP BY GOODS_CD, NO1
						--ORDER BY GOODS_CD, NO1 ASC
					) CCC,
			
					(
						SELECT
							GOODS_CD
							, NO1
							, CASE WHEN NO1 = 1 THEN '생산수량' WHEN NO1 = 2 THEN '양품수량' ELSE '양품률'  END ITEM_NM
							, MAX(DATE1) DATE1
							, MAX(DATE2) DATE2
							, MAX(DATE3) DATE3
							, MAX(DATE4) DATE4
							, MAX(DATE5) DATE5
							, MAX(DATE6) DATE6
							, MAX(DATE7) DATE7
							, MAX(DATE8) DATE8
							, MAX(DATE9) DATE9
							, MAX(DATE10) DATE10
							, MAX(DATE11) DATE11
							, MAX(DATE12) DATE12
							, MAX(DATE13) DATE13
							, MAX(DATE14) DATE14
						FROM
							(SELECT
								BB.GOODS_CD
								, CC.NO1
								, CASE WHEN CC.NO1 = 1 AND BB.DATE_ORD = 1 THEN MAX(OUTPUT_CNT) WHEN CC.NO1 = 2 AND BB.DATE_ORD = 1 THEN MAX(APPEAR_OUTPUT_CNT) WHEN CC.NO1 = 3 AND BB.DATE_ORD = 1 THEN ROUND(CONVERT(float, MAX(APPEAR_OUTPUT_CNT)) * 100 / CONVERT(float, MAX(OUTPUT_CNT)), 2) END DATE1
								, CASE WHEN CC.NO1 = 1 AND BB.DATE_ORD = 2 THEN MAX(OUTPUT_CNT) WHEN CC.NO1 = 2 AND BB.DATE_ORD = 2 THEN MAX(APPEAR_OUTPUT_CNT) WHEN CC.NO1 = 3 AND BB.DATE_ORD = 2 THEN ROUND(CONVERT(float, MAX(APPEAR_OUTPUT_CNT)) * 100 / CONVERT(float, MAX(OUTPUT_CNT)), 2) END DATE2
								, CASE WHEN CC.NO1 = 1 AND BB.DATE_ORD = 3 THEN MAX(OUTPUT_CNT) WHEN CC.NO1 = 2 AND BB.DATE_ORD = 3 THEN MAX(APPEAR_OUTPUT_CNT) WHEN CC.NO1 = 3 AND BB.DATE_ORD = 3 THEN ROUND(CONVERT(float, MAX(APPEAR_OUTPUT_CNT)) * 100 / CONVERT(float, MAX(OUTPUT_CNT)), 2) END DATE3
								, CASE WHEN CC.NO1 = 1 AND BB.DATE_ORD = 4 THEN MAX(OUTPUT_CNT) WHEN CC.NO1 = 2 AND BB.DATE_ORD = 4 THEN MAX(APPEAR_OUTPUT_CNT) WHEN CC.NO1 = 3 AND BB.DATE_ORD = 4 THEN ROUND(CONVERT(float, MAX(APPEAR_OUTPUT_CNT)) * 100 / CONVERT(float, MAX(OUTPUT_CNT)), 2) END DATE4
								, CASE WHEN CC.NO1 = 1 AND BB.DATE_ORD = 5 THEN MAX(OUTPUT_CNT) WHEN CC.NO1 = 2 AND BB.DATE_ORD = 5 THEN MAX(APPEAR_OUTPUT_CNT) WHEN CC.NO1 = 3 AND BB.DATE_ORD = 5 THEN ROUND(CONVERT(float, MAX(APPEAR_OUTPUT_CNT)) * 100 / CONVERT(float, MAX(OUTPUT_CNT)), 2) END DATE5
								, CASE WHEN CC.NO1 = 1 AND BB.DATE_ORD = 6 THEN MAX(OUTPUT_CNT) WHEN CC.NO1 = 2 AND BB.DATE_ORD = 6 THEN MAX(APPEAR_OUTPUT_CNT) WHEN CC.NO1 = 3 AND BB.DATE_ORD = 6 THEN ROUND(CONVERT(float, MAX(APPEAR_OUTPUT_CNT)) * 100 / CONVERT(float, MAX(OUTPUT_CNT)), 2) END DATE6
								, CASE WHEN CC.NO1 = 1 AND BB.DATE_ORD = 7 THEN MAX(OUTPUT_CNT) WHEN CC.NO1 = 2 AND BB.DATE_ORD = 7 THEN MAX(APPEAR_OUTPUT_CNT) WHEN CC.NO1 = 3 AND BB.DATE_ORD = 7 THEN ROUND(CONVERT(float, MAX(APPEAR_OUTPUT_CNT)) * 100 / CONVERT(float, MAX(OUTPUT_CNT)), 2) END DATE7
								, CASE WHEN CC.NO1 = 1 AND BB.DATE_ORD = 8 THEN MAX(OUTPUT_CNT) WHEN CC.NO1 = 2 AND BB.DATE_ORD = 8 THEN MAX(APPEAR_OUTPUT_CNT) WHEN CC.NO1 = 3 AND BB.DATE_ORD = 8 THEN ROUND(CONVERT(float, MAX(APPEAR_OUTPUT_CNT)) * 100 / CONVERT(float, MAX(OUTPUT_CNT)), 2) END DATE8
								, CASE WHEN CC.NO1 = 1 AND BB.DATE_ORD = 9 THEN MAX(OUTPUT_CNT) WHEN CC.NO1 = 2 AND BB.DATE_ORD = 9 THEN MAX(APPEAR_OUTPUT_CNT) WHEN CC.NO1 = 3 AND BB.DATE_ORD = 9 THEN ROUND(CONVERT(float, MAX(APPEAR_OUTPUT_CNT)) * 100 / CONVERT(float, MAX(OUTPUT_CNT)), 2) END DATE9
								, CASE WHEN CC.NO1 = 1 AND BB.DATE_ORD = 10 THEN MAX(OUTPUT_CNT) WHEN CC.NO1 = 2 AND BB.DATE_ORD = 10 THEN MAX(APPEAR_OUTPUT_CNT) WHEN CC.NO1 = 3 AND BB.DATE_ORD = 10 THEN ROUND(CONVERT(float, MAX(APPEAR_OUTPUT_CNT)) * 100 / CONVERT(float, MAX(OUTPUT_CNT)), 2) END DATE10
								, CASE WHEN CC.NO1 = 1 AND BB.DATE_ORD = 11 THEN MAX(OUTPUT_CNT) WHEN CC.NO1 = 2 AND BB.DATE_ORD = 11 THEN MAX(APPEAR_OUTPUT_CNT) WHEN CC.NO1 = 3 AND BB.DATE_ORD = 11 THEN ROUND(CONVERT(float, MAX(APPEAR_OUTPUT_CNT)) * 100 / CONVERT(float, MAX(OUTPUT_CNT)), 2) END DATE11
								, CASE WHEN CC.NO1 = 1 AND BB.DATE_ORD = 12 THEN MAX(OUTPUT_CNT) WHEN CC.NO1 = 2 AND BB.DATE_ORD = 12 THEN MAX(APPEAR_OUTPUT_CNT) WHEN CC.NO1 = 3 AND BB.DATE_ORD = 12 THEN ROUND(CONVERT(float, MAX(APPEAR_OUTPUT_CNT)) * 100 / CONVERT(float, MAX(OUTPUT_CNT)), 2) END DATE12
								, CASE WHEN CC.NO1 = 1 AND BB.DATE_ORD = 13 THEN MAX(OUTPUT_CNT) WHEN CC.NO1 = 2 AND BB.DATE_ORD = 13 THEN MAX(APPEAR_OUTPUT_CNT) WHEN CC.NO1 = 3 AND BB.DATE_ORD = 13 THEN ROUND(CONVERT(float, MAX(APPEAR_OUTPUT_CNT)) * 100 / CONVERT(float, MAX(OUTPUT_CNT)), 2) END DATE13
								, CASE WHEN CC.NO1 = 1 AND BB.DATE_ORD = 14 THEN MAX(OUTPUT_CNT) WHEN CC.NO1 = 2 AND BB.DATE_ORD = 14 THEN MAX(APPEAR_OUTPUT_CNT) WHEN CC.NO1 = 3 AND BB.DATE_ORD = 14 THEN ROUND(CONVERT(float, MAX(APPEAR_OUTPUT_CNT)) * 100 / CONVERT(float, MAX(OUTPUT_CNT)), 2) END DATE14
							FROM
								(SELECT
									CASE WHEN NO1 = 1 THEN '전체' WHEN NO1 = 2 AND TT='A' THEN '전체AL' WHEN NO1 = 3 AND TT='N' THEN '전체NICU' ELSE GOODS_CD END GOODS_CD
									, MAX(TT) TT
									, MAX(FLAG) FLAG
									, DATE_ORD DATE_ORD
									, CASE WHEN NO1 = 1 THEN SUM(OUTPUT_CNT) WHEN NO1 = 2 AND MAX(TT) = 'A' THEN SUM(OUTPUT_CNT) WHEN NO1 = 3 AND MAX(TT) = 'N' THEN SUM(OUTPUT_CNT) ELSE MAX(OUTPUT_CNT) END OUTPUT_CNT
									, CASE WHEN NO1 = 1 THEN SUM(APPEAR_OUTPUT_CNT) WHEN NO1 = 2 AND MAX(TT) = 'A' THEN SUM(APPEAR_OUTPUT_CNT) WHEN NO1 = 3 AND MAX(TT) = 'N' THEN SUM(APPEAR_OUTPUT_CNT) ELSE MAX(APPEAR_OUTPUT_CNT) END APPEAR_OUTPUT_CNT
								FROM
									(SELECT
										GOODS_CD
										, SUBSTRING(GOODS_CD, 1, 1) TT
										, CASE WHEN SUBSTRING(GOODS_CD, 1, 1) = 'A' THEN 1 ELSE 2 END FLAG
										, SUM(OUTPUT_CNT) OUTPUT_CNT
										, SUM(APPEAR_OUTPUT_CNT) APPEAR_OUTPUT_CNT
										--, ROUND(CONVERT(float, SUM(APPEAR_OUTPUT_CNT)) * 100 / CONVERT(float, SUM(OUTPUT_CNT)), 2) TOT_PCT
										, DATE_ORD
									FROM
										(SELECT
											A.EQUIP_CD
											, A.GOODS_CD
											, A.OUTPUT_CNT
											, A.APPEAR_OUTPUT_CNT
											, B.YEAR
											, B.DATE
											, B.WEEK
											, B.QUARTER
											, C.DATE_ORD
										FROM
											(SELECT
												B.GOODS_CD
												, USE_YN_CD
												, A.EQUIP_CD
												, A.OUTPUT_CNT
												, A.APPEAR_OUTPUT_CNT
												, ISNULL(A.APPEAR_INSPCT_DATE, @minDate) APPEAR_INSPCT_DATE
											FROM TB_WORK_ORDER A RIGHT OUTER JOIN TB_GOODS_CODE_ADM B ON A.APPEAR_INSPCT_DATE BETWEEN @minDate AND @maxDate
											AND B.USE_YN_CD = '001'
											AND A.GOODS_CD = B.GOODS_CD
										]]>
											AND A.EQUIP_CD IN (${equipCd})
										<if test="goodsCd != null and goodsCd != ''">
											AND A.GOODS_CD = #{goodsCd}
										</if>
									<choose>
										<when test="qutyCd == '001'">
											AND 'A' = SUBSTRING(B.GOODS_CD, 1, 1)
										</when>
										<when test="qutyCd == '002'">
											AND 'N' = SUBSTRING(B.GOODS_CD, 1, 1)
										</when>
										<otherwise>
										
										</otherwise>
									</choose>
										<![CDATA[
											) A,
											CALENDAR B,
											(SELECT
												MAX(C.DATE) DATE
												--, C.ISO_WEEK
												, RANK() OVER (ORDER BY MAX(DATE) ASC) DATE_ORD
											FROM CALENDAR C
											WHERE C.DATE BETWEEN @minDate AND @maxDate
											GROUP BY DATE) C
										WHERE A.APPEAR_INSPCT_DATE BETWEEN @minDate AND @maxDate
										AND A.APPEAR_INSPCT_DATE = B.DATE
										AND B.DATE = C.DATE
										AND A.USE_YN_CD = '001'
										) AA
									GROUP BY GOODS_CD, DATE_ORD
								) BB,
								(SELECT TOP 3 ROW_NUMBER() OVER(ORDER BY (SELECT 1)) NO1 FROM CALENDAR) CC
			
								GROUP BY CC.NO1, BB.DATE_ORD,
								CASE WHEN NO1 = 1 THEN '전체' WHEN NO1 = 2 AND TT = 'A' THEN '전체AL' WHEN NO1 = 3 AND TT = 'N' THEN '전체NICU' ELSE GOODS_CD END
			
							) BB,
							(SELECT TOP 3 ROW_NUMBER() OVER(ORDER BY (SELECT 1)) NO1 FROM CALENDAR) CC
							GROUP BY GOODS_CD, NO1, DATE_ORD
						) DD
						GROUP BY GOODS_CD, NO1
						--ORDER BY GOODS_CD, NO1 ASC
					) DDD
				WHERE AAA.GOODS_CD = BBB.GOODS_CD
				AND AAA.NO1 = BBB.NO1
				AND BBB.GOODS_CD = CCC.GOODS_CD
				AND BBB.NO1 = CCC.NO1
				AND CCC.GOODS_CD = DDD.GOODS_CD
				AND CCC.NO1 = DDD.NO1
			) KKK ON KKK.GOODS_CD = G.GOODS_CD
			LEFT JOIN TB_MATRL_CODE_ADM M ON G.ALNICU_MATRL_CD = M.MATRL_CD
		]]>
		WHERE 1=1
		<if test="goodsCd != null and goodsCd != ''">
		AND KKK.GOODS_CD = #{goodsCd}
		</if>
	<choose>
		<when test="qutyCd == '001'">
		AND (KKK.GOODS_CD = '전체AL' OR 'A' = SUBSTRING(KKK.GOODS_CD, 1, 1))
		</when>
		<when test="qutyCd == '002'">
		AND (KKK.GOODS_CD = '전체NICU' OR 'N' = SUBSTRING(KKK.GOODS_CD, 1, 1))
		</when>
		<otherwise>
		
		</otherwise>
	</choose>
		ORDER BY G.GOODS_NM, GOODS_CD, KKK.NO1
	</select>
	
			<!--(생산검사현황) 외관검사 날짜로 작지별/주야별 재검포함 리스트 조회 -->
	<select id="faultyWorkOrdNoReInspListFa" resultType="HashMap" parameterType="mes.domain.po.WorkOrderVo">
		<![CDATA[
			SELECT
				DISTINCT 			
				A.ORD_DATE AS WORK_ORD_DATE				
				, ISNULL(F.SUB_FILM1, '-') SUB_FILM1
				, ISNULL(F.SUB_FILM2, '-') SUB_FILM2
				, ISNULL(F.SUB_FILM3, '-') SUB_FILM3
				, ISNULL(F.SUB_FILM4, '-') SUB_FILM4		
				, (SELECT EQUIP_NM FROM TB_EQUIP_CODE_ADM B WHERE B.EQUIP_CD = A.EQUIP_CD) EQUIP_NM			
				, C.GOODS_NM	
				, (SELECT BASE_CD_NM FROM TB_SYSTEM_COMMON_CODE B WHERE B.BASE_GROUP_CD='016' AND B.BASE_CD = A.WORK_TEAM_CD) WORK_TEAM_NM			
				, (SELECT DEAL_CORP_NM FROM TB_DEAL_CORP_ADM B WHERE B.DEAL_CORP_CD = A.DEAL_CORP_CD) DEAL_CORP_NM
				, C.MODEL
				, C.ALNICU_MATRL_CD

				, (SELECT MATRL_NM FROM TB_MATRL_CODE_ADM B WHERE C.ALNICU_MATRL_CD = B.MATRL_CD) ALNICU_MATRL_NM
				, C.FILM_MATRL_CD
				, (SELECT MATRL_NM FROM TB_MATRL_CODE_ADM B WHERE C.FILM_MATRL_CD = B.MATRL_CD) FILM_MATRL_NM
				, (SELECT BASE_CD_NM FROM TB_SYSTEM_COMMON_CODE B WHERE BASE_GROUP_CD = '007' AND  B.BASE_CD = D.QUTY_CD) QUTY_NM
				, (SELECT BASE_CD_NM FROM TB_SYSTEM_COMMON_CODE B WHERE BASE_GROUP_CD = '019' AND  B.BASE_CD = D.GUBUN_CD) GUBUN_NM
				, (SELECT BASE_CD_NM FROM TB_SYSTEM_COMMON_CODE B WHERE BASE_GROUP_CD = '020' AND  B.BASE_CD = D.CHAMFER_YN_CD) CHAMFER_YN_NM
				, ISNULL(G.VISION_FAULTY_SUM,'0') VISION_FAULTY_SUM

				, A.*
				, dbo.FC_BM_USERNM(H.MAIN_WORK_CHARGR_NM) MAIN_WORK_CHARGR_NM
				, dbo.FC_BM_USERNM(H.APPEAR_INSPCT_CHARGER_NM) APPEAR_INSPCT_CHARGER_NM
				, dbo.FC_BM_USERNM(H.EDGE_INSPCT_CHARGER_NM) EDGE_INSPCT_CHARGER_NM
				, ${codeList}
				
			FROM
			(
				SELECT 
					A.WORK_ORD_NO
					, '' TRAY_NO
					, '' SEQ					
					, (ISNULL( SUM(A.OUTPUT_CNT),0) + ISNULL(Sum(A.APPEAR_FAULTY_CNT),0)) AS OUTPUT_CNT		
					, ISNULL( SUM(A.OUTPUT_CNT),0)  AS APPEAR_OUTPUT_CNT	
					, '0' CNT			
					, ISNULL(SUM(A.APPEAR_FAULTY_CNT),0) AS APPEAR_FAULTY_CNT
					, ISNULL(SUM(A.EDGE_FAULTY_CNT),0) AS EDGE_FAULTY_CNT
					, STUFF((         
					  SELECT  DISTINCT ',' + WORK_ORD_LOT_NO
					  FROM    TB_WORK_ORDER_OUTPUT_SUB X
					  WHERE   X.WORK_ORD_NO = A.WORK_ORD_NO
					  FOR XML PATH('') ),1,1,'')
					    AS WORK_ORD_LOT_NO
					, STUFF((         
					  SELECT  DISTINCT ',' + LOT_NO
					  FROM    TB_WORK_ORDER_OUTPUT_SUB X
					  WHERE   X.WORK_ORD_NO = A.WORK_ORD_NO
					  FOR XML PATH('') ),1,1,'')
					    AS LOT_NO
					 , STUFF((         
					  SELECT  DISTINCT ',' + APPEAR_INSPCT_DATE
					  FROM    TB_WORK_ORDER_OUTPUT_SUB X
					  WHERE   X.WORK_ORD_NO = A.WORK_ORD_NO
					  FOR XML PATH('') ),1,1,'')
					    AS APPEAR_INSPCT_DATE
					, ISNULL(Sum(B.TARGET_CNT),0) TARGET_CNT
					, MAX(B.ORD_DATE) ORD_DATE
					, MAX(B.EQUIP_CD) EQUIP_CD
					, MAX(B.GOODS_CD) GOODS_CD
					, MAX(B.EQUIP_COND_SEQ) EQUIP_COND_SEQ
					, MAX(B.WORK_TEAM_CD) WORK_TEAM_CD
					, MAX(B.DEAL_CORP_CD) DEAL_CORP_CD
					, MAX(A.GUBUN) GUBUN
				FROM TB_WORK_ORDER_OUTPUT_SUB A, TB_WORK_ORDER B
				WHERE 1=1
				AND A.WORK_ORD_NO = B.WORK_ORD_NO
				AND A.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDateTo}
			]]>				
				<if test="userNumber != null and userNumber != ''"> 
					AND ( A.APPEAR_INSPCT_CHARGER = #{userNumber} OR A.EDGE_INSPCT_CHARGER = #{userNumber} )
				</if>
			<![CDATA[
				GROUP BY
					A.WORK_ORD_NO
					
				) A
				
				LEFT OUTER JOIN
				
				(
					SELECT
						*
					FROM (
						SELECT
							X.WORK_ORD_NO							
							, MINOR_CD							
							, SUM(ISNULL(FAULTY_CNT,0)) FAULTY_CNT						
							
						FROM TB_GOODS_FAULTY_ADM_CODE Z, (SELECT DISTINCT WORK_ORD_NO FROM TB_WORK_ORDER_OUTPUT_SUB X WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDateTo}) X
						WHERE 1=1 
						AND X.WORK_ORD_NO = Z.WORK_ORD_NO	
					
						
						GROUP BY X.WORK_ORD_NO, MINOR_CD
			
						UNION ALL
			
						SELECT
							X.WORK_ORD_NO							
							, '200' AS MINOR_CD  							
							, SUM(ISNULL(FAULTY_CNT,0)) FAULTY_CNT							
							
						FROM TB_EDGE_GOODS_FAULTY_ADM_CODE Z ,  (SELECT DISTINCT WORK_ORD_NO FROM TB_WORK_ORDER_OUTPUT_SUB X WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDateTo} ) X				
						 
						WHERE MINOR_CD < '009'						
						AND X.WORK_ORD_NO = Z.WORK_ORD_NO
			
						GROUP BY X.WORK_ORD_NO
					) AS t
					PIVOT(SUM(FAULTY_CNT) for MINOR_CD IN (
					${codeList}
					)) as PVT
				) E
				ON 1=1
				AND A.WORK_ORD_NO = E.WORK_ORD_NO			
				
	
				
				
				LEFT OUTER JOIN
				(
					SELECT
						FILM_PIVOT.WORK_ORD_NO
						, FILM_PIVOT.[1] AS SUB_FILM1
						, FILM_PIVOT.[2] AS SUB_FILM2
						, FILM_PIVOT.[3] AS SUB_FILM3
						, FILM_PIVOT.[4] AS SUB_FILM4
		            FROM
					(
		            	SELECT
		                	A.WORK_ORD_NO
		                    , A.LOT_NO
		                    , ROW_NUMBER() OVER(PARTITION BY A.WORK_ORD_NO ORDER BY A.REG_DATE) ROW_NUMBER
		                 FROM TB_WORK_ORDER_DTL A
		                 , TB_MATRL_CODE_ADM B
		                 , (SELECT BASE_CD, BASE_CD_NM, BASE_CD_ABBR FROM TB_SYSTEM_COMMON_CODE B WHERE B.BASE_GROUP_CD='007') C
		                 , (   SELECT
		                          DISTINCT F.WORK_ORD_NO
		                       FROM TB_WORK_ORDER_OUTPUT_SUB F LEFT OUTER JOIN TB_GOODS_FAULTY_ADM_CODE Z 
							   ON 1=1
							   AND F.WORK_ORD_NO = Z.WORK_ORD_NO
		                       WHERE 1=1  
							    AND F.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDateTo}
							
		                       GROUP BY F.WORK_ORD_NO
		        
		                       UNION
		        
		                       SELECT
		                          DISTINCT F.WORK_ORD_NO
		                       FROM TB_EDGE_GOODS_FAULTY_ADM_CODE Z RIGHT OUTER JOIN TB_WORK_ORDER_OUTPUT_SUB F
							   ON 1=1
							   AND F.WORK_ORD_NO = Z.WORK_ORD_NO
		                       WHERE 1=1
		                      
		                     
							    AND F.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDateTo}
							  
		                       GROUP BY F.WORK_ORD_NO
		                       ) E
		                    WHERE   A.MATRL_CD = B.MATRL_CD
		                    AND      B.QUTY_CD = C.BASE_CD
		                    AND      (C.BASE_CD_ABBR = 'F')
		                    AND A.WORK_ORD_NO = E.WORK_ORD_NO
		              ) AS A
		             PIVOT
	                 (
	                    MIN(LOT_NO)
	                    FOR ROW_NUMBER IN ( [1], [2], [3], [4] )
	                 ) FILM_PIVOT
				
				) AS F

				ON 1=1
				AND A.WORK_ORD_NO = F.WORK_ORD_NO 

				LEFT OUTER JOIN 
				(
					SELECT
						F.WORK_ORD_NO
						, SUM(FAULTY_CNT) VISION_FAULTY_SUM
					FROM TB_VISION_FAULTY_ADM_CODE Z , TB_WORK_ORDER_OUTPUT_SUB F
					WHERE 1=1
					AND F.WORK_ORD_NO = Z.WORK_ORD_NO
					
				   AND F.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDateTo}
				   
					AND MINOR_CD NOT IN ('001', '002')
					GROUP BY F.WORK_ORD_NO
				) AS G
				ON A.WORK_ORD_NO = G.WORK_ORD_NO

				
				, (
					SELECT
						WORK_ORD_NO
						, STRING_AGG(MAIN_WORK_CHARGR_NM, ', ')  MAIN_WORK_CHARGR_NM
						, STRING_AGG(APPEAR_INSPCT_CHARGER_NM, ', ') APPEAR_INSPCT_CHARGER_NM
						, STRING_AGG(EDGE_INSPCT_CHARGER_NM, ', ') EDGE_INSPCT_CHARGER_NM
					FROM
					(
						SELECT
							DISTINCT A.WORK_ORD_NO
						
							, A.MAIN_WORK_CHARGR
							, (SELECT USER_NM FROM TB_USER WHERE USER_NUMBER = MAIN_WORK_CHARGR )  AS MAIN_WORK_CHARGR_NM
							, A.APPEAR_INSPCT_CHARGER
							, (SELECT USER_NM FROM TB_USER WHERE USER_NUMBER = APPEAR_INSPCT_CHARGER )  AS APPEAR_INSPCT_CHARGER_NM	
							, A.EDGE_INSPCT_CHARGER
							, (SELECT USER_NM FROM TB_USER WHERE USER_NUMBER = EDGE_INSPCT_CHARGER )  AS EDGE_INSPCT_CHARGER_NM
						FROM TB_WORK_ORDER_OUTPUT_SUB A
						WHERE 1=1
				
					    AND A.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDateTo}
					    
					) C
					GROUP BY
						WORK_ORD_NO
				) H
				, ( SELECT FILM_MATRL_CD, ALNICU_MATRL_CD, MODEL, GOODS_CD, GOODS_NM FROM TB_GOODS_CODE_ADM ) C
				, ( SELECT MATRL_CD, CHAMFER_YN_CD, GUBUN_CD, QUTY_CD FROM TB_MATRL_CODE_ADM ) D
				
			WHERE 1=1				
			AND A.WORK_ORD_NO = H.WORK_ORD_NO
			AND A.GOODS_CD = C.GOODS_CD
			AND D.MATRL_CD = C.ALNICU_MATRL_CD

			UNION ALL
		

			select
			INSP_DATE	
			, '' a1
			, '' a2
			, '' a3
			, '' a4
			, '' a5
			, '' a6
			, '' a7
			, '' a8
			, '' a9
			, '' a10
			, '' a11
			, '' a12
			, '' a13
			, '' a14
			, '' a15
			, '' a16
			, 0 a17
			, WORK_ORD_NO
			, TRAY_NO
			, SEQ
			, '0'
			, '0'
			, CNT
			, FAULTY_CNT
			, '0'
			, ''
			, ''
			, ''
			, '0'
			, PRODUCT_DATE
			, ''
			, ''
			, '0'
			, ''
			, ''
			, DAY_NIGHT_CD
			, ''
			, ''
			, ''
			,${codeList}
			from(

			SELECT A.TRAY_NO
			  ,A.SEQ
			  ,A.WORK_ORD_NO
			  ,A.INSP_STATUS
			  ,A.INSP_DATE     
			  ,A.FAULTY_CNT  
			  ,A.DAY_NIGHT_CD
			  ,B.MINOR_CD
			  ,A.INSP_CHARGR
			  ,A.PRODUCT_DATE
			  ,B.FAULTY_CNT B_FALUTY
			   ,(CNT * 65) CNT
			 from TB_SHIP_INSPECT_ADM A, TB_SHIP_INSPECT_DTL B,TB_WORK_ORDER_OUTPUT_SUB C,(SELECT IDX ,COUNT(idx) CNT FROM (
																								SELECT idx	
																								,value FROM TB_SHIP_INSPECT_ADM A CROSS APPLY STRING_SPLIT(FAULTY_TRAY_NO, ',')
																								) AA
																								group by idx) D
		where a.IDX = b.SHIP_INSP_IDX
		AND A.RE_INSP_STATUS = '002'
		AND C.WORK_ORD_DATE  BETWEEN #{chooseDateFrom} AND #{chooseDateTo}
		AND A.WORK_ORD_NO = C.WORK_ORD_NO
		]]>
		<if test="userNumber != null and userNumber != ''"> 
			AND ( C.APPEAR_INSPCT_CHARGER = #{userNumber} OR C.EDGE_INSPCT_CHARGER = #{userNumber} )
		</if>
		<![CDATA[
		AND A.FAULTY_CNT != 0
		AND A.IDX = D.IDX
		

				) AS t
				PIVOT(SUM(B_FALUTY) FOR MINOR_CD IN (
				${codeList}
		)) AS PVT


		UNION ALL

			SELECT
			'소계' a0
            ,'' a1
			, '' a2
			, '' a3
			, '' a4
			, '' a5
			, '' a6
			, '' a7
			, '' a8
			, '' a9
			, '' a10
			, '' a11
			, '' a12
			, '' a13
			, '' a14
			, '' a15
			, '' a16
			, 0 a17
			, AA.WORK_ORD_NO
			, TRAY_NO
			, SEQ			
			, USER_INPUT_INSPCT_CNT - EDGE_FAULTY_CNT
			, APPEAR_OUTPUT_CNT
			, '0' CNT
			, FAULT_SUM - EDGE_FAULTY_CNT
			, EDGE_FAULTY_CNT
			, ''
			, ''
			, ''
			, '0'
			, ''
			, ''
			, ''
			, '0'
			, ''
			, ''
			, ''
			, ''
			, ''
			, ''
		    ,${codeList}
         FROM (
         
            SELECT
			B.WORK_ORD_NO
			, '소계' TRAY_NO
			   , '' SEQ				
               , SUM(B.APPEAR_OUTPUT_CNT) AS APPEAR_OUTPUT_CNT
               , SUM(B.EDGE_FAULTY_CNT) AS EDGE_FAULTY_CNT
               , SUM(B.FAULT_PERCENT) AS FAULT_PERCENT
               , SUM(B.FAULT_SUM) AS FAULT_SUM
               , SUM(B.USER_INPUT_INSPCT_CNT) AS USER_INPUT_INSPCT_CNT
               , GUBUN
			   --, SUM(FAULTY_CNT) FAULTY_CNT
   
            FROM (
   
               SELECT
                   AA.WORK_ORD_NO                 
                  , SUM(AA.E_FAULTY_CNT) AS EDGE_FAULTY_CNT
                  , SUM(AA.APPEAR_FAULTY_CNT) + SUM(E_FAULTY_CNT) + SUM(AA.FAULTY_CNT) AS FAULT_SUM
                  , SUM(AA.APPEAR_OUTPUT_CNT) AS APPEAR_OUTPUT_CNT                  
                  , SUM(AA.APPEAR_FAULTY_CNT) + SUM(E_FAULTY_CNT) + SUM(APPEAR_OUTPUT_CNT) + SUM(FAULTY_CNT) AS USER_INPUT_INSPCT_CNT
                  , CONVERT(NUMERIC(5,2), (CONVERT(FLOAT, (SUM(AA.APPEAR_FAULTY_CNT) + SUM(E_FAULTY_CNT)+ SUM(FAULTY_CNT) ), 0 )) / CONVERT(FLOAT, (SUM(AA.APPEAR_FAULTY_CNT) + SUM(E_FAULTY_CNT) + SUM(APPEAR_OUTPUT_CNT)+ SUM(FAULTY_CNT)), 0) * 100) AS FAULT_PERCENT
                  , AA.GUBUN            
				  , SUM(AA.FAULTY_CNT) FAULTY_CNT
                
               FROM
               (
                 SELECT
                     A.WORK_ORD_NO
                     
                     , ISNULL(BB.APPEAR_FAULTY_CNT,0) AS APPEAR_FAULTY_CNT                     
                     , ISNULL(A.OUTPUT_CNT,0) AS APPEAR_OUTPUT_CNT                   
                     , ISNULL(B.E_FAULTY_CNT,0) AS E_FAULTY_CNT
					 , ISNULL(C.FAULTY_CNT,0) AS FAULTY_CNT
                     , GUBUN
                  FROM 
                  (
                     SELECT                    
                         A.WORK_ORD_NO     
                        , SUM(A.OUTPUT_CNT) OUTPUT_CNT
                        , MAX(GUBUN) GUBUN                   
                     FROM TB_WORK_ORDER_OUTPUT_SUB A
                     WHERE A.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDateTo} 
                     ]]>    
                     <if test="userNumber != null and userNumber != ''"> 
						AND ( A.APPEAR_INSPCT_CHARGER = #{userNumber} OR A.EDGE_INSPCT_CHARGER = #{userNumber} )
					</if>      
					<![CDATA[        
                     GROUP BY A.WORK_ORD_NO
                  ) A 
                  LEFT OUTER JOIN 
                  (
                     SELECT                        
                        A.WORK_ORD_NO                       
                        , SUM(A.FAULTY_CNT) E_FAULTY_CNT                       
                     FROM TB_EDGE_GOODS_FAULTY_ADM_CODE A,  (SELECT DISTINCT WORK_ORD_NO FROM TB_WORK_ORDER_OUTPUT_SUB X WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDateTo}) X
                     WHERE A.WORK_ORD_NO = X.WORK_ORD_NO
                     GROUP BY A.WORK_ORD_NO
                  ) B
                  ON A.WORK_ORD_NO = B.WORK_ORD_NO    
				  LEFT OUTER JOIN 
                  (
                    SELECT
							X.WORK_ORD_NO			
							, SUM(ISNULL(FAULTY_CNT,0)) APPEAR_FAULTY_CNT						
							
						FROM TB_GOODS_FAULTY_ADM_CODE Z, (SELECT DISTINCT WORK_ORD_NO FROM TB_WORK_ORDER_OUTPUT_SUB X WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDateTo}) X
						WHERE 1=1 
						AND X.WORK_ORD_NO = Z.WORK_ORD_NO	
					
						
						GROUP BY X.WORK_ORD_NO
                  ) BB
                  ON A.WORK_ORD_NO = BB.WORK_ORD_NO    
				  
				  LEFT OUTER JOIN

				 (
                     SELECT
                        X.WORK_ORD_NO                       
                        , SUM(A.FAULTY_CNT) FAULTY_CNT
                  
                     FROM TB_SHIP_INSPECT_ADM A, (SELECT DISTINCT WORK_ORD_NO FROM TB_WORK_ORDER_OUTPUT_SUB X WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDateTo}) X
                     WHERE  RE_INSP_STATUS = '002'
					 AND A.WORK_ORD_NO = X.WORK_ORD_NO
                     GROUP BY X.WORK_ORD_NO
                  ) C
                   ON  C.WORK_ORD_NO = A.WORK_ORD_NO
              
               ) AA
               GROUP BY AA.WORK_ORD_NO, AA.GUBUN
            ) AS B
            GROUP BY
               B.WORK_ORD_NO,GUBUN
         ) AS AA
         
         LEFT OUTER JOIN
         
         (
            SELECT
               *
            FROM
            (
               

			   SELECT X.[WORK_ORD_NO]					 							 
					  ,B.MINOR_CD
					  ,SUM(ISNULL(B.FAULTY_CNT,0)) B_FALUTY
					 from TB_SHIP_INSPECT_ADM A, TB_SHIP_INSPECT_DTL B, (SELECT DISTINCT WORK_ORD_NO FROM TB_WORK_ORDER_OUTPUT_SUB X WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDateTo} ) X
				where a.IDX = b.SHIP_INSP_IDX
				AND A.RE_INSP_STATUS = '002'				
				AND A.WORK_ORD_NO = X.WORK_ORD_NO
				
				GROUP BY X.WORK_ORD_NO, MINOR_CD

				UNION ALL

				SELECT
					X.WORK_ORD_NO							
					, MINOR_CD							
					, SUM(ISNULL(FAULTY_CNT,0)) FAULTY_CNT						
							
				FROM TB_GOODS_FAULTY_ADM_CODE Z, (SELECT DISTINCT WORK_ORD_NO FROM TB_WORK_ORDER_OUTPUT_SUB X WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDateTo}) X
				WHERE 1=1 
				AND X.WORK_ORD_NO = Z.WORK_ORD_NO	
					
						
				GROUP BY X.WORK_ORD_NO, MINOR_CD
			
				UNION ALL
			
				SELECT
					X.WORK_ORD_NO							
					, '200' AS MINOR_CD  							
					, SUM(ISNULL(FAULTY_CNT,0)) FAULTY_CNT							
							
				FROM TB_EDGE_GOODS_FAULTY_ADM_CODE Z ,  (SELECT DISTINCT WORK_ORD_NO FROM TB_WORK_ORDER_OUTPUT_SUB X WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDateTo} ) X				
						 
				WHERE MINOR_CD < '009'						
				AND X.WORK_ORD_NO = Z.WORK_ORD_NO
			
				GROUP BY X.WORK_ORD_NO
            ) AS t
            PIVOT(SUM(B_FALUTY) FOR MINOR_CD IN (
			${codeList}
            )) AS PVT
         ) BB
         ON AA.WORK_ORD_NO = BB.WORK_ORD_NO
	]]>

		<if test="qutyCd != null and qutyCd != ''">
			AND D.QUTY_CD = #{qutyCd}
		</if>
		
		ORDER BY WORK_ORD_NO,WORK_ORD_DATE, SEQ 
	</select>
	
	<!--(생산검사현황) 외관검사 날짜로 작지별/주야별 재검포함 집계 리스트 조회 -->
	<select id="faultyWorkOrdNoReInspTotalListFa" resultType="HashMap" parameterType="mes.domain.po.WorkOrderVo">
		<![CDATA[
			SELECT
				DISTINCT 			
				A.ORD_DATE AS WORK_ORD_DATE
				
				, CONCAT( DATEPART(MM, A.ORD_DATE ), '월' ) AS WORK_ORD_DATE_MM
				, CONCAT( DATEPART(WW, A.ORD_DATE ), '주차' ) AS WORK_ORD_DATE_WW
				
				, ISNULL(F.SUB_FILM1, '-') SUB_FILM1
				, ISNULL(F.SUB_FILM2, '-') SUB_FILM2
				, ISNULL(F.SUB_FILM3, '-') SUB_FILM3
				, ISNULL(F.SUB_FILM4, '-') SUB_FILM4		
				, (SELECT EQUIP_NM FROM TB_EQUIP_CODE_ADM B WHERE B.EQUIP_CD = A.EQUIP_CD) EQUIP_NM			
				, C.GOODS_NM	
				, (SELECT BASE_CD_NM FROM TB_SYSTEM_COMMON_CODE B WHERE B.BASE_GROUP_CD='016' AND B.BASE_CD = A.WORK_TEAM_CD) WORK_TEAM_NM			
				, (SELECT DEAL_CORP_NM FROM TB_DEAL_CORP_ADM B WHERE B.DEAL_CORP_CD = A.DEAL_CORP_CD) DEAL_CORP_NM
				, C.MODEL
				, C.ALNICU_MATRL_CD

				, (SELECT MATRL_NM FROM TB_MATRL_CODE_ADM B WHERE C.ALNICU_MATRL_CD = B.MATRL_CD) ALNICU_MATRL_NM
				, C.FILM_MATRL_CD
				, (SELECT MATRL_NM FROM TB_MATRL_CODE_ADM B WHERE C.FILM_MATRL_CD = B.MATRL_CD) FILM_MATRL_NM
				, (SELECT BASE_CD_NM FROM TB_SYSTEM_COMMON_CODE B WHERE BASE_GROUP_CD = '007' AND  B.BASE_CD = D.QUTY_CD) QUTY_NM
				, (SELECT BASE_CD_NM FROM TB_SYSTEM_COMMON_CODE B WHERE BASE_GROUP_CD = '019' AND  B.BASE_CD = D.GUBUN_CD) GUBUN_NM
				, (SELECT BASE_CD_NM FROM TB_SYSTEM_COMMON_CODE B WHERE BASE_GROUP_CD = '020' AND  B.BASE_CD = D.CHAMFER_YN_CD) CHAMFER_YN_NM
				, ISNULL(G.VISION_FAULTY_SUM,'0') VISION_FAULTY_SUM

				, A.*
				, ISNULL(A.APPEAR_OUTPUT_CNT,0) + ISNULL(YY.APPEAR_FAULTY_CNT,0) + ISNULL(ZZ.FAULTY_CNT,0) OUTPUT_CNT
				, ISNULL(YY.APPEAR_FAULTY_CNT,0) + ISNULL(ZZ.FAULTY_CNT,0) APPEAR_FAULTY_CNT
				, ISNULL(XX.E_FAULTY_CNT,0) EDGE_FAULTY_CNT
				, ISNULL(ZZ.FAULTY_CNT,0) FAULTY_CNT
				
				, dbo.FC_BM_USERNM(H.MAIN_WORK_CHARGR_NM) MAIN_WORK_CHARGR_NM
				, dbo.FC_BM_USERNM(H.APPEAR_INSPCT_CHARGER_NM) APPEAR_INSPCT_CHARGER_NM
				, dbo.FC_BM_USERNM(H.EDGE_INSPCT_CHARGER_NM) EDGE_INSPCT_CHARGER_NM
				,${codeList}
				
			FROM
			(
				SELECT 
					A.WORK_ORD_NO
					, '' TRAY_NO
					, '' SEQ				
						
					, ISNULL( SUM(A.OUTPUT_CNT),0)  AS APPEAR_OUTPUT_CNT	
					, '0' CNT		
						
					, STUFF((         
					  SELECT  DISTINCT ',' + WORK_ORD_LOT_NO
					  FROM    TB_WORK_ORDER_OUTPUT_SUB X
					  WHERE   X.WORK_ORD_NO = A.WORK_ORD_NO
					  FOR XML PATH('') ),1,1,'')
					    AS WORK_ORD_LOT_NO
					, STUFF((         
					  SELECT  DISTINCT ',' + LOT_NO
					  FROM    TB_WORK_ORDER_OUTPUT_SUB X
					  WHERE   X.WORK_ORD_NO = A.WORK_ORD_NO
					  FOR XML PATH('') ),1,1,'')
					    AS LOT_NO
					 , STUFF((         
					  SELECT  DISTINCT ',' + APPEAR_INSPCT_DATE
					  FROM    TB_WORK_ORDER_OUTPUT_SUB X
					  WHERE   X.WORK_ORD_NO = A.WORK_ORD_NO
					  FOR XML PATH('') ),1,1,'')
					    AS APPEAR_INSPCT_DATE
					, ISNULL(Sum(B.TARGET_CNT),0) TARGET_CNT
					, MAX(B.ORD_DATE) ORD_DATE
					, MAX(B.EQUIP_CD) EQUIP_CD
					, MAX(B.GOODS_CD) GOODS_CD
					, MAX(B.EQUIP_COND_SEQ) EQUIP_COND_SEQ
					, MAX(B.WORK_TEAM_CD) WORK_TEAM_CD
					, MAX(B.DEAL_CORP_CD) DEAL_CORP_CD
					, MAX(A.GUBUN) GUBUN					
				FROM TB_WORK_ORDER_OUTPUT_SUB A ,TB_WORK_ORDER B			

				WHERE 1=1
				AND A.WORK_ORD_NO = B.WORK_ORD_NO				
				]]>
				<if test="userNumber != null and userNumber != ''"> 
					AND ( A.APPEAR_INSPCT_CHARGER = #{userNumber} OR A.EDGE_INSPCT_CHARGER = #{userNumber} )
				</if>
						
				
				<!-- 일별 -->
				<if test="showType == null or showType.equals('') or (!showType.equals('showDate003') and !showType.equals('showDate004'))">
					AND A.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDateTo}
				</if>
				
				<!-- 월별 -->
				<if test="showType != null and showType.equals('showDate003')">
					AND DATEPART(YYYY, A.WORK_ORD_DATE ) = #{chooseDateFrom}
					AND DATEPART(MM, A.WORK_ORD_DATE ) = #{chooseDateTo}
				</if>
				<!-- 주차별 -->
				<if test="showType != null and showType.equals('showDate004')">
					AND DATEPART(YYYY, A.WORK_ORD_DATE ) = #{chooseDateFrom}
					AND DATEPART(WW, A.WORK_ORD_DATE ) = #{chooseDateTo}
				</if>
				<![CDATA[
				

				GROUP BY
					A.WORK_ORD_NO
					
				) A
				
				LEFT OUTER JOIN
				
				(
					SELECT
					   *
					FROM
					(
               

						SELECT
							X.[WORK_ORD_NO]					 							 
							,B.MINOR_CD
							,SUM(ISNULL(B.FAULTY_CNT,0)) FAULTY_CNT
						FROM TB_SHIP_INSPECT_ADM A, TB_SHIP_INSPECT_DTL B
							 , (SELECT
							 		DISTINCT WORK_ORD_NO
							 	FROM TB_WORK_ORDER_OUTPUT_SUB X
							 	WHERE 1=1
							 	]]>
								<!-- 일별 -->
								<if test="showType == null or showType.equals('') or (!showType.equals('showDate003') and !showType.equals('showDate004'))">
									AND X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDateTo}
								</if>
								
								<!-- 월별 -->
								<if test="showType != null and showType.equals('showDate003')">
									AND DATEPART(YYYY, X.WORK_ORD_DATE ) = #{chooseDateFrom}
									AND DATEPART(MM, X.WORK_ORD_DATE ) = #{chooseDateTo}
								</if>
								<!-- 주차별 -->
								<if test="showType != null and showType.equals('showDate004')">
									AND DATEPART(YYYY, X.WORK_ORD_DATE ) = #{chooseDateFrom}
									AND DATEPART(WW, X.WORK_ORD_DATE ) = #{chooseDateTo}
								</if>
								<![CDATA[
							 	 
							 ) X
						where a.IDX = b.SHIP_INSP_IDX
						AND A.RE_INSP_STATUS = '002'				
						AND A.WORK_ORD_NO = X.WORK_ORD_NO
				
						GROUP BY X.WORK_ORD_NO, MINOR_CD

						UNION ALL

						SELECT
							X.WORK_ORD_NO							
							, MINOR_CD							
							, SUM(ISNULL(FAULTY_CNT,0)) FAULTY_CNT						
							
						FROM TB_GOODS_FAULTY_ADM_CODE Z, (SELECT DISTINCT WORK_ORD_NO FROM TB_WORK_ORDER_OUTPUT_SUB X WHERE 1=1
							 	]]>
								<!-- 일별 -->
								<if test="showType == null or showType.equals('') or (!showType.equals('showDate003') and !showType.equals('showDate004'))">
									AND X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDateTo}
								</if>
								
								<!-- 월별 -->
								<if test="showType != null and showType.equals('showDate003')">
									AND DATEPART(YYYY, X.WORK_ORD_DATE ) = #{chooseDateFrom}
									AND DATEPART(MM, X.WORK_ORD_DATE ) = #{chooseDateTo}
								</if>
								<!-- 주차별 -->
								<if test="showType != null and showType.equals('showDate004')">
									AND DATEPART(YYYY, X.WORK_ORD_DATE ) = #{chooseDateFrom}
									AND DATEPART(WW, X.WORK_ORD_DATE ) = #{chooseDateTo}
								</if>
								<![CDATA[) X
						WHERE 1=1 
						AND X.WORK_ORD_NO = Z.WORK_ORD_NO	
					
						
						GROUP BY X.WORK_ORD_NO, MINOR_CD
			
						UNION ALL
			
						SELECT
							X.WORK_ORD_NO							
							, '200' AS MINOR_CD  							
							, SUM(ISNULL(FAULTY_CNT,0)) FAULTY_CNT							
							
						FROM TB_EDGE_GOODS_FAULTY_ADM_CODE Z ,  (SELECT DISTINCT WORK_ORD_NO FROM TB_WORK_ORDER_OUTPUT_SUB X WHERE 1=1
							 	]]>
								<!-- 일별 -->
								<if test="showType == null or showType.equals('') or (!showType.equals('showDate003') and !showType.equals('showDate004'))">
									AND X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDateTo}
								</if>
								
								<!-- 월별 -->
								<if test="showType != null and showType.equals('showDate003')">
									AND DATEPART(YYYY, X.WORK_ORD_DATE ) = #{chooseDateFrom}
									AND DATEPART(MM, X.WORK_ORD_DATE ) = #{chooseDateTo}
								</if>
								<!-- 주차별 -->
								<if test="showType != null and showType.equals('showDate004')">
									AND DATEPART(YYYY, X.WORK_ORD_DATE ) = #{chooseDateFrom}
									AND DATEPART(WW, X.WORK_ORD_DATE ) = #{chooseDateTo}
								</if>
								<![CDATA[
							) X				
						 
						WHERE MINOR_CD < '009'						
						AND X.WORK_ORD_NO = Z.WORK_ORD_NO
			
						GROUP BY X.WORK_ORD_NO
					) AS t
					PIVOT(SUM(FAULTY_CNT) FOR MINOR_CD IN (
					${codeList}
					)) AS PVT
				) E
				ON 1=1
				AND A.WORK_ORD_NO = E.WORK_ORD_NO
				
				LEFT OUTER JOIN 
                  (
                     SELECT                        
                        A.WORK_ORD_NO                       
                        , SUM(A.FAULTY_CNT) E_FAULTY_CNT                       
                     FROM TB_EDGE_GOODS_FAULTY_ADM_CODE A,  (SELECT DISTINCT WORK_ORD_NO FROM TB_WORK_ORDER_OUTPUT_SUB X WHERE 1=1
							 	]]>
								<!-- 일별 -->
								<if test="showType == null or showType.equals('') or (!showType.equals('showDate003') and !showType.equals('showDate004'))">
									AND X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDateTo}
								</if>
								
								<!-- 월별 -->
								<if test="showType != null and showType.equals('showDate003')">
									AND DATEPART(YYYY, X.WORK_ORD_DATE ) = #{chooseDateFrom}
									AND DATEPART(MM, X.WORK_ORD_DATE ) = #{chooseDateTo}
								</if>
								<!-- 주차별 -->
								<if test="showType != null and showType.equals('showDate004')">
									AND DATEPART(YYYY, X.WORK_ORD_DATE ) = #{chooseDateFrom}
									AND DATEPART(WW, X.WORK_ORD_DATE ) = #{chooseDateTo}
								</if>
								<![CDATA[ 
                     
                     ) X
                     WHERE A.WORK_ORD_NO = X.WORK_ORD_NO
                     GROUP BY A.WORK_ORD_NO
                  ) XX
                  ON A.WORK_ORD_NO = XX.WORK_ORD_NO    
				  LEFT OUTER JOIN 
                  (
                    SELECT
							X.WORK_ORD_NO			
							, SUM(ISNULL(FAULTY_CNT,0)) APPEAR_FAULTY_CNT						
							
						FROM TB_GOODS_FAULTY_ADM_CODE Z, (SELECT DISTINCT WORK_ORD_NO FROM TB_WORK_ORDER_OUTPUT_SUB X WHERE 1=1
							 	]]>
								<!-- 일별 -->
								<if test="showType == null or showType.equals('') or (!showType.equals('showDate003') and !showType.equals('showDate004'))">
									AND X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDateTo}
								</if>
								
								<!-- 월별 -->
								<if test="showType != null and showType.equals('showDate003')">
									AND DATEPART(YYYY, X.WORK_ORD_DATE ) = #{chooseDateFrom}
									AND DATEPART(MM, X.WORK_ORD_DATE ) = #{chooseDateTo}
								</if>
								<!-- 주차별 -->
								<if test="showType != null and showType.equals('showDate004')">
									AND DATEPART(YYYY, X.WORK_ORD_DATE ) = #{chooseDateFrom}
									AND DATEPART(WW, X.WORK_ORD_DATE ) = #{chooseDateTo}
								</if>
								<![CDATA[
								) X
						WHERE 1=1 
						AND X.WORK_ORD_NO = Z.WORK_ORD_NO	
					
						
						GROUP BY X.WORK_ORD_NO
                  ) YY
                  ON A.WORK_ORD_NO = YY.WORK_ORD_NO    
				  
				  LEFT OUTER JOIN

				 (
                     SELECT
                        X.WORK_ORD_NO                       
                        , SUM(A.FAULTY_CNT) FAULTY_CNT
                  
                     FROM TB_SHIP_INSPECT_ADM A, (SELECT DISTINCT WORK_ORD_NO FROM TB_WORK_ORDER_OUTPUT_SUB X WHERE 1=1
							 	]]>
								<!-- 일별 -->
								<if test="showType == null or showType.equals('') or (!showType.equals('showDate003') and !showType.equals('showDate004'))">
									AND X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDateTo}
								</if>
								
								<!-- 월별 -->
								<if test="showType != null and showType.equals('showDate003')">
									AND DATEPART(YYYY, X.WORK_ORD_DATE ) = #{chooseDateFrom}
									AND DATEPART(MM, X.WORK_ORD_DATE ) = #{chooseDateTo}
								</if>
								<!-- 주차별 -->
								<if test="showType != null and showType.equals('showDate004')">
									AND DATEPART(YYYY, X.WORK_ORD_DATE ) = #{chooseDateFrom}
									AND DATEPART(WW, X.WORK_ORD_DATE ) = #{chooseDateTo}
								</if>
								<![CDATA[
								) X
                     WHERE  RE_INSP_STATUS = '002'
					 AND A.WORK_ORD_NO = X.WORK_ORD_NO
                     GROUP BY X.WORK_ORD_NO
                  ) ZZ
                   ON  ZZ.WORK_ORD_NO = A.WORK_ORD_NO
		
				LEFT OUTER JOIN
				(
					SELECT
						FILM_PIVOT.WORK_ORD_NO
						, FILM_PIVOT.[1] AS SUB_FILM1
						, FILM_PIVOT.[2] AS SUB_FILM2
						, FILM_PIVOT.[3] AS SUB_FILM3
						, FILM_PIVOT.[4] AS SUB_FILM4
		            FROM
					(
		            	SELECT
		                	A.WORK_ORD_NO
		                    , A.LOT_NO
		                    , ROW_NUMBER() OVER(PARTITION BY A.WORK_ORD_NO ORDER BY A.REG_DATE) ROW_NUMBER
		                 FROM TB_WORK_ORDER_DTL A
		                 , TB_MATRL_CODE_ADM B
		                 , (SELECT BASE_CD, BASE_CD_NM, BASE_CD_ABBR FROM TB_SYSTEM_COMMON_CODE B WHERE B.BASE_GROUP_CD='007') C
		                 , (   SELECT
		                          DISTINCT F.WORK_ORD_NO
		                       FROM TB_WORK_ORDER_OUTPUT_SUB F LEFT OUTER JOIN TB_GOODS_FAULTY_ADM_CODE Z 
							   ON 1=1
							   AND F.WORK_ORD_NO = Z.WORK_ORD_NO
		                       WHERE 1=1  
							    AND F.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDateTo}
							 	]]>
								<!-- 일별 -->
								<if test="showType == null or showType.equals('') or (!showType.equals('showDate003') and !showType.equals('showDate004'))">
									AND F.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDateTo}
								</if>
								
								<!-- 월별 -->
								<if test="showType != null and showType.equals('showDate003')">
									AND DATEPART(YYYY, F.WORK_ORD_DATE ) = #{chooseDateFrom}
									AND DATEPART(MM, F.WORK_ORD_DATE ) = #{chooseDateTo}
								</if>
								<!-- 주차별 -->
								<if test="showType != null and showType.equals('showDate004')">
									AND DATEPART(YYYY, F.WORK_ORD_DATE ) = #{chooseDateFrom}
									AND DATEPART(WW, F.WORK_ORD_DATE ) = #{chooseDateTo}
								</if>
								<![CDATA[
							
		                       GROUP BY F.WORK_ORD_NO
		        
		                       UNION
		        
		                       SELECT
		                          DISTINCT F.WORK_ORD_NO
		                       FROM TB_EDGE_GOODS_FAULTY_ADM_CODE Z RIGHT OUTER JOIN TB_WORK_ORDER_OUTPUT_SUB F
							   ON 1=1
							   AND F.WORK_ORD_NO = Z.WORK_ORD_NO
		                       WHERE 1=1
		                      
		                     
							    AND F.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDateTo}
							    
							 	]]>
								<!-- 일별 -->
								<if test="showType == null or showType.equals('') or (!showType.equals('showDate003') and !showType.equals('showDate004'))">
									AND F.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDateTo}
								</if>
								
								<!-- 월별 -->
								<if test="showType != null and showType.equals('showDate003')">
									AND DATEPART(YYYY, F.WORK_ORD_DATE ) = #{chooseDateFrom}
									AND DATEPART(MM, F.WORK_ORD_DATE ) = #{chooseDateTo}
								</if>
								<!-- 주차별 -->
								<if test="showType != null and showType.equals('showDate004')">
									AND DATEPART(YYYY, F.WORK_ORD_DATE ) = #{chooseDateFrom}
									AND DATEPART(WW, F.WORK_ORD_DATE ) = #{chooseDateTo}
								</if>
								<![CDATA[
							  
		                       GROUP BY F.WORK_ORD_NO
		                       ) E
		                    WHERE   A.MATRL_CD = B.MATRL_CD
		                    AND      B.QUTY_CD = C.BASE_CD
		                    AND      (C.BASE_CD_ABBR = 'F')
		                    AND A.WORK_ORD_NO = E.WORK_ORD_NO
		              ) AS A
		             PIVOT
	                 (
	                    MIN(LOT_NO)
	                    FOR ROW_NUMBER IN ( [1], [2], [3], [4] )
	                 ) FILM_PIVOT
				
				) AS F

				ON 1=1
				AND A.WORK_ORD_NO = F.WORK_ORD_NO 


				LEFT OUTER JOIN 
				(
					SELECT
						F.WORK_ORD_NO
						, SUM(FAULTY_CNT) VISION_FAULTY_SUM
					FROM TB_VISION_FAULTY_ADM_CODE Z , TB_WORK_ORDER_OUTPUT_SUB F
					WHERE 1=1
					AND F.WORK_ORD_NO = Z.WORK_ORD_NO
					
					]]>
					<!-- 일별 -->
					<if test="showType == null or showType.equals('') or (!showType.equals('showDate003') and !showType.equals('showDate004'))">
						AND F.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDateTo}
					</if>
					
					<!-- 월별 -->
					<if test="showType != null and showType.equals('showDate003')">
						AND DATEPART(YYYY, F.WORK_ORD_DATE ) = #{chooseDateFrom}
						AND DATEPART(MM, F.WORK_ORD_DATE ) = #{chooseDateTo}
					</if>
					<!-- 주차별 -->
					<if test="showType != null and showType.equals('showDate004')">
						AND DATEPART(YYYY, F.WORK_ORD_DATE ) = #{chooseDateFrom}
						AND DATEPART(WW, F.WORK_ORD_DATE ) = #{chooseDateTo}
					</if>
					<![CDATA[
				   
					AND MINOR_CD NOT IN ('001', '002')
					GROUP BY F.WORK_ORD_NO
				) AS G
				ON A.WORK_ORD_NO = G.WORK_ORD_NO
				
				, (
					SELECT
						WORK_ORD_NO
						, STRING_AGG(MAIN_WORK_CHARGR_NM, ', ')  MAIN_WORK_CHARGR_NM
						, STRING_AGG(APPEAR_INSPCT_CHARGER_NM, ', ') APPEAR_INSPCT_CHARGER_NM
						, STRING_AGG(EDGE_INSPCT_CHARGER_NM, ', ') EDGE_INSPCT_CHARGER_NM
					FROM
					(
						SELECT
							DISTINCT A.WORK_ORD_NO
						
							, A.MAIN_WORK_CHARGR
							, (SELECT USER_NM FROM TB_USER WHERE USER_NUMBER = MAIN_WORK_CHARGR )  AS MAIN_WORK_CHARGR_NM
							, A.APPEAR_INSPCT_CHARGER
							, (SELECT USER_NM FROM TB_USER WHERE USER_NUMBER = APPEAR_INSPCT_CHARGER )  AS APPEAR_INSPCT_CHARGER_NM	
							, A.EDGE_INSPCT_CHARGER
							, (SELECT USER_NM FROM TB_USER WHERE USER_NUMBER = EDGE_INSPCT_CHARGER )  AS EDGE_INSPCT_CHARGER_NM
						FROM TB_WORK_ORDER_OUTPUT_SUB A
						WHERE 1=1
				
					    				    
					    ]]>
					    <if test="userNumber != null and userNumber != ''"> 
							AND ( A.APPEAR_INSPCT_CHARGER = #{userNumber} OR A.EDGE_INSPCT_CHARGER = #{userNumber} )
						</if>
						<!-- 일별 -->
						<if test="showType == null or showType.equals('') or (!showType.equals('showDate003') and !showType.equals('showDate004'))">
							AND A.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDateTo}
						</if>
						
						<!-- 월별 -->
						<if test="showType != null and showType.equals('showDate003')">
							AND DATEPART(YYYY, A.WORK_ORD_DATE ) = #{chooseDateFrom}
							AND DATEPART(MM, A.WORK_ORD_DATE ) = #{chooseDateTo}
						</if>
						<!-- 주차별 -->
						<if test="showType != null and showType.equals('showDate004')">
							AND DATEPART(YYYY, A.WORK_ORD_DATE ) = #{chooseDateFrom}
							AND DATEPART(WW, A.WORK_ORD_DATE ) = #{chooseDateTo}
						</if>
						<![CDATA[
					    
					) C
					GROUP BY
						WORK_ORD_NO
				) H
				, ( SELECT FILM_MATRL_CD, ALNICU_MATRL_CD, MODEL, GOODS_CD, GOODS_NM FROM TB_GOODS_CODE_ADM ) C
				, ( SELECT MATRL_CD, CHAMFER_YN_CD, GUBUN_CD, QUTY_CD FROM TB_MATRL_CODE_ADM ) D
				
			WHERE 1=1			
			AND A.WORK_ORD_NO = H.WORK_ORD_NO
			AND A.GOODS_CD = C.GOODS_CD
			AND D.MATRL_CD = C.ALNICU_MATRL_CD
		]]>
		
		<if test="qutyCd != null and qutyCd != ''">
			AND D.QUTY_CD = #{qutyCd}
		</if>
		
		ORDER BY ORD_DATE,WORK_ORD_NO,TRAY_NO, SEQ
	</select>
	
	
	<!--(생산검사현황) 외관검사 날짜로 작지별/주야별 재검만 리스트 조회 -->
	<select id="faultyWorkOrdNoReInspOnlyListFa" resultType="HashMap" parameterType="mes.domain.po.WorkOrderVo">
		
		<!-- SELECT
				DISTINCT 			
				A.ORD_DATE AS WORK_ORD_DATE
				
				, E.FAULTY_CNT
				, E.SEQ
				, E.TRAY_NO
				, E.CNT
				, ISNULL(F.SUB_FILM1, '-') SUB_FILM1
				, ISNULL(F.SUB_FILM2, '-') SUB_FILM2
				, ISNULL(F.SUB_FILM3, '-') SUB_FILM3
				, ISNULL(F.SUB_FILM4, '-') SUB_FILM4		
				, (SELECT EQUIP_NM FROM TB_EQUIP_CODE_ADM B WHERE B.EQUIP_CD = A.EQUIP_CD) EQUIP_NM			
				, C.GOODS_NM	
				, (SELECT BASE_CD_NM FROM TB_SYSTEM_COMMON_CODE B WHERE B.BASE_GROUP_CD='016' AND B.BASE_CD = A.WORK_TEAM_CD) WORK_TEAM_NM			
				, (SELECT DEAL_CORP_NM FROM TB_DEAL_CORP_ADM B WHERE B.DEAL_CORP_CD = A.DEAL_CORP_CD) DEAL_CORP_NM
				, C.MODEL
				, C.ALNICU_MATRL_CD

				, (SELECT MATRL_NM FROM TB_MATRL_CODE_ADM B WHERE C.ALNICU_MATRL_CD = B.MATRL_CD) ALNICU_MATRL_NM
				, C.FILM_MATRL_CD
				, (SELECT MATRL_NM FROM TB_MATRL_CODE_ADM B WHERE C.FILM_MATRL_CD = B.MATRL_CD) FILM_MATRL_NM
				, (SELECT BASE_CD_NM FROM TB_SYSTEM_COMMON_CODE B WHERE BASE_GROUP_CD = '007' AND  B.BASE_CD = D.QUTY_CD) QUTY_NM
				, (SELECT BASE_CD_NM FROM TB_SYSTEM_COMMON_CODE B WHERE BASE_GROUP_CD = '019' AND  B.BASE_CD = D.GUBUN_CD) GUBUN_NM
				, (SELECT BASE_CD_NM FROM TB_SYSTEM_COMMON_CODE B WHERE BASE_GROUP_CD = '020' AND  B.BASE_CD = D.CHAMFER_YN_CD) CHAMFER_YN_NM
				, ISNULL(G.VISION_FAULTY_SUM,'0') VISION_FAULTY_SUM

				, A.*
				, dbo.FC_BM_USERNM(H.MAIN_WORK_CHARGR_NM) MAIN_WORK_CHARGR_NM
				, dbo.FC_BM_USERNM(H.APPEAR_INSPCT_CHARGER_NM) APPEAR_INSPCT_CHARGER_NM
				, dbo.FC_BM_USERNM(H.EDGE_INSPCT_CHARGER_NM) EDGE_INSPCT_CHARGER_NM
				, ${codeList}
				
			FROM
			(
				SELECT 
					A.WORK_ORD_NO							
					, ((SELECT SUM(OUTPUT_CNT) FROM TB_WORK_ORDER_OUTPUT_SUB X 
					WHERE X.WORK_ORD_NO = A.WORK_ORD_NO GROUP BY WORK_ORD_NO) + ISNULL(Sum(A.APPEAR_FAULTY_CNT),0)) AS OUTPUT_CNT		
					, (SELECT SUM(OUTPUT_CNT) FROM TB_WORK_ORDER_OUTPUT_SUB X 
					WHERE X.WORK_ORD_NO = A.WORK_ORD_NO GROUP BY WORK_ORD_NO) AS APPEAR_OUTPUT_CNT			
					
					, ISNULL(SUM(A.APPEAR_FAULTY_CNT),0) AS APPEAR_FAULTY_CNT										
					, ISNULL(SUM(A.EDGE_FAULTY_CNT),0) AS EDGE_FAULTY_CNT					
					, A.WORK_ORD_LOT_NO
					, A.LOT_NO
					, A.APPEAR_INSPCT_DATE
					, ISNULL(Sum(B.TARGET_CNT),0) TARGET_CNT
					, MAX(B.ORD_DATE) ORD_DATE
					, MAX(B.EQUIP_CD) EQUIP_CD
					, MAX(B.GOODS_CD) GOODS_CD
					, MAX(B.EQUIP_COND_SEQ) EQUIP_COND_SEQ
					, MAX(B.WORK_TEAM_CD) WORK_TEAM_CD
					, MAX(B.DEAL_CORP_CD) DEAL_CORP_CD
					, MAX(A.GUBUN) GUBUN					
				FROM TB_WORK_ORDER_OUTPUT_SUB A 
				LEFT OUTER JOIN
				 (
                     SELECT A.TRAY_NO
							  ,A.SEQ
							  ,A.WORK_ORD_NO
							  ,A.INSP_STATUS
							  ,A.INSP_DATE     
							  ,A.FAULTY_CNT  
							  ,A.DAY_NIGHT_CD
							  ,B.MINOR_CD
							  ,A.INSP_CHARGR
							  ,A.PRODUCT_DATE
							  ,B.FAULTY_CNT B_FALUTY
							  ,FAULTY_TRAY_NO
							  ,(CNT * 65) CNT
							 from TB_SHIP_INSPECT_ADM A, TB_SHIP_INSPECT_DTL B,TB_WORK_ORDER_OUTPUT_SUB C 	,(SELECT IDX ,COUNT(idx) CNT FROM (
																												SELECT idx	
																												,value FROM TB_SHIP_INSPECT_ADM A CROSS APPLY STRING_SPLIT(FAULTY_TRAY_NO, ',')
																												) AA
																												group by idx) D
						where a.IDX = b.SHIP_INSP_IDX
						AND A.RE_INSP_STATUS = '002'
						AND A.INSP_DATE  BETWEEN #{chooseDateFrom} AND #{chooseDateTo}
						AND A.WORK_ORD_NO = C.WORK_ORD_NO
						AND C.APPEAR_INSPCT_DATE = A.INSP_DATE
						AND A.FAULTY_CNT != 0
						AND A.IDX = D.IDX	
                  ) CC

                   ON  CC.WORK_ORD_NO = A.WORK_ORD_NO
                  AND CC.INSP_DATE = A.APPEAR_INSPCT_DATE                 
                  AND CC.DAY_NIGHT_CD = A.GUBUN 
				  
				  ,TB_WORK_ORDER B			

				WHERE 1=1
				AND A.WORK_ORD_NO = B.WORK_ORD_NO
				AND A.APPEAR_INSPCT_DATE BETWEEN #{chooseDateFrom} AND #{chooseDateTo}
				

				GROUP BY
					A.WORK_ORD_NO
					, A.WORK_ORD_LOT_NO
					, A.LOT_NO
					, A.APPEAR_INSPCT_DATE
				) A
				
				,
				
				(
					select
						INSP_DATE		
						, WORK_ORD_NO
						, TRAY_NO
						, SEQ		
						, CNT
						, FAULTY_CNT		
						, PRODUCT_DATE	
						, DAY_NIGHT_CD
				
						,${codeList}
						from(

						SELECT A.TRAY_NO
						  ,A.SEQ
						  ,A.WORK_ORD_NO
						  ,A.INSP_STATUS
						  ,A.INSP_DATE     
						  ,A.FAULTY_CNT  
						  ,A.DAY_NIGHT_CD
						  ,B.MINOR_CD
						  ,A.INSP_CHARGR
						  ,A.PRODUCT_DATE
						  ,B.FAULTY_CNT B_FALUTY
						  ,FAULTY_TRAY_NO
						  ,(CNT * 65) CNT
						 from TB_SHIP_INSPECT_ADM A, TB_SHIP_INSPECT_DTL B,TB_WORK_ORDER_OUTPUT_SUB C 	,(SELECT IDX ,COUNT(idx) CNT FROM (
																											SELECT idx	
																											,value FROM TB_SHIP_INSPECT_ADM A CROSS APPLY STRING_SPLIT(FAULTY_TRAY_NO, ',')
																											) AA
																											group by idx) D
						where a.IDX = b.SHIP_INSP_IDX
						AND A.RE_INSP_STATUS = '002'
						AND A.INSP_DATE  BETWEEN #{chooseDateFrom} AND #{chooseDateTo}
						AND A.WORK_ORD_NO = C.WORK_ORD_NO
						AND C.APPEAR_INSPCT_DATE = A.INSP_DATE
						AND A.FAULTY_CNT != 0
						AND A.IDX = D.IDX	

							) AS t 
							PIVOT(SUM(B_FALUTY) FOR MINOR_CD IN (
							${codeList}
					)) AS PVT
				) E
			
				
				
				
				
				, ( SELECT FILM_MATRL_CD, ALNICU_MATRL_CD, MODEL, GOODS_CD, GOODS_NM FROM TB_GOODS_CODE_ADM ) C
				, ( SELECT MATRL_CD, CHAMFER_YN_CD, GUBUN_CD, QUTY_CD FROM TB_MATRL_CODE_ADM ) D
				
				
				, (
					SELECT
						FILM_PIVOT.WORK_ORD_NO
						, FILM_PIVOT.[1] AS SUB_FILM1
						, FILM_PIVOT.[2] AS SUB_FILM2
						, FILM_PIVOT.[3] AS SUB_FILM3
						, FILM_PIVOT.[4] AS SUB_FILM4
		            FROM
					(
		            	SELECT
		                	A.WORK_ORD_NO
		                    , A.LOT_NO
		                    , ROW_NUMBER() OVER(PARTITION BY A.WORK_ORD_NO ORDER BY A.REG_DATE) ROW_NUMBER
		                 FROM TB_WORK_ORDER_DTL A
		                 , TB_MATRL_CODE_ADM B
		                 , (SELECT BASE_CD, BASE_CD_NM, BASE_CD_ABBR FROM TB_SYSTEM_COMMON_CODE B WHERE B.BASE_GROUP_CD='007') C
		                 , (   SELECT
		                          DISTINCT WORK_ORD_NO
		                       FROM TB_GOODS_FAULTY_ADM_CODE Z
		                       WHERE 1=1
							   AND FAULTY_REG_DATE BETWEEN #{chooseDateFrom} AND #{chooseDateTo}
							   GROUP BY WORK_ORD_NO
		        
		                       UNION
		        
		                       SELECT
		                          DISTINCT WORK_ORD_NO
		                       FROM TB_EDGE_GOODS_FAULTY_ADM_CODE Z
		                       WHERE 1=1
							   AND FAULTY_REG_DATE BETWEEN #{chooseDateFrom} AND #{chooseDateTo}

							   GROUP BY WORK_ORD_NO
		                       ) E
		                    WHERE   A.MATRL_CD = B.MATRL_CD
		                    AND      B.QUTY_CD = C.BASE_CD
		                    AND      (C.BASE_CD_ABBR = 'F')
		                    AND A.WORK_ORD_NO = E.WORK_ORD_NO
		              ) AS A
		             PIVOT
	                 (
	                    MIN(LOT_NO)
	                    FOR ROW_NUMBER IN ( [1], [2], [3], [4] )
	                 ) FILM_PIVOT
				
				) AS F
				LEFT OUTER JOIN 
				(
					SELECT
						WORK_ORD_NO
						, SUM(FAULTY_CNT) VISION_FAULTY_SUM
					FROM TB_VISION_FAULTY_ADM_CODE
					WHERE 1=1
					AND FAULTY_REG_DATE BETWEEN #{chooseDateFrom} AND #{chooseDateTo}
					AND MINOR_CD NOT IN ('001', '002')
					GROUP BY WORK_ORD_NO
				) AS G
				ON F.WORK_ORD_NO = G.WORK_ORD_NO
				
				, (
					SELECT
						WORK_ORD_NO
						, STRING_AGG(MAIN_WORK_CHARGR_NM, ', ')  MAIN_WORK_CHARGR_NM
						, STRING_AGG(APPEAR_INSPCT_CHARGER_NM, ', ') APPEAR_INSPCT_CHARGER_NM
						, STRING_AGG(EDGE_INSPCT_CHARGER_NM, ', ') EDGE_INSPCT_CHARGER_NM
					FROM
					(
						SELECT
							DISTINCT A.WORK_ORD_NO
							, A.MAIN_WORK_CHARGR
							, (SELECT USER_NM FROM TB_USER WHERE USER_NUMBER = MAIN_WORK_CHARGR )  AS MAIN_WORK_CHARGR_NM
							, A.APPEAR_INSPCT_CHARGER
							, (SELECT USER_NM FROM TB_USER WHERE USER_NUMBER = APPEAR_INSPCT_CHARGER )  AS APPEAR_INSPCT_CHARGER_NM	
							, A.EDGE_INSPCT_CHARGER
							, (SELECT USER_NM FROM TB_USER WHERE USER_NUMBER = EDGE_INSPCT_CHARGER )  AS EDGE_INSPCT_CHARGER_NM
						FROM TB_WORK_ORDER_OUTPUT_SUB A
						WHERE 1=1
						AND A.APPEAR_INSPCT_DATE BETWEEN #{chooseDateFrom} AND #{chooseDateTo}
						) C
					GROUP BY
						WORK_ORD_NO
				) H
				 
				
			WHERE 1=1
			AND A.WORK_ORD_NO = F.WORK_ORD_NO
			AND A.WORK_ORD_NO = H.WORK_ORD_NO
			AND A.GOODS_CD = C.GOODS_CD
			AND D.MATRL_CD = C.ALNICU_MATRL_CD
			AND A.WORK_ORD_NO = E.WORK_ORD_NO
			AND A.APPEAR_INSPCT_DATE = E.INSP_DATE
			AND A.GUBUN = E.DAY_NIGHT_CD -->
			<![CDATA[
							SELECT
				DISTINCT 			
				A.ORD_DATE AS WORK_ORD_DATE				
				, E.FAULTY_CNT
				, E.SEQ
				, E.TRAY_NO
				, E.CNT
				, ISNULL(F.SUB_FILM1, '-') SUB_FILM1
				, ISNULL(F.SUB_FILM2, '-') SUB_FILM2
				, ISNULL(F.SUB_FILM3, '-') SUB_FILM3
				, ISNULL(F.SUB_FILM4, '-') SUB_FILM4		
				, (SELECT EQUIP_NM FROM TB_EQUIP_CODE_ADM B WHERE B.EQUIP_CD = A.EQUIP_CD) EQUIP_NM			
				, C.GOODS_NM	
				, (SELECT BASE_CD_NM FROM TB_SYSTEM_COMMON_CODE B WHERE B.BASE_GROUP_CD='016' AND B.BASE_CD = A.WORK_TEAM_CD) WORK_TEAM_NM			
				, (SELECT DEAL_CORP_NM FROM TB_DEAL_CORP_ADM B WHERE B.DEAL_CORP_CD = A.DEAL_CORP_CD) DEAL_CORP_NM
				, C.MODEL
				, C.ALNICU_MATRL_CD

				, (SELECT MATRL_NM FROM TB_MATRL_CODE_ADM B WHERE C.ALNICU_MATRL_CD = B.MATRL_CD) ALNICU_MATRL_NM
				, C.FILM_MATRL_CD
				, (SELECT MATRL_NM FROM TB_MATRL_CODE_ADM B WHERE C.FILM_MATRL_CD = B.MATRL_CD) FILM_MATRL_NM
				, (SELECT BASE_CD_NM FROM TB_SYSTEM_COMMON_CODE B WHERE BASE_GROUP_CD = '007' AND  B.BASE_CD = D.QUTY_CD) QUTY_NM
				, (SELECT BASE_CD_NM FROM TB_SYSTEM_COMMON_CODE B WHERE BASE_GROUP_CD = '019' AND  B.BASE_CD = D.GUBUN_CD) GUBUN_NM
				, (SELECT BASE_CD_NM FROM TB_SYSTEM_COMMON_CODE B WHERE BASE_GROUP_CD = '020' AND  B.BASE_CD = D.CHAMFER_YN_CD) CHAMFER_YN_NM
				, ISNULL(G.VISION_FAULTY_SUM,'0') VISION_FAULTY_SUM

				, A.*
				, dbo.FC_BM_USERNM(H.MAIN_WORK_CHARGR_NM) MAIN_WORK_CHARGR_NM
				, dbo.FC_BM_USERNM(H.APPEAR_INSPCT_CHARGER_NM) APPEAR_INSPCT_CHARGER_NM
				, dbo.FC_BM_USERNM(H.EDGE_INSPCT_CHARGER_NM) EDGE_INSPCT_CHARGER_NM
				, ${codeList} 
				
			FROM
			(
				SELECT 
					A.WORK_ORD_NO							
					, ((SELECT SUM(OUTPUT_CNT) FROM TB_WORK_ORDER_OUTPUT_SUB X 
					WHERE X.WORK_ORD_NO = A.WORK_ORD_NO GROUP BY WORK_ORD_NO) + ISNULL(Sum(A.APPEAR_FAULTY_CNT),0)) AS OUTPUT_CNT		
					, (SELECT SUM(OUTPUT_CNT) FROM TB_WORK_ORDER_OUTPUT_SUB X 
					WHERE X.WORK_ORD_NO = A.WORK_ORD_NO GROUP BY WORK_ORD_NO) AS APPEAR_OUTPUT_CNT			
					
					, ISNULL(SUM(A.APPEAR_FAULTY_CNT),0) AS APPEAR_FAULTY_CNT										
					, ISNULL(SUM(A.EDGE_FAULTY_CNT),0) AS EDGE_FAULTY_CNT
					
					, STUFF((         
					  SELECT  DISTINCT ',' + WORK_ORD_LOT_NO
					  FROM    TB_WORK_ORDER_OUTPUT_SUB X
					  WHERE   X.WORK_ORD_NO = A.WORK_ORD_NO
					  FOR XML PATH('') ),1,1,'')
					    AS WORK_ORD_LOT_NO
					, STUFF((         
					  SELECT  DISTINCT ',' + LOT_NO
					  FROM    TB_WORK_ORDER_OUTPUT_SUB X
					  WHERE   X.WORK_ORD_NO = A.WORK_ORD_NO
					  FOR XML PATH('') ),1,1,'')
					    AS LOT_NO
					 , STUFF((         
					  SELECT  DISTINCT ',' + APPEAR_INSPCT_DATE
					  FROM    TB_WORK_ORDER_OUTPUT_SUB X
					  WHERE   X.WORK_ORD_NO = A.WORK_ORD_NO
					  FOR XML PATH('') ),1,1,'')
					    AS APPEAR_INSPCT_DATE
					, ISNULL(Sum(B.TARGET_CNT),0) TARGET_CNT
					, MAX(B.ORD_DATE) ORD_DATE
					, MAX(B.EQUIP_CD) EQUIP_CD
					, MAX(B.GOODS_CD) GOODS_CD
					, MAX(B.EQUIP_COND_SEQ) EQUIP_COND_SEQ
					, MAX(B.WORK_TEAM_CD) WORK_TEAM_CD
					, MAX(B.DEAL_CORP_CD) DEAL_CORP_CD
					, MAX(A.GUBUN) GUBUN					
				FROM TB_WORK_ORDER_OUTPUT_SUB A  ,TB_WORK_ORDER B			

				WHERE 1=1
				AND A.WORK_ORD_NO = B.WORK_ORD_NO
				AND A.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDateTo}
				]]>
				
				<if test="userNumber != null and userNumber != ''"> 
					AND ( A.APPEAR_INSPCT_CHARGER = #{userNumber} OR A.EDGE_INSPCT_CHARGER = #{userNumber} )
				</if>
				<![CDATA[
				GROUP BY
					A.WORK_ORD_NO
			
				) A
				

				
				LEFT OUTER JOIN
				(
					SELECT
						FILM_PIVOT.WORK_ORD_NO
						, FILM_PIVOT.[1] AS SUB_FILM1
						, FILM_PIVOT.[2] AS SUB_FILM2
						, FILM_PIVOT.[3] AS SUB_FILM3
						, FILM_PIVOT.[4] AS SUB_FILM4
		            FROM
					(
		            	SELECT
		                	A.WORK_ORD_NO
		                    , A.LOT_NO
		                    , ROW_NUMBER() OVER(PARTITION BY A.WORK_ORD_NO ORDER BY A.REG_DATE) ROW_NUMBER
		                 FROM TB_WORK_ORDER_DTL A
		                 , TB_MATRL_CODE_ADM B
		                 , (SELECT BASE_CD, BASE_CD_NM, BASE_CD_ABBR FROM TB_SYSTEM_COMMON_CODE B WHERE B.BASE_GROUP_CD='007') C
		                 , (   SELECT
		                          DISTINCT F.WORK_ORD_NO
		                       FROM TB_WORK_ORDER_OUTPUT_SUB F LEFT OUTER JOIN TB_GOODS_FAULTY_ADM_CODE Z 
							   ON 1=1
							   AND F.WORK_ORD_NO = Z.WORK_ORD_NO
		                       WHERE 1=1  
							    AND F.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDateTo}
							
		                       GROUP BY F.WORK_ORD_NO
		        
		                       UNION
		        
		                       SELECT
		                          DISTINCT F.WORK_ORD_NO
		                       FROM TB_EDGE_GOODS_FAULTY_ADM_CODE Z RIGHT OUTER JOIN TB_WORK_ORDER_OUTPUT_SUB F
							   ON 1=1
							   AND F.WORK_ORD_NO = Z.WORK_ORD_NO
		                       WHERE 1=1
		                      
		                     
							    AND F.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDateTo}
							  
		                       GROUP BY F.WORK_ORD_NO
		                       ) E
		                    WHERE   A.MATRL_CD = B.MATRL_CD
		                    AND      B.QUTY_CD = C.BASE_CD
		                    AND      (C.BASE_CD_ABBR = 'F')
		                    AND A.WORK_ORD_NO = E.WORK_ORD_NO
		              ) AS A
		             PIVOT
	                 (
	                    MIN(LOT_NO)
	                    FOR ROW_NUMBER IN ( [1], [2], [3], [4] )
	                 ) FILM_PIVOT
				
				) AS F

				ON 1=1
				AND A.WORK_ORD_NO = F.WORK_ORD_NO 


				LEFT OUTER JOIN 
				(
					SELECT
						F.WORK_ORD_NO
						, SUM(FAULTY_CNT) VISION_FAULTY_SUM
					FROM TB_VISION_FAULTY_ADM_CODE Z , TB_WORK_ORDER_OUTPUT_SUB F
					WHERE 1=1
					AND F.WORK_ORD_NO = Z.WORK_ORD_NO
					
				   AND F.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDateTo}
				   
					AND MINOR_CD NOT IN ('001', '002')
					GROUP BY F.WORK_ORD_NO
				) AS G
				ON A.WORK_ORD_NO = G.WORK_ORD_NO
				
				, (
					SELECT
						WORK_ORD_NO
						, STRING_AGG(MAIN_WORK_CHARGR_NM, ', ')  MAIN_WORK_CHARGR_NM
						, STRING_AGG(APPEAR_INSPCT_CHARGER_NM, ', ') APPEAR_INSPCT_CHARGER_NM
						, STRING_AGG(EDGE_INSPCT_CHARGER_NM, ', ') EDGE_INSPCT_CHARGER_NM
					FROM
					(
						SELECT
							DISTINCT A.WORK_ORD_NO
						
							, A.MAIN_WORK_CHARGR
							, (SELECT USER_NM FROM TB_USER WHERE USER_NUMBER = MAIN_WORK_CHARGR )  AS MAIN_WORK_CHARGR_NM
							, A.APPEAR_INSPCT_CHARGER
							, (SELECT USER_NM FROM TB_USER WHERE USER_NUMBER = APPEAR_INSPCT_CHARGER )  AS APPEAR_INSPCT_CHARGER_NM	
							, A.EDGE_INSPCT_CHARGER
							, (SELECT USER_NM FROM TB_USER WHERE USER_NUMBER = EDGE_INSPCT_CHARGER )  AS EDGE_INSPCT_CHARGER_NM
						FROM TB_WORK_ORDER_OUTPUT_SUB A
						WHERE 1=1
					]]>
						<if test="userNumber != null and userNumber != ''"> 
							AND ( A.APPEAR_INSPCT_CHARGER = #{userNumber} OR A.EDGE_INSPCT_CHARGER = #{userNumber} )
						</if>
					<![CDATA[
					    AND A.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDateTo}
					    
					) C
					GROUP BY
						WORK_ORD_NO
				) H				
				,				
				(
					select
						INSP_DATE		
						, WORK_ORD_NO
						, TRAY_NO
						, SEQ		
						, CNT
						, FAULTY_CNT		
						, PRODUCT_DATE	
						, DAY_NIGHT_CD
				
						,${codeList} 
						from(

						SELECT A.TRAY_NO
						  ,A.SEQ
						  ,A.WORK_ORD_NO
						  ,A.INSP_STATUS
						  ,A.INSP_DATE     
						  ,A.FAULTY_CNT  
						  ,A.DAY_NIGHT_CD
						  ,B.MINOR_CD
						  ,A.INSP_CHARGR
						  ,A.PRODUCT_DATE
						  ,B.FAULTY_CNT B_FALUTY
						  ,FAULTY_TRAY_NO
						  ,(CNT * 65) CNT
						 from TB_SHIP_INSPECT_ADM A, TB_SHIP_INSPECT_DTL B,(SELECT DISTINCT WORK_ORD_NO FROM TB_WORK_ORDER_OUTPUT_SUB X WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDateTo})  C 	,(SELECT IDX ,COUNT(idx) CNT FROM (
																											SELECT idx	
																											,value FROM TB_SHIP_INSPECT_ADM A CROSS APPLY STRING_SPLIT(FAULTY_TRAY_NO, ',')
																											) AA
																											group by idx) D
						where a.IDX = b.SHIP_INSP_IDX
						AND A.RE_INSP_STATUS = '002'						
						AND A.WORK_ORD_NO = C.WORK_ORD_NO
						
						AND A.FAULTY_CNT != 0
						AND A.IDX = D.IDX	

							) AS t 
							PIVOT(SUM(B_FALUTY) FOR MINOR_CD IN (
							${codeList} 
					)) AS PVT
				) E
				
				, ( SELECT FILM_MATRL_CD, ALNICU_MATRL_CD, MODEL, GOODS_CD, GOODS_NM FROM TB_GOODS_CODE_ADM ) C
				, ( SELECT MATRL_CD, CHAMFER_YN_CD, GUBUN_CD, QUTY_CD FROM TB_MATRL_CODE_ADM ) D
				 
				
			WHERE 1=1
			AND A.WORK_ORD_NO = F.WORK_ORD_NO
			AND A.WORK_ORD_NO = H.WORK_ORD_NO
			AND A.GOODS_CD = C.GOODS_CD
			AND D.MATRL_CD = C.ALNICU_MATRL_CD
			AND A.WORK_ORD_NO = E.WORK_ORD_NO		
	
			]]>
			
			<if test="qutyCd != null and qutyCd != ''">
				AND D.QUTY_CD = #{qutyCd}
			</if>
			
			ORDER BY ORD_DATE,WORK_ORD_NO,TRAY_NO, SEQ
	</select>
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	<!-- 생산검사집계/재질 별 -->
	<select id="faultyInitialGoodsTotalList" resultType="HashMap" parameterType="mes.domain.qm.GoodsFaultyAdmVo">
	
		SELECT
			*
		FROM 
		(
			SELECT
				MATRL_INITIAL
				, SUM(APPEAR_FAULTY_CNT) AS APPEAR_FAULTY_CNT
				, SUM(EDGE_FAULTY_CNT) AS EDGE_FAULTY_CNT
				, SUM(RE_INSP_CNT) AS RE_INSP_CNT
				, SUM(FAULT_SUM) AS FAULT_SUM
				, SUM(APPEAR_OUTPUT_CNT) AS APPEAR_OUTPUT_CNT
				, SUM(USER_INPUT_INSPCT_CNT) AS USER_INPUT_INSPCT_CNT
				, SUM(FAULT_PERCENT) AS FAULT_PERCENT
			FROM
			(
				SELECT
					A.GOODS_CD
					,(SELECT GOODS_NM FROM TB_GOODS_CODE_ADM X WHERE X.GOODS_CD = A.GOODS_CD) GOODS_NM
					, ( SELECT MATRL_INITIAL FROM TB_MATRL_CODE_ADM WHERE MATRL_CD = ( SELECT ALNICU_MATRL_CD FROM TB_GOODS_CODE_ADM X WHERE GOODS_CD = A.GOODS_CD ) ) AS MATRL_INITIAL
					, ISNULL( SUM(CC.FAULTY_CNT), 0 ) APPEAR_FAULTY_CNT 
					, ISNULL( SUM(B.FAULTY_CNT), 0 ) EDGE_FAULTY_CNT
					, ISNULL( SUM(C.FAULTY_CNT), 0 ) RE_INSP_CNT
					, ISNULL( SUM(CC.FAULTY_CNT), 0 ) +  ISNULL( SUM(B.FAULTY_CNT), 0 ) + ISNULL( SUM(C.FAULTY_CNT), 0 ) FAULT_SUM
					, ISNULL( SUM(APPEAR_OUTPUT_CNT), 0 ) APPEAR_OUTPUT_CNT
					, ISNULL( SUM(CC.FAULTY_CNT), 0 ) +  ISNULL( SUM(B.FAULTY_CNT), 0 ) +  ISNULL( SUM(APPEAR_OUTPUT_CNT), 0 ) + ISNULL( SUM(C.FAULTY_CNT), 0 ) USER_INPUT_INSPCT_CNT
					, ( ISNULL( Sum(CC.FAULTY_CNT), 0 ) + ISNULL( SUM(B.FAULTY_CNT), 0 ) + ISNULL( SUM(C.FAULTY_CNT), 0 ) ) / (  ISNULL( SUM(CC.FAULTY_CNT), 0 ) + ISNULL( SUM(B.FAULTY_CNT), 0 ) + ISNULL( SUM(APPEAR_OUTPUT_CNT), 0 ) ) * 100 FAULT_PERCENT
								
				FROM 
				(
					SELECT
						C.WORK_ORD_NO
						, E.GOODS_CD
						, SUM(C.OUTPUT_CNT) AS APPEAR_OUTPUT_CNT
					FROM TB_WORK_ORDER_OUTPUT_SUB C, TB_WORK_ORDER E
					WHERE C.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
					AND C.WORK_ORD_NO = E.WORK_ORD_NO
					GROUP BY C.WORK_ORD_NO, E.GOODS_CD
				) A 
				LEFT OUTER JOIN 
				(
					SELECT
						X.WORK_ORD_NO
						, SUM(ISNULL(FAULTY_CNT,0)) FAULTY_CNT						
					FROM TB_GOODS_FAULTY_ADM_CODE Z
					, (
						SELECT
							DISTINCT WORK_ORD_NO
						FROM TB_WORK_ORDER_OUTPUT_SUB X
						WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
					) X
					WHERE 1=1 
					AND X.WORK_ORD_NO = Z.WORK_ORD_NO	
					GROUP BY X.WORK_ORD_NO
				) CC
				ON CC.WORK_ORD_NO = A.WORK_ORD_NO
					
				LEFT OUTER JOIN 
					
				(
					SELECT
						X.WORK_ORD_NO,				
						ISNULL(SUM(C.FAULTY_CNT),0) FAULTY_CNT							  
					FROM TB_EDGE_GOODS_FAULTY_ADM_CODE C
					, (
						SELECT
							DISTINCT WORK_ORD_NO
						FROM TB_WORK_ORDER_OUTPUT_SUB X
						WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
					) X
					WHERE C.WORK_ORD_NO = X.WORK_ORD_NO					
					GROUP BY X.WORK_ORD_NO
								
				) B
				ON A.WORK_ORD_NO = B.WORK_ORD_NO		
								
				LEFT OUTER JOIN
		
				(
					SELECT 							
						X.WORK_ORD_NO
						,ISNULL(SUM(A.FAULTY_CNT),0) FAULTY_CNT							
					FROM TB_SHIP_INSPECT_ADM B
					, TB_SHIP_INSPECT_DTL A
					, (
						SELECT
							DISTINCT WORK_ORD_NO
						FROM TB_WORK_ORDER_OUTPUT_SUB X
						WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
					) X
					WHERE B.WORK_ORD_NO = X.WORK_ORD_NO
					AND A.SHIP_INSP_IDX = B.IDX
					AND RE_INSP_STATUS = '002'
					GROUP BY X.WORK_ORD_NO
				) C
				ON A.WORK_ORD_NO = C.WORK_ORD_NO				
				GROUP BY A.GOODS_CD
				
			) AS AA
			
			GROUP BY
			MATRL_INITIAL
		) AA
		
		LEFT OUTER JOIN 
		(
			SELECT
				*
			FROM
			(
				SELECT
					BB.MATRL_INITIAL AS MATRL_INITIAL2
					, BB.MINOR_CD
					, SUM(FAULTY_CNT) AS FAULTY_CNT
				FROM
				(
					SELECT	
						MINOR_CD
						, ISNULL(SUM(FAULTY_CNT),0) FAULTY_CNT
						,GOODS_CD
						, ( SELECT MATRL_INITIAL FROM TB_MATRL_CODE_ADM WHERE MATRL_CD = ( SELECT ALNICU_MATRL_CD FROM TB_GOODS_CODE_ADM X WHERE GOODS_CD = E.GOODS_CD ) ) AS MATRL_INITIAL
					FROM TB_GOODS_FAULTY_ADM_CODE B,  TB_WORK_ORDER E, (SELECT DISTINCT WORK_ORD_NO FROM TB_WORK_ORDER_OUTPUT_SUB X WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}) X
					WHERE B.WORK_ORD_NO = X.WORK_ORD_NO					
					AND E.WORK_ORD_NO = X.WORK_ORD_NO
					GROUP BY MINOR_CD,GOODS_CD
			
					UNION ALL
			
					SELECT 
											
						'200' MINOR_CD
						, ISNULL(SUM(FAULTY_CNT),0) FAULTY_CNT
						,GOODS_CD
						, ( SELECT MATRL_INITIAL FROM TB_MATRL_CODE_ADM WHERE MATRL_CD = ( SELECT ALNICU_MATRL_CD FROM TB_GOODS_CODE_ADM X WHERE GOODS_CD = E.GOODS_CD ) ) AS MATRL_INITIAL
					FROM TB_EDGE_GOODS_FAULTY_ADM_CODE B,  TB_WORK_ORDER E, (SELECT DISTINCT WORK_ORD_NO FROM TB_WORK_ORDER_OUTPUT_SUB X WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}) X
					WHERE B.WORK_ORD_NO = X.WORK_ORD_NO					
					AND E.WORK_ORD_NO = X.WORK_ORD_NO
					<![CDATA[
					AND MINOR_CD < '009'
					]]>
					GROUP BY GOODS_CD
										
					UNION ALL
			
					SELECT 							
						A.MINOR_CD
						, ISNULL(SUM(A.FAULTY_CNT),0) FAULTY_CNT
						,GOODS_CD
						, ( SELECT MATRL_INITIAL FROM TB_MATRL_CODE_ADM WHERE MATRL_CD = ( SELECT ALNICU_MATRL_CD FROM TB_GOODS_CODE_ADM X WHERE GOODS_CD = E.GOODS_CD ) ) AS MATRL_INITIAL
					FROM TB_SHIP_INSPECT_ADM B, TB_SHIP_INSPECT_DTL A,  TB_WORK_ORDER E, (SELECT DISTINCT WORK_ORD_NO FROM TB_WORK_ORDER_OUTPUT_SUB X WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}) X
					WHERE B.WORK_ORD_NO = X.WORK_ORD_NO					
					AND E.WORK_ORD_NO = X.WORK_ORD_NO
					AND A.SHIP_INSP_IDX = B.IDX
					AND RE_INSP_STATUS = '002'
					GROUP BY A.MINOR_CD,GOODS_CD
				) AS BB
				GROUP BY MATRL_INITIAL, MINOR_CD
									
			) AS T
			
			PIVOT(SUM(FAULTY_CNT) FOR MINOR_CD IN (
				${codeList}
			)) AS PVT
			
		) BB
		ON AA.MATRL_INITIAL = BB.MATRL_INITIAL2
			
		ORDER BY AA.MATRL_INITIAL
	</select>
	
	
	
	
	
	<!-- 생산검사집계/주차 별 -->
	<select id="faultyByWeekTotalList" resultType="HashMap" parameterType="mes.domain.qm.GoodsFaultyAdmVo">
		SELECT
			*
		FROM
		(
			SELECT
				DATEPART(YYYY, A.WORK_ORD_DATE ) AS WORK_ORD_DATE_YYYY
				, DATEPART(WW, A.WORK_ORD_DATE ) AS WORK_ORD_DATE
				, ISNULL( SUM(CC.FAULTY_CNT), 0 ) APPEAR_FAULTY_CNT 
				, ISNULL( SUM(B.FAULTY_CNT), 0 ) EDGE_FAULTY_CNT
				, ISNULL( SUM(C.FAULTY_CNT), 0 ) RE_INSP_CNT
				, ISNULL( SUM(CC.FAULTY_CNT), 0 ) +  ISNULL( SUM(B.FAULTY_CNT), 0 ) + ISNULL( SUM(C.FAULTY_CNT), 0 ) FAULT_SUM
				, ISNULL( SUM(APPEAR_OUTPUT_CNT), 0 ) APPEAR_OUTPUT_CNT
				, ISNULL( SUM(CC.FAULTY_CNT), 0 ) +  ISNULL( SUM(B.FAULTY_CNT), 0 ) +  ISNULL( SUM(APPEAR_OUTPUT_CNT), 0 )  + ISNULL( SUM(C.FAULTY_CNT), 0 ) USER_INPUT_INSPCT_CNT
				, ( ISNULL( Sum(CC.FAULTY_CNT), 0 ) + ISNULL( SUM(B.FAULTY_CNT), 0 ) + ISNULL( SUM(C.FAULTY_CNT), 0 ) ) / (  ISNULL( SUM(CC.FAULTY_CNT), 0 ) + ISNULL( SUM(B.FAULTY_CNT), 0 ) + ISNULL( SUM(APPEAR_OUTPUT_CNT), 0 ) ) * 100 FAULT_PERCENT
			FROM
			(
				SELECT 
					WORK_ORD_DATE
					, (SUM(OUTPUT_CNT) ) AS APPEAR_OUTPUT_CNT			
							  
				FROM TB_WORK_ORDER_OUTPUT_SUB A
				WHERE WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
				GROUP BY  WORK_ORD_DATE
			) A 
			LEFT OUTER JOIN 
			(
				SELECT
					X.WORK_ORD_DATE
					, SUM(ISNULL(FAULTY_CNT,0)) FAULTY_CNT						
	
				FROM TB_GOODS_FAULTY_ADM_CODE Z
				, (
					SELECT
						DISTINCT WORK_ORD_NO
						, MAX(WORK_ORD_DATE) WORK_ORD_DATE
					FROM TB_WORK_ORDER_OUTPUT_SUB X
					WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
					GROUP BY WORK_ORD_NO
				) X
				WHERE 1=1 
				AND X.WORK_ORD_NO = Z.WORK_ORD_NO	
				GROUP BY X.WORK_ORD_DATE
			) CC
			ON CC.WORK_ORD_DATE = A.WORK_ORD_DATE
			
			LEFT OUTER JOIN 
			(
				SELECT
					X.WORK_ORD_DATE							  
					, ISNULL(SUM(FAULTY_CNT),0) FAULTY_CNT
				FROM TB_EDGE_GOODS_FAULTY_ADM_CODE Z
				, (
					SELECT
						DISTINCT WORK_ORD_NO
						, MAX(WORK_ORD_DATE) WORK_ORD_DATE
					FROM TB_WORK_ORDER_OUTPUT_SUB X
					WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
					GROUP BY WORK_ORD_NO
				) X
				WHERE X.WORK_ORD_NO = Z.WORK_ORD_NO	
				GROUP BY X.WORK_ORD_DATE
			) B
			ON A.WORK_ORD_DATE = B.WORK_ORD_DATE	
			
			LEFT OUTER JOIN
			(
				SELECT 
					X.WORK_ORD_DATE							
					, ISNULL(SUM(A.FAULTY_CNT),0) FAULTY_CNT				
				FROM TB_SHIP_INSPECT_ADM B
				, TB_SHIP_INSPECT_DTL A
				, (
					SELECT
						DISTINCT WORK_ORD_NO
						, MAX(WORK_ORD_DATE) WORK_ORD_DATE
					FROM TB_WORK_ORDER_OUTPUT_SUB X
					WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
					GROUP BY WORK_ORD_NO
				) X
				WHERE B.WORK_ORD_NO = X.WORK_ORD_NO
				AND A.SHIP_INSP_IDX = B.IDX
				AND RE_INSP_STATUS = '002'
				GROUP BY X.WORK_ORD_DATE
			) C
			ON A.WORK_ORD_DATE = C.WORK_ORD_DATE					
			
			GROUP BY
				DATEPART(YYYY, A.WORK_ORD_DATE )
				, DATEPART(WW, A.WORK_ORD_DATE )
		) AA
		LEFT OUTER JOIN 
		(
			SELECT
				*
			FROM
			(
				SELECT 
					DATEPART(YYYY, X.WORK_ORD_DATE ) AS WORK_ORD_DATE_YYYY2
					, DATEPART(WW, X.WORK_ORD_DATE ) AS WORK_ORD_DATE2 
					, MINOR_CD
					, ISNULL(SUM(FAULTY_CNT),0) FAULTY_CNT
				FROM TB_GOODS_FAULTY_ADM_CODE B , (SELECT DISTINCT WORK_ORD_NO, MAX(WORK_ORD_DATE) WORK_ORD_DATE FROM TB_WORK_ORDER_OUTPUT_SUB X WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate} GROUP BY WORK_ORD_NO) X
				WHERE B.WORK_ORD_NO = X.WORK_ORD_NO
				GROUP BY  DATEPART(YYYY, X.WORK_ORD_DATE ), DATEPART(WW, X.WORK_ORD_DATE ), MINOR_CD
					
				UNION ALL

				SELECT
					DATEPART(YYYY, X.WORK_ORD_DATE ) AS WORK_ORD_DATE_YYYY
					, DATEPART(WW, X.WORK_ORD_DATE ) AS WORK_ORD_DATE
					, '200' AS MINOR_CD 
					, ISNULL(SUM(FAULTY_CNT),0) FAULTY_CNT
				FROM TB_EDGE_GOODS_FAULTY_ADM_CODE B , (SELECT DISTINCT WORK_ORD_NO, MAX(WORK_ORD_DATE) WORK_ORD_DATE FROM TB_WORK_ORDER_OUTPUT_SUB X WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate} GROUP BY WORK_ORD_NO) X
				WHERE B.WORK_ORD_NO = X.WORK_ORD_NO
				<![CDATA[
					AND MINOR_CD < '009'
				]]>
				GROUP BY DATEPART(YYYY, X.WORK_ORD_DATE ), DATEPART(WW, X.WORK_ORD_DATE )
					
				UNION ALL

				SELECT
					DATEPART(YYYY, X.WORK_ORD_DATE ) AS WORK_ORD_DATE_YYYY
					, DATEPART(WW, X.WORK_ORD_DATE ) AS WORK_ORD_DATE
					, A.MINOR_CD
					, ISNULL(SUM(A.FAULTY_CNT),0) FAULTY_CNT				
				FROM TB_SHIP_INSPECT_ADM B, TB_SHIP_INSPECT_DTL A, (SELECT DISTINCT WORK_ORD_NO, MAX(WORK_ORD_DATE) WORK_ORD_DATE FROM TB_WORK_ORDER_OUTPUT_SUB X WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate} GROUP BY WORK_ORD_NO) X
				WHERE B.WORK_ORD_NO = X.WORK_ORD_NO
				AND A.SHIP_INSP_IDX = B.IDX
				AND RE_INSP_STATUS = '002'
				GROUP BY DATEPART(YYYY, X.WORK_ORD_DATE ), DATEPART(WW, X.WORK_ORD_DATE ), MINOR_CD
					
			) AS t
			PIVOT(SUM(FAULTY_CNT) FOR MINOR_CD IN (
				${codeList}
			)) AS PVT
		) D
		ON AA.WORK_ORD_DATE_YYYY = D.WORK_ORD_DATE_YYYY2
		AND AA.WORK_ORD_DATE = D.WORK_ORD_DATE2
		
		ORDER BY AA.WORK_ORD_DATE_YYYY, AA.WORK_ORD_DATE
	</select>
	
	
	<!-- 생산검사집계/월 별 -->
	<select id="faultyByMonthTotalList" resultType="HashMap" parameterType="mes.domain.qm.GoodsFaultyAdmVo">
		SELECT
			*
		FROM
		(
			SELECT
				DATEPART(YYYY, A.WORK_ORD_DATE ) AS WORK_ORD_DATE_YYYY
				, DATEPART(MM, A.WORK_ORD_DATE ) AS WORK_ORD_DATE
				, ISNULL( SUM(CC.FAULTY_CNT), 0 ) APPEAR_FAULTY_CNT 
				, ISNULL( SUM(B.FAULTY_CNT), 0 ) EDGE_FAULTY_CNT
				, ISNULL( SUM(C.FAULTY_CNT), 0 ) RE_INSP_CNT
				, ISNULL( SUM(CC.FAULTY_CNT), 0 ) +  ISNULL( SUM(B.FAULTY_CNT), 0 ) + ISNULL( SUM(C.FAULTY_CNT), 0 ) FAULT_SUM
				, ISNULL( SUM(APPEAR_OUTPUT_CNT), 0 ) APPEAR_OUTPUT_CNT
				, ISNULL( SUM(CC.FAULTY_CNT), 0 ) +  ISNULL( SUM(B.FAULTY_CNT), 0 ) +  ISNULL( SUM(APPEAR_OUTPUT_CNT), 0 )  + ISNULL( SUM(C.FAULTY_CNT), 0 ) USER_INPUT_INSPCT_CNT
				, ( ISNULL( Sum(CC.FAULTY_CNT), 0 ) + ISNULL( SUM(B.FAULTY_CNT), 0 ) + ISNULL( SUM(C.FAULTY_CNT), 0 ) ) / (  ISNULL( SUM(CC.FAULTY_CNT), 0 ) + ISNULL( SUM(B.FAULTY_CNT), 0 ) + ISNULL( SUM(APPEAR_OUTPUT_CNT), 0 ) ) * 100 FAULT_PERCENT
			FROM
			(
				SELECT 
					WORK_ORD_DATE
					, (SUM(OUTPUT_CNT) ) AS APPEAR_OUTPUT_CNT			
							  
				FROM TB_WORK_ORDER_OUTPUT_SUB A
				WHERE WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
				GROUP BY  WORK_ORD_DATE
			) A 
			LEFT OUTER JOIN 
			(
				SELECT
					X.WORK_ORD_DATE
					, SUM(ISNULL(FAULTY_CNT,0)) FAULTY_CNT						
	
				FROM TB_GOODS_FAULTY_ADM_CODE Z
				, (
					SELECT
						DISTINCT WORK_ORD_NO
						, MAX(WORK_ORD_DATE) WORK_ORD_DATE
					FROM TB_WORK_ORDER_OUTPUT_SUB X
					WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
					GROUP BY WORK_ORD_NO
				) X
				WHERE 1=1 
				AND X.WORK_ORD_NO = Z.WORK_ORD_NO	
				GROUP BY X.WORK_ORD_DATE
			) CC
			ON CC.WORK_ORD_DATE = A.WORK_ORD_DATE
			
			LEFT OUTER JOIN 
			(
				SELECT
					X.WORK_ORD_DATE							  
					, ISNULL(SUM(FAULTY_CNT),0) FAULTY_CNT
				FROM TB_EDGE_GOODS_FAULTY_ADM_CODE Z
				, (
					SELECT
						DISTINCT WORK_ORD_NO
						, MAX(WORK_ORD_DATE) WORK_ORD_DATE
					FROM TB_WORK_ORDER_OUTPUT_SUB X
					WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
					GROUP BY WORK_ORD_NO
				) X
				WHERE X.WORK_ORD_NO = Z.WORK_ORD_NO	
				GROUP BY X.WORK_ORD_DATE
			) B
			ON A.WORK_ORD_DATE = B.WORK_ORD_DATE	
			
			LEFT OUTER JOIN
			(
				SELECT 
					X.WORK_ORD_DATE							
					, ISNULL(SUM(A.FAULTY_CNT),0) FAULTY_CNT				
				FROM TB_SHIP_INSPECT_ADM B
				, TB_SHIP_INSPECT_DTL A
				, (
					SELECT
						DISTINCT WORK_ORD_NO
						, MAX(WORK_ORD_DATE) WORK_ORD_DATE
					FROM TB_WORK_ORDER_OUTPUT_SUB X
					WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate}
					GROUP BY WORK_ORD_NO
				) X
				WHERE B.WORK_ORD_NO = X.WORK_ORD_NO
				AND A.SHIP_INSP_IDX = B.IDX
				AND RE_INSP_STATUS = '002'
				GROUP BY X.WORK_ORD_DATE
			) C
			ON A.WORK_ORD_DATE = C.WORK_ORD_DATE					
			
			GROUP BY
				DATEPART(YYYY, A.WORK_ORD_DATE )
				, DATEPART(MM, A.WORK_ORD_DATE )
		) AA
		LEFT OUTER JOIN 
		(
			SELECT
				*
			FROM
			(
				SELECT 
					DATEPART(YYYY, X.WORK_ORD_DATE ) AS WORK_ORD_DATE_YYYY2
					, DATEPART(MM, X.WORK_ORD_DATE ) AS WORK_ORD_DATE2 
					, MINOR_CD
					, ISNULL(SUM(FAULTY_CNT),0) FAULTY_CNT
				FROM TB_GOODS_FAULTY_ADM_CODE B , (SELECT DISTINCT WORK_ORD_NO, MAX(WORK_ORD_DATE) WORK_ORD_DATE FROM TB_WORK_ORDER_OUTPUT_SUB X WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate} GROUP BY WORK_ORD_NO) X
				WHERE B.WORK_ORD_NO = X.WORK_ORD_NO
				GROUP BY  DATEPART(YYYY, X.WORK_ORD_DATE ), DATEPART(MM, X.WORK_ORD_DATE ), MINOR_CD
					
				UNION ALL

				SELECT
					DATEPART(YYYY, X.WORK_ORD_DATE ) AS WORK_ORD_DATE_YYYY
					, DATEPART(MM, X.WORK_ORD_DATE ) AS WORK_ORD_DATE
					, '200' AS MINOR_CD 
					, ISNULL(SUM(FAULTY_CNT),0) FAULTY_CNT
				FROM TB_EDGE_GOODS_FAULTY_ADM_CODE B , (SELECT DISTINCT WORK_ORD_NO, MAX(WORK_ORD_DATE) WORK_ORD_DATE FROM TB_WORK_ORDER_OUTPUT_SUB X WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate} GROUP BY WORK_ORD_NO) X
				WHERE B.WORK_ORD_NO = X.WORK_ORD_NO
				<![CDATA[
					AND MINOR_CD < '009'
				]]>
				GROUP BY DATEPART(YYYY, X.WORK_ORD_DATE ), DATEPART(MM, X.WORK_ORD_DATE )
					
				UNION ALL

				SELECT
					DATEPART(YYYY, X.WORK_ORD_DATE ) AS WORK_ORD_DATE_YYYY
					, DATEPART(MM, X.WORK_ORD_DATE ) AS WORK_ORD_DATE
					, A.MINOR_CD
					, ISNULL(SUM(A.FAULTY_CNT),0) FAULTY_CNT				
				FROM TB_SHIP_INSPECT_ADM B, TB_SHIP_INSPECT_DTL A, (SELECT DISTINCT WORK_ORD_NO, MAX(WORK_ORD_DATE) WORK_ORD_DATE FROM TB_WORK_ORDER_OUTPUT_SUB X WHERE X.WORK_ORD_DATE BETWEEN #{chooseDateFrom} AND #{chooseDate} GROUP BY WORK_ORD_NO) X
				WHERE B.WORK_ORD_NO = X.WORK_ORD_NO
				AND A.SHIP_INSP_IDX = B.IDX
				AND RE_INSP_STATUS = '002'
				GROUP BY DATEPART(YYYY, X.WORK_ORD_DATE ), DATEPART(MM, X.WORK_ORD_DATE ), MINOR_CD
					
			) AS t
			PIVOT(SUM(FAULTY_CNT) FOR MINOR_CD IN (
				${codeList}
			)) AS PVT
		) D
		ON AA.WORK_ORD_DATE_YYYY = D.WORK_ORD_DATE_YYYY2
		AND AA.WORK_ORD_DATE = D.WORK_ORD_DATE2
		
		ORDER BY AA.WORK_ORD_DATE_YYYY, AA.WORK_ORD_DATE
	</select>
	
	
	
	
</mapper>
